/* Extract Database vt_weaving1:c:\a_usr\vstock\stock.gdb */
CREATE DATABASE "vt_weaving1:c:\a_usr\vstock\stock.gdb" PAGE_SIZE 2048 
;


/* Table: AGENT, Owner: SYSDBA */
CREATE TABLE AGENT (AGENTREF CHAR(6) NOT NULL,
        DESCR VARCHAR(40),
PRIMARY KEY (AGENTREF));

/* Table: APORDDET, Owner: SYSDBA */
CREATE TABLE APORDDET (EXPDELDATE DATE NOT NULL,
        PRODREF CHAR(6) NOT NULL,
        QTY DOUBLE PRECISION NOT NULL,
        QTYRCVD DOUBLE PRECISION NOT NULL,
        ORDLINECOMPLETE CHAR(1) NOT NULL,
        VTORDNO INTEGER NOT NULL,
CONSTRAINT PAPORDDET PRIMARY KEY (VTORDNO, PRODREF, EXPDELDATE));

/* Table: APORDHDR, Owner: SYSDBA */
CREATE TABLE APORDHDR (EXPDELDATE DATE,
        SUPREF CHAR(6) NOT NULL,
        ORDERSENT CHAR(1),
        DATEENT DATE default "now"
 NOT NULL,
        DATEMOD DATE default "now"
 NOT NULL,
        ORDEREDBY CHAR(4) NOT NULL,
        AUTHBY CHAR(4),
        USERENT CHAR(4) NOT NULL,
        USERMOD CHAR(4) NOT NULL,
        ORDAPPROX CHAR(1),
        ORDDATE DATE,
        SUPORDNO CHAR(15),
        VTORDNO INTEGER NOT NULL,
        REDYE SMALLINT default 1
,
CONSTRAINT PAPORDHDR PRIMARY KEY (VTORDNO));

/* Table: CTRLACCT, Owner: SYSDBA */
CREATE TABLE CTRLACCT (ACCNAME CHAR(6) NOT NULL,
        DESCRIPTION CHAR(60),
        EXTACCNAME CHAR(9),
        QTY DOUBLE PRECISION default 0
,
CONSTRAINT PCTRLACCT PRIMARY KEY (ACCNAME));

/* Table: CURRENCY, Owner: SYSDBA */
CREATE TABLE CURRENCY (CURREF CHAR(3) NOT NULL,
        DESCR VARCHAR(20) NOT NULL,
        MULTDIV CHAR(1),
        EXCHRATE DOUBLE PRECISION,
PRIMARY KEY (CURREF));

/* Table: DELBCB, Owner: SYSDBA */
CREATE TABLE DELBCB (DELNO INTEGER NOT NULL,
        PALLETNO SMALLINT NOT NULL,
        BCBNO SMALLINT NOT NULL,
        QTY DOUBLE PRECISION NOT NULL,
        BCBISSUED CHAR(1),
        VALUERATING DOUBLE PRECISION NOT NULL,
        VALUERATINGDATE DATE NOT NULL,
        STOCKAREA INTEGER default 0
,
        QTYISSUED DOUBLE PRECISION,
        FACTORYNO INTEGER default 1
,
CONSTRAINT PDELBCB PRIMARY KEY (DELNO, PALLETNO, BCBNO));

/* Table: DELHEAD, Owner: SYSDBA */
CREATE TABLE DELHEAD (DELNO INTEGER NOT NULL,
        EXPDELDATE DATE NOT NULL,
        SUPREF CHAR(6) NOT NULL,
        DELNOTENO CHAR(15),
        AGENT CHAR(6),
        SUPORDNO CHAR(15),
        CONTREF CHAR(15),
        DELNOTEDATE DATE NOT NULL,
        PALLETSRCVD SMALLINT NOT NULL,
        CARTONSRCVD SMALLINT NOT NULL,
        QTYRCVD DOUBLE PRECISION NOT NULL,
        DELDATE DATE NOT NULL,
        RCVDBY CHAR(4) NOT NULL,
        NARRATIVE VARCHAR(60),
        PRODREF CHAR(6) NOT NULL,
        VTORDNO INTEGER NOT NULL,
        DATEENT DATE,
        USERENT CHAR(4),
        DATEMOD DATE,
        USERMOD CHAR(4),
CONSTRAINT PDELHEAD PRIMARY KEY (DELNO));

/* Table: DELHEADTRACK, Owner: SYSDBA */
CREATE TABLE DELHEADTRACK (TRACKINGREF INTEGER NOT NULL,
        DELNO INTEGER NOT NULL,
        EXPDELDATE DATE NOT NULL,
        SUPREF CHAR(6) NOT NULL,
        DELNOTENO CHAR(15),
        AGENT CHAR(6),
        SUPORDNO CHAR(15),
        CONTREF CHAR(15),
        DELNOTEDATE DATE NOT NULL,
        PALLETSRCVD SMALLINT NOT NULL,
        CARTONSRCVD SMALLINT NOT NULL,
        QTYRCVD DOUBLE PRECISION NOT NULL,
        DELDATE DATE NOT NULL,
        RCVDBY CHAR(4) NOT NULL,
        NARRATIVE VARCHAR(60),
        PRODREF CHAR(6) NOT NULL,
        VTORDNO INTEGER NOT NULL,
        DATEMOD DATE,
        USERMOD CHAR(8),
CONSTRAINT PDELHEADTRACK PRIMARY KEY (TRACKINGREF));

/* Table: DELPALLET, Owner: SYSDBA */
CREATE TABLE DELPALLET (DELNO INTEGER NOT NULL,
        PALLETNO SMALLINT NOT NULL,
        PRODREF CHAR(6),
        BAGCARTBALEDEL SMALLINT NOT NULL,
        QTYRCVD DOUBLE PRECISION NOT NULL,
        MERGENO CHAR(5),
        QTYISSUED DOUBLE PRECISION NOT NULL,
        BCBISSUED DOUBLE PRECISION NOT NULL,
        VALUERATING DOUBLE PRECISION NOT NULL,
        VALUERATINGDATE DATE NOT NULL,
CONSTRAINT PDELPALLET PRIMARY KEY (DELNO, PALLETNO));

/* Table: DEPT, Owner: SYSDBA */
CREATE TABLE DEPT (DEPTREF CHAR(6) NOT NULL,
        DESCR VARCHAR(40),
        CTRLACCT CHAR(6),
        ISSUEYARNTO CHAR(1),
        TRANSFERALLOWED CHAR(1) default 'N'
,
        SUPPLIER CHAR(1) default 'N'
,
CONSTRAINT PDEPT PRIMARY KEY (DEPTREF));

/* Table: INITIALS, Owner: SYSDBA */
CREATE TABLE INITIALS (INITIALS CHAR(4) NOT NULL,
        SURNAME VARCHAR(20),
        FIRSTNAME VARCHAR(10),
        EXT SMALLINT,
        USERNAME CHAR(8),
CONSTRAINT INITIALS_REF PRIMARY KEY (INITIALS));

/* Table: INVFROM, Owner: SYSDBA */
CREATE TABLE INVFROM (POSTALADD1 VARCHAR(20),
        POSTALADD2 VARCHAR(20),
        POSTALADD3 VARCHAR(20),
        POSTALADD4 VARCHAR(20),
        POSTALADD5 VARCHAR(20),
        PHONENO VARCHAR(20),
        FAXNO VARCHAR(20),
        INVREF CHAR(6) NOT NULL,
        DESCR VARCHAR(40),
CONSTRAINT PINVFROM PRIMARY KEY (INVREF));

/* Table: ISSUEDET, Owner: SYSDBA */
CREATE TABLE ISSUEDET (ISSUENO INTEGER NOT NULL,
        DELNO INTEGER NOT NULL,
        PALLETNO SMALLINT NOT NULL,
        BCBNO SMALLINT NOT NULL,
        DATEISSUED DATE NOT NULL,
        INITIALS CHAR(4) NOT NULL,
        QTYISSUED DOUBLE PRECISION NOT NULL,
        ISSUETO CHAR(6) NOT NULL,
        BCBISSUED DOUBLE PRECISION,
        PRODREF CHAR(6),
        BATREF INTEGER default 0
,
        DATEENT DATE,
        USERENT CHAR(4),
CONSTRAINT PISSUEDET PRIMARY KEY (ISSUENO));

/* Table: MEWEFTUSED, Owner: SYSDBA */
CREATE TABLE MEWEFTUSED (YNSTRU CHAR(4) NOT NULL,
        YNTWIST CHAR(2) NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        YNQLTY CHAR(1) NOT NULL,
        YEARNO SMALLINT NOT NULL,
        PERIODNO SMALLINT NOT NULL,
        DESPTOWEAVING DOUBLE PRECISION default 0
,
        RETURNED DOUBLE PRECISION default 0
,
        NETDESP COMPUTED BY (desptoweaving-returned),
        OPENWIP DOUBLE PRECISION default 0
,
        CLOSEWIP DOUBLE PRECISION default 0
,
        WEFTUSED COMPUTED BY (netdesp+openwip-closewip),
CONSTRAINT PMEWEFTUSED PRIMARY KEY (YNSTRU, YNTWIST, YNCOL, YNQLTY, YEARNO, PERIODNO));

/* Table: MEYARNANAL, Owner: SYSDBA */
CREATE TABLE MEYARNANAL (YNSTRU CHAR(4) NOT NULL,
        YNTWIST CHAR(2) NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        YNQLTY CHAR(1) NOT NULL,
        YEARNO SMALLINT NOT NULL,
        PERIODNO SMALLINT NOT NULL,
        OPENSTK DOUBLE PRECISION default 0
,
        OPENWIP DOUBLE PRECISION default 0
,
        YNMANU DOUBLE PRECISION default 0
,
        YNRETURNED DOUBLE PRECISION default 0
,
        ISSUEDQLTY DOUBLE PRECISION default 0
,
        ISSUEDWEAVING DOUBLE PRECISION default 0
,
        ISSUEDTWISTER DOUBLE PRECISION default 0
,
        ISSUEDWARPING DOUBLE PRECISION default 0
,
        ISSUEDADJUST DOUBLE PRECISION default 0
,
        ISSUEDOTHER DOUBLE PRECISION default 0
,
        SALESAECI DOUBLE PRECISION default 0
,
        SALESLOUVTE DOUBLE PRECISION default 0
,
        SALESXTILIA DOUBLE PRECISION default 0
,
        CLOSESTK DOUBLE PRECISION default 0
,
        CLOSEWIP DOUBLE PRECISION default 0
,
        YNSTRUGRP CHAR(4),
        ISSUEDVREDEFU DOUBLE PRECISION default 0
,
        ISSUEDVREDEVB DOUBLE PRECISION default 0
,
        OPENWIPWEAVING DOUBLE PRECISION default 0
,
        CLOSEWIPWEAVING DOUBLE PRECISION default 0
,
        CLOSESTKCALC COMPUTED BY (openstk+openwip+openwipweaving+ynmanu+ynreturned-
issuedqlty-issuedweaving-issuedtwister-issuedwarping-issuedother-
issuedadjust-salesaeci-saleslouvte-salesxtilia-issuedvredefu-
issuedvredevb),
CONSTRAINT PMEYARNANAL PRIMARY KEY (YNSTRU, YNTWIST, YNCOL, YNQLTY, YEARNO, PERIODNO));

/* Table: NEXTNO, Owner: SYSDBA */
CREATE TABLE NEXTNO (REF SMALLINT NOT NULL,
        NEXTNO INTEGER NOT NULL,
        DESCR CHAR(20),
CONSTRAINT PNEXTNO PRIMARY KEY (REF));

/* Table: PARAM, Owner: SYSDBA */
CREATE TABLE PARAM (REF SMALLINT NOT NULL,
        CONAME VARCHAR(30) NOT NULL,
        SHORTCONAME VARCHAR(15),
        INVOICECONAME VARCHAR(30),
        CENTRALCURRENCY CHAR(3) NOT NULL,
        VATRATE DOUBLE PRECISION,
        MAKEDATE DATE,
        PMSTARTDATE DATE,
        PMENDDATE DATE,
        NOENTRYBEFOREDATE DATE NOT NULL,
        LASTMEYEARNO SMALLINT,
        LASTMEPERIODNO SMALLINT,
        MEINPROGRESS CHAR(1),
PRIMARY KEY (REF));

/* Table: PRODCAT, Owner: SYSDBA */
CREATE TABLE PRODCAT (CATEGORY CHAR(3) NOT NULL,
        DESCR VARCHAR(40),
PRIMARY KEY (CATEGORY));

/* Table: PRODSUP, Owner: SYSDBA */
CREATE TABLE PRODSUP (PRODREF CHAR(6) NOT NULL,
        SUPREF CHAR(6) NOT NULL,
        MATSUPREF VARCHAR(12),
        MATSUPDESC VARCHAR(30),
PRIMARY KEY (PRODREF, SUPREF));

/* Table: PRODUCT, Owner: SYSDBA */
CREATE TABLE PRODUCT (PRODREF CHAR(6) NOT NULL,
        CATEGORY CHAR(3),
        DESCR VARCHAR(30),
        REORDER INTEGER,
        WARNING INTEGER,
        MERGELEVEL INTEGER,
        UNITWEIGHT SMALLINT,
        MEASUNIT CHAR(4),
        RCVUNIT CHAR(4),
        FIXEDWEIGHT CHAR(1),
        ONORDER DOUBLE PRECISION,
        INSTOCK DOUBLE PRECISION,
        LABELDESCR CHAR(10),
        PURCHCATEGORY CHAR(6),
        CTRLACCT CHAR(6) NOT NULL,
        EXTPRODREF CHAR(11),
PRIMARY KEY (PRODREF));

/* Table: PRODUCTMAKE, Owner: SYSDBA */
CREATE TABLE PRODUCTMAKE (PRODREF CHAR(6) NOT NULL,
        CATEGORY CHAR(3),
        FIXEDWEIGHT CHAR(1),
        PRINSTOCK FLOAT default 0
,
        DHEQTYRCVDINCDHO FLOAT default 0
,
        DPQTYRCVDINCDHO FLOAT default 0
,
        DPQTYISSUEDINCDHO FLOAT default 0
,
        DPQTYREMINCDHO FLOAT default 0
,
        DHEQTYRCVDEXDHO FLOAT default 0
,
        DPQTYRCVDEXDHO1 FLOAT default 0
,
        DPQTYISSUEDEXDHO FLOAT default 0
,
        DPQTYREMEXDHO FLOAT default 0
,
        DELBCBQTYRCVDEXDHO FLOAT default 0
,
        OPSTDELIN FLOAT default 0
,
        OPSTDELISSUE FLOAT default 0
,
        OPSTWIPRCPTEXWIP FLOAT default 0
,
        OPSTWIPRCPTWIP FLOAT default 0
,
        OPSTWIPISSUE FLOAT default 0
,
        OPENINGSTOCK FLOAT default 0
,
        DPQTYRCVDEXDHO2 FLOAT default 0
,
        DELISSUEQTYEXDHO FLOAT default 0
,
        DELISSUEQTYDHLTI FLOAT default 0
,
        DELISSUEQTYDHTBS FLOAT default 0
,
        DELISSUEQTYDHSAF FLOAT default 0
,
        DELISSUEQTYFTMORE FLOAT default 0
,
        DELISSUEQTYFUSE FLOAT default 0
,
        DELISSUEQTYRETPLA FLOAT default 0
,
        DELISSUEQTYSASOL FLOAT default 0
,
        DELISSUEQTYTWISTR FLOAT default 0
,
        DELISSUEQTYVB FLOAT default 0
,
        DELISSUEQTYWIP FLOAT default 0
,
        DELISSUEQTYSANS FLOAT default 0
,
        DELISSUEQTYWASTE FLOAT default 0
,
        DELISSUEQTYOTHER FLOAT default 0
,
        DPQTYRCVDDHLTI FLOAT default 0
,
        DPQTYRCVDDHTBS FLOAT default 0
,
        DPQTYRCVDDHSAF FLOAT default 0
,
        WIPRCPTEXWIP FLOAT default 0
,
        WIPISSUEFTMORE FLOAT default 0
,
        WIPISSUEFUSE FLOAT default 0
,
        WIPISSUERETPLA FLOAT default 0
,
        WIPISSUESASOL FLOAT default 0
,
        WIPISSUETWISTR FLOAT default 0
,
        WIPISSUEVB FLOAT default 0
,
        WIPISSUEWIP FLOAT default 0
,
        WIPISSUEDHLTI FLOAT default 0
,
        WIPISSUEDHTBS FLOAT default 0
,
        WIPISSUEDHSAF FLOAT default 0
,
        WIPISSUESANS FLOAT default 0
,
        WIPISSUEWASTE FLOAT default 0
,
        WIPISSUEOTHER FLOAT default 0
,
        WIPRCPTWIP FLOAT default 0
,
        TOTDELINEXDHO FLOAT default 0
,
        TOTISSUE FLOAT default 0
,
        TOTDELINDHO FLOAT default 0
,
        TOTWIPRCPTEXWIP FLOAT default 0
,
        TOTWIPISSUE FLOAT default 0
,
        TOTPURCHASESINPERIOD FLOAT default 0
,
        TOTISSUESINPERIOD FLOAT default 0
,
        CLOSINGSTOCKEXWIP FLOAT default 0
,
        TOTWIPRCPTWIP FLOAT default 0
,
        CLOSINGSTOCKINCWIP FLOAT default 0
,
        TOTACTUALUSAGE FLOAT default 0
,
        TOTUSAGE2 FLOAT default 0
,
        USAGEVALUE2 FLOAT default 0
,
        OPPRICE FLOAT default 0
,
        CLPRICE FLOAT default 0
,
        OPVALEXREDUNDANT FLOAT default 0
,
        CLVALEXREDUNDANT FLOAT default 0
,
        PURCHASEVALUE FLOAT default 0
,
        USAGEVALUE3 FLOAT default 0
,
        OPDELINFP FLOAT default 0
,
        OPDELINZP FLOAT default 0
,
        OPDELINRP FLOAT default 0
,
        OPWIPFP FLOAT default 0
,
        OPWIPZIP FLOAT default 0
,
        OPWIPRP FLOAT default 0
,
        CLDELINFP FLOAT default 0
,
        CLDELINZP FLOAT default 0
,
        CLDELINRP FLOAT default 0
,
        CLWIPFP FLOAT default 0
,
        CLWIPZIP FLOAT default 0
,
        CLWIPRP FLOAT default 0
,
        OPFP FLOAT default 0
,
        OPFPPRICE FLOAT default 0
,
        OPFPVALUE FLOAT default 0
,
        OPZP FLOAT default 0
,
        OPZPPRICE FLOAT default 0
,
        OPZPVALUE FLOAT default 0
,
        OPRP FLOAT default 0
,
        OPRPPRICE FLOAT default 0
,
        OPRPVALUE FLOAT default 0
,
        OPVALUE FLOAT default 0
,
        CLFP FLOAT default 0
,
        CLFPPRICE FLOAT default 0
,
        CLFPVALUE FLOAT default 0
,
        CLZP FLOAT default 0
,
        CLZPPRICE FLOAT default 0
,
        CLZPVALUE FLOAT default 0
,
        CLRP FLOAT default 0
,
        CLRPPRICE FLOAT default 0
,
        CLRPVALUE FLOAT default 0
,
        CLVALUE FLOAT default 0
,
CONSTRAINT PPRODUCTMAKE PRIMARY KEY (PRODREF));

/* Table: RMTXNDETCATEGORY, Owner: SYSDBA */
CREATE TABLE RMTXNDETCATEGORY (RMTXNDETCATEGORY CHAR(6) NOT NULL,
        DESCRIPTION CHAR(60),
CONSTRAINT PTXNDETCATEGORY PRIMARY KEY (RMTXNDETCATEGORY));

/* Table: STDCOSTPRICES, Owner: SYSDBA */
CREATE TABLE STDCOSTPRICES (EXTPRODREF CHAR(11) NOT NULL,
        FROMDATE DATE NOT NULL,
        TODATE DATE NOT NULL,
        STDPRICE DOUBLE PRECISION,
CONSTRAINT PSTDCOSTPRICES PRIMARY KEY (EXTPRODREF, FROMDATE));

/* Table: STDQLTYVALUES, Owner: SYSDBA */
CREATE TABLE STDQLTYVALUES (PRODTYPE CHAR(3) NOT NULL,
        QLTY CHAR(1) NOT NULL,
        VALUERATING DOUBLE PRECISION,
        DESCR CHAR(30),
CONSTRAINT PSTDQLTYVALUES PRIMARY KEY (PRODTYPE, QLTY));

/* Table: STOREPRICE, Owner: SYSDBA */
CREATE TABLE STOREPRICE (PRODREF CHAR(6) NOT NULL,
        FROMDATE DATE NOT NULL,
        TODATE DATE NOT NULL,
        STDPRICE DOUBLE PRECISION,
CONSTRAINT PSTOREPRICE PRIMARY KEY (PRODREF, FROMDATE, TODATE));

/* Table: SUPPLIER, Owner: SYSDBA */
CREATE TABLE SUPPLIER (SUPREF CHAR(6) NOT NULL,
        SUPDESCR VARCHAR(20),
        SUPACCNO VARCHAR(15),
        VATNO VARCHAR(15),
        STREETADD1 VARCHAR(20),
        STREETADD2 VARCHAR(20),
        STREETADD3 VARCHAR(20),
        STREETADD4 VARCHAR(20),
        STREETADD5 VARCHAR(20),
        POSTALADD1 VARCHAR(20),
        POSTALADD2 VARCHAR(20),
        POSTALADD3 VARCHAR(20),
        POSTALADD4 VARCHAR(20),
        POSTALADD5 VARCHAR(20),
        PHONE VARCHAR(20),
        FAX VARCHAR(20),
        TELEX VARCHAR(20),
        CONTACT VARCHAR(20),
        TERMS CHAR(10),
        EARLYDISC NUMERIC(9, 4),
        CURRENCY CHAR(3),
        AGENTREF CHAR(6),
        NARRATIVE VARCHAR(100),
        EMAIL VARCHAR(40),
        CELLPHONE VARCHAR(20),
        SCTYPE CHAR(2),
        DEPTLINK CHAR(6),
        DFCTRLACCT CHAR(6),
        VT1WIP CHAR(1) default 'N'
,
PRIMARY KEY (SUPREF));

/* Table: TERMS, Owner: SYSDBA */
CREATE TABLE TERMS (TERMS CHAR(10) NOT NULL,
        DESCR VARCHAR(40),
PRIMARY KEY (TERMS));

/* Table: TRANSFERDET, Owner: SYSDBA */
CREATE TABLE TRANSFERDET (TRANSFERNO INTEGER NOT NULL,
        DELNO INTEGER NOT NULL,
        PALLETNO SMALLINT NOT NULL,
        BCBNO SMALLINT NOT NULL,
        DATETRANSFERED DATE NOT NULL,
        INITIALS CHAR(4) NOT NULL,
        QTYTRANSFERED DOUBLE PRECISION NOT NULL,
        TRANSFEREDTO CHAR(6) NOT NULL,
        BCBTRANSFERED DOUBLE PRECISION,
        PRODREF CHAR(6),
        BATREF INTEGER default 0
,
        WIPRCPTREFNO INTEGER default 0
,
CONSTRAINT PTRANSFERDET PRIMARY KEY (TRANSFERNO));

/* Table: TXNDET, Owner: SYSDBA */
CREATE TABLE TXNDET (REF INTEGER NOT NULL,
        TXNNO INTEGER,
        TXNCODE CHAR(6),
        PRODTYPE CHAR(3),
        EXTPRODREF CHAR(11),
        QLTY CHAR(1),
        QTY DOUBLE PRECISION,
        TXNDATE DATE,
        ORIGTXNCODE INTEGER,
        DATEENT DATE,
        USERENT CHAR(8),
CONSTRAINT PTXNDET PRIMARY KEY (REF));

/* Table: TXNDETSUMMARISE, Owner: SYSDBA */
CREATE TABLE TXNDETSUMMARISE (TXNCODE CHAR(6) NOT NULL,
        PRODTYPE CHAR(3) NOT NULL,
        EXTPRODREF CHAR(11) NOT NULL,
        QLTY CHAR(1) NOT NULL,
        QTY DOUBLE PRECISION,
CONSTRAINT PTXNDETSUMMARISE PRIMARY KEY (PRODTYPE, TXNCODE, EXTPRODREF, QLTY));

/* Table: TXNDETSUMMARY, Owner: SYSDBA */
CREATE TABLE TXNDETSUMMARY (EXTPRODREF CHAR(11) NOT NULL,
        CATEGORY CHAR(6),
CONSTRAINT PTXNDETSUMMARY PRIMARY KEY (EXTPRODREF));

/* Table: UNIT, Owner: SYSDBA */
CREATE TABLE UNIT (UNITREF CHAR(4) NOT NULL,
        DESCR VARCHAR(40),
PRIMARY KEY (UNITREF));

/* Table: VTPERIOD, Owner: SYSDBA */
CREATE TABLE VTPERIOD (YEARNO SMALLINT NOT NULL,
        PERIODNO SMALLINT NOT NULL,
        FROMDATE DATE NOT NULL,
        TODATE DATE NOT NULL,
CONSTRAINT PVTPERIOD PRIMARY KEY (FROMDATE));

/* Table: WIPRCPT, Owner: SYSDBA */
CREATE TABLE WIPRCPT (REFNO INTEGER NOT NULL,
        PRODREF CHAR(6) NOT NULL,
        RCPTDATE DATE NOT NULL,
        RCPTINITIALS CHAR(4) NOT NULL,
        NETWEIGHT DOUBLE PRECISION NOT NULL,
        LOTNO1 SMALLINT,
        LOTNO2 SMALLINT,
        SHIFT CHAR(1) NOT NULL,
        DATEMANU DATE NOT NULL,
        DATEISSUED DATE,
        ISSUEINITIALS CHAR(4),
        ISSUETO CHAR(6),
        VALUERATING DOUBLE PRECISION NOT NULL,
        VALUERATINGDATE DATE NOT NULL,
        STOCKAREA INTEGER default 0
,
        BATREF INTEGER default 0
,
        DATEENT DATE,
        USERENT CHAR(4),
        DATEMOD DATE,
        USERMOD CHAR(4),
        FACTORYNO INTEGER default 1
,
        QLTY CHAR(1),
CONSTRAINT PWIPRCPT PRIMARY KEY (REFNO));

/* Table: WIPRCPTTRACK, Owner: SYSDBA */
CREATE TABLE WIPRCPTTRACK (TRACKINGREF INTEGER NOT NULL,
        WIPRCPTREFNO INTEGER NOT NULL,
        PRODREF CHAR(6) NOT NULL,
        RCPTDATE DATE NOT NULL,
        RCPTINITIALS CHAR(4) NOT NULL,
        NETWEIGHT DOUBLE PRECISION NOT NULL,
        LOTNO1 SMALLINT,
        LOTNO2 SMALLINT,
        SHIFT CHAR(1) NOT NULL,
        DATEMANU DATE NOT NULL,
        VALUERATING DOUBLE PRECISION NOT NULL,
        VALUERATINGDATE DATE NOT NULL,
        DATEMOD DATE,
        USERMOD CHAR(8),
        QLTY CHAR(1),
CONSTRAINT PWIPRCPTTRACK PRIMARY KEY (TRACKINGREF));

/* Table: YARNCOL, Owner: SYSDBA */
CREATE TABLE YARNCOL (YNCOL CHAR(3) NOT NULL,
        DESCR CHAR(30),
CONSTRAINT PYARNCOL PRIMARY KEY (YNCOL));

/* Table: YARNKIND, Owner: SYSDBA */
CREATE TABLE YARNKIND (REF CHAR(1) NOT NULL,
        DESCR CHAR(30),
CONSTRAINT PYARNKIND PRIMARY KEY (REF));

/* Table: YARNLOTNO, Owner: SYSDBA */
CREATE TABLE YARNLOTNO (LOTNO1 INTEGER NOT NULL,
        LOTNO2 SMALLINT NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        DATEMANU DATE NOT NULL,
        DATERCVD DATE NOT NULL,
        RCVDBY CHAR(4) NOT NULL,
        DESCR CHAR(60),
        YNSTRU CHAR(4) NOT NULL,
        YNTWIST CHAR(2) NOT NULL,
        RUNKGS DOUBLE PRECISION default 0
 NOT NULL,
CONSTRAINT PYARNLOTNO PRIMARY KEY (LOTNO1, LOTNO2, YNCOL),
CONSTRAINT UYARNLOTNO UNIQUE (LOTNO1, LOTNO2));

/* Table: YARNRCPT, Owner: SYSDBA */
CREATE TABLE YARNRCPT (BOXNO INTEGER NOT NULL,
        LOTNO1 SMALLINT NOT NULL,
        LOTNO2 SMALLINT NOT NULL,
        YNSTRU CHAR(4) NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        YNTARE FLOAT NOT NULL,
        YNNET DOUBLE PRECISION NOT NULL,
        DATERCVD DATE NOT NULL,
        INITIALS CHAR(4) NOT NULL,
        YNQLTY CHAR(1),
        DESPNO INTEGER,
        SHIFT CHAR(1),
        DATEMANU DATE,
        YNTWIST CHAR(2) NOT NULL,
        RETURNED CHAR(1),
        PALLETNO INTEGER,
        BPC SMALLINT,
        VALUERATING DOUBLE PRECISION NOT NULL,
        VALUERATINGDATE DATE NOT NULL,
        STOCKAREA INTEGER default 0
,
        WARPNO INTEGER default 0
,
        CUSTREF CHAR(6) NOT NULL,
        BATREF INTEGER default 0
,
        DATEENT DATE,
        USERENT CHAR(4),
        DATEMOD DATE,
        USERMOD CHAR(4),
CONSTRAINT PYARNRCPT PRIMARY KEY (BOXNO));

/* Table: YARNRCPTTRACK, Owner: SYSDBA */
CREATE TABLE YARNRCPTTRACK (TRACKINGREF INTEGER NOT NULL,
        BOXNO INTEGER NOT NULL,
        LOTNO1 SMALLINT NOT NULL,
        LOTNO2 SMALLINT NOT NULL,
        YNSTRU CHAR(4) NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        YNTARE FLOAT NOT NULL,
        YNNET DOUBLE PRECISION NOT NULL,
        DATERCVD DATE NOT NULL,
        INITIALS CHAR(4) NOT NULL,
        YNQLTY CHAR(1),
        SHIFT CHAR(1),
        DATEMANU DATE,
        YNTWIST CHAR(2) NOT NULL,
        RETURNED CHAR(1),
        BPC SMALLINT,
        VALUERATING DOUBLE PRECISION NOT NULL,
        VALUERATINGDATE DATE NOT NULL,
        WARPNO INTEGER default 0
,
        DATEMOD DATE,
        USERMOD CHAR(8),
CONSTRAINT PYARNRCPTTRACK PRIMARY KEY (TRACKINGREF));

/* Table: YARNSTRU, Owner: SYSDBA */
CREATE TABLE YARNSTRU (YNSTRU CHAR(4) NOT NULL,
        DESCR CHAR(30),
        LABELDESCR CHAR(8),
        YNTWIST CHAR(2) NOT NULL,
        PRODHRSPDL DOUBLE PRECISION,
        PRODGROUP CHAR(1),
        DEPTGROUP CHAR(6),
        YNSTRUGRP CHAR(4),
        WARPTOTWISTED DOUBLE PRECISION default 1
,
        TWISTEDTOWOUND DOUBLE PRECISION default 1
,
        WOUNDTOYARN DOUBLE PRECISION default 1
,
        RESULTYARNTEX INTEGER default 1
,
CONSTRAINT PYARNSTRU PRIMARY KEY (YNSTRU, YNTWIST));

/* Table: YARNTYPE, Owner: SYSDBA */
CREATE TABLE YARNTYPE (YNSTRU CHAR(4) NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        INSTOCK DOUBLE PRECISION,
        YNTWIST CHAR(2) NOT NULL,
        YNTYPE CHAR(9),
CONSTRAINT PYARNTYPE PRIMARY KEY (YNSTRU, YNTWIST, YNCOL));

/* Table: YNCOLWBS, Owner: SYSDBA */
CREATE TABLE YNCOLWBS (YNCOL CHAR(3) NOT NULL,
        FIBRE CHAR(4) NOT NULL,
        NUMENDS SMALLINT default 0
 NOT NULL,
CONSTRAINT PYNCOLWBS PRIMARY KEY (YNCOL, FIBRE));

/* Table: YNCOLWBSLOTNO, Owner: SYSDBA */
CREATE TABLE YNCOLWBSLOTNO (LOTNO1 INTEGER NOT NULL,
        LOTNO2 SMALLINT NOT NULL,
        YNCOL CHAR(3) NOT NULL,
        FIBRE CHAR(4) NOT NULL,
        RUNNO CHAR(12),
        DESCR CHAR(30),
        RUNKGS DOUBLE PRECISION default 0
 NOT NULL,
        NUMENDS SMALLINT default 0
,
CONSTRAINT PYNCOLWBSLOTNO PRIMARY KEY (LOTNO1, LOTNO2, YNCOL, FIBRE));

/* Table: YNDESPHDR, Owner: SYSDBA */
CREATE TABLE YNDESPHDR (DESPNO INTEGER NOT NULL,
        CUSTREF CHAR(6),
        DESPDATE DATE,
        DESPBY CHAR(4),
        BOXES SMALLINT,
        QTYDESP DOUBLE PRECISION,
        TRANSBY CHAR(6),
        WAYBILLNO VARCHAR(25),
        SEALS VARCHAR(25),
        CONTREF VARCHAR(25),
        VTCONTREF VARCHAR(25),
        EXPORTER CHAR(6) NOT NULL,
        CUSTORDNO VARCHAR(20),
        DESPSENT CHAR(1),
        PALLETS SMALLINT,
        BATREF INTEGER,
        DATEENT DATE,
        USERENT CHAR(4),
        DATEMOD DATE,
        USERMOD CHAR(4),
CONSTRAINT PYNDESPHDR PRIMARY KEY (DESPNO));

/* Table: YNEFFGROUP, Owner: SYSDBA */
CREATE TABLE YNEFFGROUP (PRODGROUP CHAR(1) NOT NULL,
        TOTALSPINDLES INTEGER,
        HRSPERWEEK DOUBLE PRECISION,
        GROUPDESCR CHAR(20),
CONSTRAINT PYNEFFGROUP PRIMARY KEY (PRODGROUP));

/* Table: YNPRICE, Owner: SYSDBA */
CREATE TABLE YNPRICE (YNSTRU CHAR(4) NOT NULL,
        YNTWIST CHAR(2) NOT NULL,
        YNQLTY CHAR(1) NOT NULL,
        FROMDATE DATE NOT NULL,
        TODATE DATE NOT NULL,
        WIPPRICE DOUBLE PRECISION,
CONSTRAINT PYNPRICE PRIMARY KEY (YNSTRU, YNTWIST, YNQLTY, FROMDATE, TODATE));

/* Table: YNSTRUWBSRM, Owner: SYSDBA */
CREATE TABLE YNSTRUWBSRM (YNSTRU CHAR(4) NOT NULL,
        YNTWIST CHAR(2) NOT NULL,
        CTRLACCT CHAR(6) NOT NULL,
        RMPERKG DOUBLE PRECISION NOT NULL,
CONSTRAINT PYNSTRUWBSRM PRIMARY KEY (YNSTRU, YNTWIST, CTRLACCT));

/* Table: YNTWIST, Owner: SYSDBA */
CREATE TABLE YNTWIST (TWISTREF CHAR(2) NOT NULL,
        DESCR CHAR(20),
CONSTRAINT PYNTWIST PRIMARY KEY (TWISTREF));

/*  Index definitions for all user tables */
CREATE UNIQUE INDEX UAPORDDETVPE ON APORDDET(VTORDNO, PRODREF, EXPDELDATE);
CREATE INDEX INITIALS_NAME ON INITIALS(SURNAME, FIRSTNAME);
CREATE UNIQUE INDEX IPM_CATPROD ON PRODUCTMAKE(CATEGORY, PRODREF);
CREATE INDEX ITD_PRODTYPETXNDATE ON TXNDET(PRODTYPE, TXNDATE);
CREATE INDEX ITXNDET_EXTPRODREFTXNDATE ON TXNDET(EXTPRODREF, TXNDATE);
CREATE INDEX ITXNDET_ORIGTXNCODE ON TXNDET(ORIGTXNCODE);
CREATE INDEX ITXNDET_TXNNO ON TXNDET(TXNNO);
CREATE INDEX IYR_DESPPALLET ON YARNRCPT(DESPNO, PALLETNO);
CREATE INDEX IYR_PALLETNO ON YARNRCPT(PALLETNO);
CREATE UNIQUE INDEX IYNSTRUWBSRM_STC ON YNSTRUWBSRM(YNSTRU, YNTWIST, CTRLACCT);
ALTER TABLE PARAM ADD FOREIGN KEY (CENTRALCURRENCY) REFERENCES CURRENCY(CURREF);
ALTER TABLE SUPPLIER ADD CONSTRAINT SUPPLIER_TERMS FOREIGN KEY (TERMS) REFERENCES TERMS(TERMS);
ALTER TABLE SUPPLIER ADD CONSTRAINT SUPPLIER_CURRENCY FOREIGN KEY (CURRENCY) REFERENCES CURRENCY(CURREF);
ALTER TABLE SUPPLIER ADD CONSTRAINT SUPPLIER_AGENT FOREIGN KEY (AGENTREF) REFERENCES AGENT(AGENTREF);
ALTER TABLE PRODSUP ADD CONSTRAINT PROD_REF FOREIGN KEY (PRODREF) REFERENCES PRODUCT(PRODREF);
ALTER TABLE PRODUCT ADD CONSTRAINT CATEGORY_CO FOREIGN KEY (CATEGORY) REFERENCES PRODCAT(CATEGORY);
ALTER TABLE PRODSUP ADD CONSTRAINT SUP_REF FOREIGN KEY (SUPREF) REFERENCES SUPPLIER(SUPREF);
ALTER TABLE APORDHDR ADD FOREIGN KEY (SUPREF) REFERENCES SUPPLIER(SUPREF);
ALTER TABLE APORDHDR ADD FOREIGN KEY (ORDEREDBY) REFERENCES INITIALS(INITIALS);
ALTER TABLE APORDHDR ADD FOREIGN KEY (AUTHBY) REFERENCES INITIALS(INITIALS);
ALTER TABLE DELHEAD ADD FOREIGN KEY (AGENT) REFERENCES AGENT(AGENTREF);
ALTER TABLE DELHEAD ADD FOREIGN KEY (SUPREF) REFERENCES SUPPLIER(SUPREF);
ALTER TABLE DELHEAD ADD FOREIGN KEY (RCVDBY) REFERENCES INITIALS(INITIALS);
ALTER TABLE DELBCB ADD FOREIGN KEY (DELNO, PALLETNO) REFERENCES DELPALLET(DELNO, PALLETNO);
ALTER TABLE PRODUCT ADD FOREIGN KEY (MEASUNIT) REFERENCES UNIT(UNITREF);
ALTER TABLE PRODUCT ADD FOREIGN KEY (RCVUNIT) REFERENCES UNIT(UNITREF);
ALTER TABLE DELHEAD ADD CONSTRAINT FDHAPORDDET FOREIGN KEY (VTORDNO, PRODREF, EXPDELDATE) REFERENCES APORDDET(VTORDNO, PRODREF, EXPDELDATE);
ALTER TABLE YARNTYPE ADD CONSTRAINT FYTYARNSTRU FOREIGN KEY (YNSTRU, YNTWIST) REFERENCES YARNSTRU(YNSTRU, YNTWIST);
ALTER TABLE APORDDET ADD FOREIGN KEY (PRODREF) REFERENCES PRODUCT(PRODREF);
ALTER TABLE YARNTYPE ADD CONSTRAINT FYARNCOL FOREIGN KEY (YNCOL) REFERENCES YARNCOL(YNCOL);
ALTER TABLE YARNRCPT ADD CONSTRAINT FINITIALS FOREIGN KEY (INITIALS) REFERENCES INITIALS(INITIALS);
ALTER TABLE YARNRCPT ADD CONSTRAINT YRYARNLOTNO FOREIGN KEY (LOTNO1, LOTNO2, YNCOL) REFERENCES YARNLOTNO(LOTNO1, LOTNO2, YNCOL);
ALTER TABLE YNDESPHDR ADD CONSTRAINT FDHAGENTREF FOREIGN KEY (TRANSBY) REFERENCES AGENT(AGENTREF);
ALTER TABLE YNDESPHDR ADD CONSTRAINT FDHINITIALS FOREIGN KEY (DESPBY) REFERENCES INITIALS(INITIALS);
ALTER TABLE YNDESPHDR ADD CONSTRAINT FDHCUSTREF FOREIGN KEY (CUSTREF) REFERENCES SUPPLIER(SUPREF);
ALTER TABLE YARNSTRU ADD CONSTRAINT FYSYNTWIST FOREIGN KEY (YNTWIST) REFERENCES YNTWIST(TWISTREF);
ALTER TABLE YARNRCPT ADD CONSTRAINT FYRYARNTYPE FOREIGN KEY (YNSTRU, YNTWIST, YNCOL) REFERENCES YARNTYPE(YNSTRU, YNTWIST, YNCOL);
ALTER TABLE DELHEAD ADD CONSTRAINT FDHPRODREF FOREIGN KEY (PRODREF) REFERENCES PRODUCT(PRODREF);
ALTER TABLE WIPRCPT ADD CONSTRAINT FPRPRODREF FOREIGN KEY (PRODREF) REFERENCES PRODUCT(PRODREF);
ALTER TABLE YNSTRUWBSRM ADD CONSTRAINT FYSWYARNSTRU FOREIGN KEY (YNSTRU, YNTWIST) REFERENCES YARNSTRU(YNSTRU, YNTWIST);
ALTER TABLE YARNLOTNO ADD CONSTRAINT FYLNYARNCOL FOREIGN KEY (YNCOL) REFERENCES YARNCOL(YNCOL);
ALTER TABLE YARNLOTNO ADD CONSTRAINT FYLNINITIALS FOREIGN KEY (RCVDBY) REFERENCES INITIALS(INITIALS);
ALTER TABLE STOREPRICE ADD CONSTRAINT FSPPRODREF FOREIGN KEY (PRODREF) REFERENCES PRODUCT(PRODREF);
ALTER TABLE PRODUCTMAKE ADD CONSTRAINT FPMPRODUCT FOREIGN KEY (PRODREF) REFERENCES PRODUCT(PRODREF);
ALTER TABLE YNPRICE ADD CONSTRAINT FYPYNSTRU FOREIGN KEY (YNSTRU, YNTWIST) REFERENCES YARNSTRU(YNSTRU, YNTWIST);
ALTER TABLE PRODUCT ADD CONSTRAINT FPCTRLACCT FOREIGN KEY (CTRLACCT) REFERENCES CTRLACCT(ACCNAME);
ALTER TABLE YNSTRUWBSRM ADD CONSTRAINT FYSWPRODREF FOREIGN KEY (CTRLACCT) REFERENCES CTRLACCT(ACCNAME);
ALTER TABLE YARNRCPT ADD CONSTRAINT FYRCUSTREF FOREIGN KEY (CUSTREF) REFERENCES SUPPLIER(SUPREF);
ALTER TABLE YNCOLWBS ADD CONSTRAINT FYNCOLWBSYNCOL FOREIGN KEY (YNCOL) REFERENCES YARNCOL(YNCOL);
ALTER TABLE YNCOLWBSLOTNO ADD CONSTRAINT FYNCOLWBSLOTNOL FOREIGN KEY (YNCOL, FIBRE) REFERENCES YNCOLWBS(YNCOL, FIBRE);
ALTER TABLE YNCOLWBSLOTNO ADD CONSTRAINT FYNCOLWBSLOTNOY FOREIGN KEY (LOTNO1, LOTNO2, YNCOL) REFERENCES YARNLOTNO(LOTNO1, LOTNO2, YNCOL);

CREATE GENERATOR GEN_ISSUENO;
CREATE GENERATOR GENBATCHREF;
CREATE GENERATOR GENISSUENO;
CREATE GENERATOR GENDELINNO;
CREATE GENERATOR GENYNBOXNO;
CREATE GENERATOR GENPALLETNO;
CREATE GENERATOR GENDESPNO;
CREATE GENERATOR GENWIPRCPTNO;
CREATE GENERATOR SPTRANSFERNO;
CREATE GENERATOR GENTRANSFERNO;
CREATE GENERATOR GENYARNRCPTTRACKINGREF;
CREATE GENERATOR GENWIPRCPTTRACKINGREF;
CREATE GENERATOR GENDELHEADTRACKINGREF;
CREATE GENERATOR GENTXNDETREF;
CREATE GENERATOR GENTXNDETTXNREF;

ALTER TABLE CURRENCY ADD 
        CONSTRAINT CHECK_MD check (multdiv in ('D','M'))
;

/*  Exceptions */
CREATE EXCEPTION CANNOT_DELETE_ORDER_HDR "Cannot delete order header as deliveries exist.";
CREATE EXCEPTION CANNOT_DELETE_ORDER_DET "Cannot delete order details as deliveries exist.";
CREATE EXCEPTION EYNDESPHDRINSERTTXNDETTRIGGER "VT: Error in YnDespHdr Insert Trigger";
CREATE EXCEPTION EDELHEADUPDATETXNDET "VT: Error in DelHead Update Trigger";
CREATE EXCEPTION EISSUEDETINSERTTXNDET "VT: Error in IssueDet Insert Trigger";
CREATE EXCEPTION EWIPRCPTINSERTTXNDET "VT: Error in WIPRcpt Insert Trigger";
CREATE EXCEPTION EWIPRCPTUPDATETXNDET "VT: Error in WIPRcpt Update Trigger";
CREATE EXCEPTION EYARNRCPTINSERTTXNDET "VT: Error in YarnRcpt Insert Trigger";
CREATE EXCEPTION EYARNRCPTUPDATETXNDET "VT: Error in YarnRcpt Update Trigger";
CREATE EXCEPTION EWIPISSUEINSERTTXNDET "VT: Error in WIPIssue Insert Trigger";
CREATE EXCEPTION EDELHEADINSERTTXNDET "VT: Error in DelHead Insert Trigger";
CREATE EXCEPTION EYNDESPHDRUPDATETXNDETTRIGGER "VT: Error in YnDespHdr Update Trigger";
CREATE EXCEPTION EYNDESPHDRINSERTCANNOTCOMPLETE "VT: Cannot Complete a Yarn Despatch on Insert";
COMMIT WORK;
SET AUTODDL OFF;
SET TERM ^ ;

/* Stored procedures */
CREATE PROCEDURE SPBATCHREF AS BEGIN EXIT; END ^
CREATE PROCEDURE SPISSUENO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPDELINNO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPYNBOXNO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPPALLETNO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPDESPNO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPWIPRCPTNO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPTRANSFERNO AS BEGIN EXIT; END ^
CREATE PROCEDURE SPGENTXNDETREF AS BEGIN EXIT; END ^
CREATE PROCEDURE SPGENTXNDETTXNREF AS BEGIN EXIT; END ^
CREATE PROCEDURE SPEXTRACTTXNDETSUMMARY AS BEGIN EXIT; END ^
CREATE PROCEDURE SPSUMMARISETXNDET AS BEGIN EXIT; END ^

ALTER PROCEDURE SPBATCHREF RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genBatchRef,1);
end
 ^

ALTER PROCEDURE SPISSUENO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genIssueNo,1);
end
 ^

ALTER PROCEDURE SPDELINNO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genDelInNo,1);
end
 ^

ALTER PROCEDURE SPYNBOXNO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genYnBoxNo,1);
end
 ^

ALTER PROCEDURE SPPALLETNO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genPalletNo,1);
end
 ^

ALTER PROCEDURE SPDESPNO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genDespNo,1);
end
 ^

ALTER PROCEDURE SPWIPRCPTNO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genWIPRcptNo,1);
end
 ^

ALTER PROCEDURE SPTRANSFERNO RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genTransferNo,1);
end
 ^

ALTER PROCEDURE SPGENTXNDETREF RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genTxnDetRef,1);
end
 ^

ALTER PROCEDURE SPGENTXNDETTXNREF RETURNS (CODE INTEGER)
AS 

begin
  code=gen_id(genTxnDetTxnRef,1);
end
 ^

ALTER PROCEDURE SPEXTRACTTXNDETSUMMARY (PRODTYPE CHAR(3),
YEARNO INTEGER,
PERIODNO INTEGER)
RETURNS (RECORDSFOUND INTEGER,
FROMDATE DATE,
TODATE DATE,
QTYTOTAL INTEGER)
AS 
 
begin
  delete from txndetsummarise;
  select vp.fromdate,vp.todate
    from vtperiod vp
  where (vp.yearno=:yearno)
  and (vp.periodno=:periodno)
  into :fromdate,:todate;
  select count(*),sum(td.qty)
  from txndet td
  where (td.prodtype=:prodtype)
  and (td.txndate>=:fromdate)
  and (td.txndate<=:todate)
  into :recordsfound,:qtytotal;
 /* should be able to get recordsfound as a result*/
  /* of the insert below */
  insert into txndetsummarise (txncode,prodtype,extprodref,qlty,qty)
  select td.txncode,td.prodtype,td.extprodref,td.qlty,sum(td.qty)
  from txndet td
  where (td.prodtype=:prodtype)
  and (td.txndate>=:fromdate)
  and (td.txndate<=:todate)
  group by td.prodtype,td.txncode,td.extprodref,td.qlty;
end
 ^

ALTER PROCEDURE SPSUMMARISETXNDET (PRODTYPEPARAM CHAR(3),
FROMDATE DATE,
TODATE DATE)
AS 
 
  declare variable txncode char(6);
  declare variable prodtype char(3);
  declare variable extprodref char(11);
  declare variable qlty char(1);
  declare variable qty double precision;
  declare variable refno integer; /*get the ref nos here as reqd*/
  declare variable txnno integer; /*one txn no for the whole txn*/
begin
  txnno=gen_id(genTxnDetTxnRef,1);
  delete from txndet td
  where (td.prodtype=:prodtypeparam)
  and (td.txndate>=:fromdate)
  and (td.txndate<=:todate);
  for select ts.txncode,ts.prodtype,ts.extprodref,ts.qlty,ts.qty
      from txndetsummarise ts
      into :txncode,:prodtype,:extprodref,:qlty,:qty
  do
  begin
    refno=gen_id(genTxnDetRef,1);
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent) values
      (:refno,:txnno,:txncode,:prodtype,:extprodref,:qlty,:qty,
      :todate,0,"now",USER);
  end
  /*set statistics index ITD_PRODTYPETXNDATE;
  set statistics index ITXNDET_EXTPRODREFTXNDATE;
  set statistics index ITXNDET_ORIGTXNCODE;
  set statistics index ITXNDET_TXNNO;*/
end
 ^
SET TERM ; ^
COMMIT WORK ;
SET AUTODDL ON;
SET TERM ^ ;

/* Triggers only will work for SQL triggers */
CREATE TRIGGER PROD_ORD_INS FOR APORDDET                        
ACTIVE AFTER INSERT POSITION 0 
as
begin
  update product
     set product.onorder=product.onorder+new.qty
   where product.prodref=new.prodref;
end
 ^
CREATE TRIGGER PROD_ORD_UPD FOR APORDDET                        
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  if (new.ordlinecomplete='Y') then
  begin
    update product
       set product.onorder=product.onorder+new.qtyrcvd+
             (old.qty*-1)
     where product.prodref=new.prodref;
  end
  else
  begin
    update product
       set product.onorder=product.onorder+(old.qty*-1)
     where product.prodref=old.prodref;
    update product
       set product.onorder=product.onorder+new.qty
     where product.prodref=new.prodref;
  end
end
 ^
CREATE TRIGGER PROD_ORD_DELETE_HDR FOR APORDHDR                        
ACTIVE BEFORE DELETE POSITION 0 
as
begin
  delete from aporddet
  where aporddet.vtordno=old.vtordno;
end
 ^
CREATE TRIGGER PROD_ORD_DELETE_DET FOR APORDDET                        
ACTIVE BEFORE DELETE POSITION 0 
as
declare variable record_count integer;
begin
  select count(delhead.vtordno)
    from delhead
   where delhead.vtordno=old.vtordno
     and delhead.prodref=old.prodref
     and delhead.expdeldate=old.expdeldate
    into :record_count;
  if (record_count<>0) then
  begin
    exception cannot_delete_order_det;
  end
end
 ^
CREATE TRIGGER PROD_DELHEAD_INS FOR DELHEAD                         
ACTIVE AFTER INSERT POSITION 5 
as begin
update aporddet
   set aporddet.qtyrcvd=aporddet.qtyrcvd+new.qtyrcvd
 where aporddet.vtordno=new.vtordno
   and aporddet.expdeldate=new.expdeldate
   and aporddet.prodref=new.prodref;
update product
   set product.instock=product.instock+new.qtyrcvd,
       product.onorder=product.onorder+(new.qtyrcvd*-1)
 where product.prodref=new.prodref;
end
 ^
CREATE TRIGGER YRYARNTYPE_INS FOR YARNRCPT                        
ACTIVE AFTER INSERT POSITION 5 
as
begin
  update yarntype
     set yarntype.instock=yarntype.instock+new.ynnet
   where yarntype.ynstru=new.ynstru
     and yarntype.yntwist=new.yntwist
     and yarntype.yncol=new.yncol;
end
 ^
CREATE TRIGGER YRYARNTYPE_UPD FOR YARNRCPT                        
ACTIVE AFTER UPDATE POSITION 5 
as
begin
  update yarntype
     set yarntype.instock=yarntype.instock+(old.ynnet*-1)
   where yarntype.ynstru=old.ynstru
     and yarntype.yntwist=old.yntwist
     and yarntype.yncol=old.yncol;
  update yarntype
     set yarntype.instock=yarntype.instock+new.ynnet
   where yarntype.ynstru=new.ynstru
     and yarntype.yntwist=new.yntwist
     and yarntype.yncol=new.yncol;
end
 ^
CREATE TRIGGER PROD_DELHEAD_UPD FOR DELHEAD                         
ACTIVE AFTER UPDATE POSITION 5 
as begin
update aporddet
   set aporddet.qtyrcvd=aporddet.qtyrcvd+new.qtyrcvd+(old.qtyrcvd*-1)
 where aporddet.vtordno=new.vtordno
   and aporddet.expdeldate=new.expdeldate
   and aporddet.prodref=new.prodref;
update product
   set product.instock=product.instock+(old.qtyrcvd*-1)+new.qtyrcvd,
       product.onorder=product.onorder+old.qtyrcvd+(new.qtyrcvd*-1)
 where product.prodref=new.prodref;
end
 ^
CREATE TRIGGER YARNRCPT_TRACKUPDATE FOR YARNRCPT                        
ACTIVE AFTER UPDATE POSITION 10 
as
  declare variable trackingref1 integer;
  declare variable trackingref2 integer;
begin
  /*only run if palletno and despno<>0*/
  if ((new.palletno=0) and (new.despno=0)) then
  begin
    if ((old.boxno<>new.boxno) or (old.lotno1<>new.lotno1)
      or (old.lotno2<>new.lotno2)
      or (old.ynstru<>new.ynstru) or (old.yncol<>new.yncol)
      or (old.yntare<>new.yntare) or (old.ynnet<>new.ynnet)
      or (old.datercvd<>new.datercvd) or (old.initials<>new.initials)
      or (old.ynqlty<>new.ynqlty) or (old.shift<>new.shift)
      or (old.datemanu<>new.datemanu) or (old.yntwist<>new.yntwist)
      or (old.returned<>new.returned) or (old.bpc<>new.bpc)
      or (old.valuerating<>new.valuerating)
      or (old.valueratingdate<>new.valueratingdate)
      or (old.warpno<>new.warpno)) then
    begin
      /*first fetch the next two trackingref's*/ 
      trackingref1=gen_id(genYarnRcptTrackingRef,1);
      trackingref2=gen_id(genYarnRcptTrackingRef,1);
      /* by the time we get here all checks are done*/
      insert into yarnrcpttrack
        (trackingref,boxno,lotno1,lotno2,ynstru,yncol,
         yntare,ynnet,datercvd,initials,ynqlty,shift,
         datemanu,yntwist,returned,bpc,valuerating,
         valueratingdate,warpno,datemod,usermod)
        values
        (:trackingref1,old.boxno,old.lotno1,old.lotno2,old.ynstru,old.yncol,
         (old.yntare*-1),(old.ynnet*-1),old.datercvd,old.initials,old.ynqlty,
         old.shift,
         old.datemanu,old.yntwist,old.returned,(old.bpc*-1),old.valuerating,
         old.valueratingdate,old.warpno,"now",USER);
      insert into yarnrcpttrack
        (trackingref,boxno,lotno1,lotno2,ynstru,yncol,
         yntare,ynnet,datercvd,initials,ynqlty,shift,
         datemanu,yntwist,returned,bpc,valuerating,
         valueratingdate,warpno,datemod,usermod)
        values
        (:trackingref2,new.boxno,new.lotno1,new.lotno2,new.ynstru,new.yncol,
         new.yntare,new.ynnet,new.datercvd,new.initials,new.ynqlty,
         new.shift,
         new.datemanu,new.yntwist,new.returned,new.bpc,new.valuerating,
         new.valueratingdate,new.warpno,"now",USER);
    end
  end
end
 ^
CREATE TRIGGER WIPRCPT_TRACKUPDATE FOR WIPRCPT                         
ACTIVE AFTER UPDATE POSITION 10 
as
  declare variable trackingref1 integer;
  declare variable trackingref2 integer;
begin
  /*only run if not issued (or being issued)*/
  /*qlty added 30/11/97*/
  if (new.issueto is null) then
  begin
    if ((old.refno<>new.refno) or (old.prodref<>new.prodref)
      or (old.rcptdate<>new.rcptdate) 
      or (old.rcptinitials<>new.rcptinitials)
      or (old.netweight<>new.netweight) or (old.lotno1<>new.lotno1)
      or (old.lotno2<>new.lotno2) or (old.shift<>new.shift)
      or (old.datemanu<>new.datemanu)
      or (old.qlty<>new.qlty) /*replaced valuerating as at 30/11/97*/
      or (old.valuerating<>new.valuerating)
      or (old.valueratingdate<>new.valueratingdate)) then
    begin
      /*first fetch the next two trackingref's*/ 
      trackingref1=gen_id(genWIPRcptTrackingRef,1);
      trackingref2=gen_id(genWIPRcptTrackingRef,1);
      /* by the time we get here all checks are done*/
      insert into wiprcpttrack
        (trackingref,wiprcptrefno,prodref,rcptdate,
         rcptinitials,netweight,lotno1,lotno2,shift,
         datemanu,valuerating,valueratingdate,
         datemod,usermod,qlty)
        values
        (:trackingref1,old.refno,old.prodref,old.rcptdate,
         old.rcptinitials,(old.netweight*-1),old.lotno1,old.lotno2,old.shift,
         old.datemanu,old.valuerating,old.valueratingdate,
         "now",USER,old.qlty);
      insert into wiprcpttrack
        (trackingref,wiprcptrefno,prodref,rcptdate,
         rcptinitials,netweight,lotno1,lotno2,shift,
         datemanu,valuerating,valueratingdate,
         datemod,usermod,qlty)
        values
        (:trackingref2,new.refno,new.prodref,new.rcptdate,
         new.rcptinitials,new.netweight,new.lotno1,new.lotno2,new.shift,
         new.datemanu,new.valuerating,new.valueratingdate,
         "now",USER,new.qlty);
    end
  end
end
 ^
CREATE TRIGGER YNDESPHDRINSERTTXNDETTRIGGER FOR YNDESPHDR                       
ACTIVE AFTER INSERT POSITION 15 
as
begin
  if (new.despsent="Y") then
  begin
    exception eYnDespHdrInsertCannotComplete;
  end
  when any do exception eYnDespHdrInsertTxnDetTrigger;
end
 ^
CREATE TRIGGER WIPRCPTINSERTTRIGGER FOR WIPRCPT                         
ACTIVE AFTER INSERT POSITION 15 
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable txnno integer;
declare variable extprodref char(11);
declare variable newaccname char(6);
begin
  if (new.shift<>'W') then /*WIP Rcpts for WIP RM handled manually*/
  begin
    /*need two rows here*/
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    /*1) insert the wiprcpt record: increase the stock*/
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values /*qlty added 291197*/
        (:refno1,:txnno,"WR","RM",:extprodref,
         new.qlty,new.netweight,new.datemanu,new.refno,
         "now",USER);
    /*2) decrease the WIP*/
    select ctrlacct.extaccname,ctrlacct.accname
      from ctrlacct,product
     where product.prodref=new.prodref /*rcvd from WIP*/
       and ctrlacct.accname=product.ctrlacct
      into :extprodref,:newaccname;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values /*WIP qlty is now not always firsts? 291197*/
        (:refno2,:txnno,"WR","WIP",:extprodref,
         new.qlty,(new.netweight*-1),new.datemanu,new.refno,
         "now",USER);
    update ctrlacct
       set ctrlacct.qty=ctrlacct.qty+(new.netweight*-1)
     where ctrlacct.accname=:newaccname;
  end
  when any do exception eWIPRcptInsertTxnDet;
end
 ^
CREATE TRIGGER WIPRCPTUPDATETRIGGER FOR WIPRCPT                         
ACTIVE AFTER UPDATE POSITION 15 
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable refno3 integer;
declare variable refno4 integer;
declare variable txnno integer;
declare variable extprodref char(11);
declare variable oldaccname char(6);
declare variable newaccname char(6);
begin
  if (new.shift<>'W') then /*WIP Rcpts for WIP RM handled manually*/
  begin
    /*only insert record if changed*/
    if ((new.prodref<>old.prodref) or
        (old.netweight<>new.netweight) or
        (old.datemanu<>new.datemanu) or
        (old.qlty<>new.qlty) or /*added 291197*/
        (old.refno<>new.refno)) then
    begin
      /*need four rows here*/
      refno1=gen_id(genTxnDetRef,1);
      refno2=gen_id(genTxnDetRef,1);
      refno3=gen_id(genTxnDetRef,1);
      refno4=gen_id(genTxnDetRef,1);
      txnno=gen_id(genTxnDetTxnRef,1);
      /*1)insert the wiprcpt record: increase the stock; 2 adjusting entries*/
      select product.extprodref
        from product
       where product.prodref=old.prodref
        into :extprodref;
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values /*old.qlty added 291197*/
          (:refno1,:txnno,"C3","RM",:extprodref,
           old.qlty,(old.netweight*-1),old.datemanu,old.refno,
           "now",USER);
      select product.extprodref
        from product
       where product.prodref=new.prodref
        into :extprodref;
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values /*new.qlty added 291197*/
          (:refno2,:txnno,"C3","RM",:extprodref,
           new.qlty,new.netweight,new.datemanu,new.refno,
           "now",USER);
      /*3) decrease the WIP; 2 adjusting entries*/
      /*increase stock in WIP or at the Dye House*/
      select ctrlacct.extaccname,ctrlacct.accname
        from ctrlacct,product
       where product.prodref=old.prodref /*rcvd from WIP*/
         and ctrlacct.accname=product.ctrlacct
        into :extprodref,:oldaccname;
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values /*old.qlty added 291197*/
          (:refno3,:txnno,"C3","WIP",:extprodref,
           old.qlty,old.netweight,old.datemanu,old.refno,
           "now",USER);
      select ctrlacct.extaccname,ctrlacct.accname
        from ctrlacct,product
       where product.prodref=new.prodref /*rcvd from WIP*/
         and ctrlacct.accname=product.ctrlacct
        into :extprodref,:newaccname;
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values /*new.qlty added 291197*/
          (:refno4,:txnno,"C3","WIP",:extprodref,
           new.qlty,(new.netweight*-1),new.datemanu,new.refno,
           "now",USER);
      /*update the control account balances if reqd*/
      if (:oldaccname<>:newaccname) then
      begin
        update ctrlacct
           set ctrlacct.qty=ctrlacct.qty+old.netweight
         where ctrlacct.accname=:oldaccname;
        update ctrlacct
           set ctrlacct.qty=ctrlacct.qty+(new.netweight*-1)
         where ctrlacct.accname=:newaccname;
      end
    end
  end
  when any do exception eWIPRcptUpdateTxnDet;
end
 ^
CREATE TRIGGER YNDESPHDRUPDATETXNDETTRIGGER FOR YNDESPHDR                       
ACTIVE AFTER UPDATE POSITION 15 
as
declare variable refno integer; /*get the ref nos here as reqd*/
declare variable txnno integer; /*one txn no for the whole txn*/
declare variable extprodref char(11);
declare variable accname char(6);
declare variable rmperkg double precision;
declare variable wbsweight double precision;
declare variable ynstru char(4);
declare variable yntwist char(2);
declare variable ynqlty char(1);
declare variable sumynnet double precision;
declare variable txncode char(2);
declare variable vt1wip char(1); /*Y -> WIP; N->Client*/
declare variable prodtype char(3);
begin
  /* only update stock and WIP if required: */
  if ((new.despsent="Y") and (old.despsent="N")) then
  begin
    select supplier.vt1wip
      from supplier
     where supref=new.custref
      into :vt1wip;
    if (:vt1wip="N") then /*despatch to client*/
    begin
      txncode="YD"; /*yarn despatch to client*/
    end
    else /*despatch to factory; -> WIP change reqd*/
    begin
      txncode="YI"; /*yarn issue (-ve receipt) to WIP (RM's increase)*/
    end
    txnno=gen_id(genTxnDetTxnRef,1);
    /*carry out the instructions for all boxes on the despatch*/
    /*minimise the entries by summing the despatch, therefore*/
    /*eg: despatch to AECI is one line iso 164 lines*/
    for select yarntype.yntype,yarnrcpt.ynstru,yarnrcpt.yntwist,
                 yarnrcpt.ynqlty,sum(yarnrcpt.ynnet)
          from yarnrcpt,yarntype
         where yarnrcpt.despno=new.despno /*gives boxes for a despatch*/
           and yarnrcpt.ynstru=yarntype.ynstru
           and yarnrcpt.yntwist=yarntype.yntwist
           and yarnrcpt.yncol=yarntype.yncol
      group by yarntype.yntype,yarnrcpt.ynstru,yarnrcpt.yntwist,
                 yarnrcpt.ynqlty
          into :extprodref,:ynstru,:yntwist,:ynqlty,:sumynnet
    do
    begin
      /*1)decrease the stock*/
      if (:ynqlty="W") then
      begin
        if ((:ynstru='XSFG') or (:ynstru='XRWW')) then
        begin
          prodtype="WXN";
        end
        else
        begin
          prodtype="WYN";
        end
        txncode="YI"; /*if WIP then always Yarn Issued back to factory*/
      end
      else
      begin
        if ((:ynstru='XSFG') or (:ynstru='XRWW')) then
        begin
          prodtype="XN";
        end
        else
        begin
          prodtype="YN";
        end
      end
      refno=gen_id(genTxnDetRef,1);
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values
          (:refno,:txnno,:txncode,:prodtype,:extprodref,
           :ynqlty,(:sumynnet*-1),new.despdate,new.despno,
           "now",USER);
      /*2) increase the WIPs if reqd.*/
      /*Need the product's WIP control acct here*/
      /*only need change WIPs if issuing to WIP (factory)*/
      if (:txncode="YI") then
      begin
        /*add new info: increase the WIP*/
        for select ynstruwbsrm.rmperkg,ctrlacct.extaccname,ctrlacct.accname
              from ynstruwbsrm,ctrlacct
             where ynstruwbsrm.ctrlacct=ctrlacct.accname
               and ynstruwbsrm.ynstru=:ynstru
               and ynstruwbsrm.yntwist=:yntwist
              into :rmperkg,:extprodref,:accname
        do
        begin
          wbsweight=:sumynnet*:rmperkg;
          refno=gen_id(genTxnDetRef,1);
          insert into txndet (ref,txnno,txncode,prodtype,extprodref,
              qlty,qty,txndate,origtxncode,dateent,userent)
            values
              (:refno,:txnno,:txncode,"WIP",:extprodref,
               "",:wbsweight,new.despdate,new.despno,
               "now",USER);
          /*update the control account balances*/
          update ctrlacct
             set ctrlacct.qty=ctrlacct.qty+:wbsweight
           where ctrlacct.accname=:accname;
        end
      end
    end
  end
  when any do exception eYnDespHdrUpdateTxnDetTrigger;
end
 ^
CREATE TRIGGER YARNRCPTUPDATETXNDETTRIGGER FOR YARNRCPT                        
ACTIVE AFTER UPDATE POSITION 15 
as
declare variable refno integer; /*get the ref nos here as reqd*/
declare variable txnno integer; /*one txn no for the whole txn*/
declare variable extprodref char(11);
declare variable accname char(6);
declare variable rmperkg double precision;
declare variable wbsweight double precision;
declare variable txncode char(2);
declare variable oldprodtype char(3);
declare variable newprodtype char(3);
begin
  if ((old.boxno<>new.boxno)
      or (old.ynstru<>new.ynstru)
      or (old.yntwist<>new.yntwist) /*a colour change doesn't effect WIP*/
      or (old.yncol<>new.yncol)
      or (old.datemanu<>new.datemanu)
      or (old.ynnet<>new.ynnet)
      or (old.ynqlty<>new.ynqlty)) then
  begin /*only do a change if it is required*/
    if (new.returned="N") then
    begin
      txncode="C4"; /*change to yarn from factory*/
    end
    else
    begin
      txncode="C5"; /*change to yarn from client*/
    end
     txnno=gen_id(genTxnDetTxnRef,1);
    /*1)insert the yarnrcpt record: increase the stock; decr WIPs*/
    if ((old.ynstru='XSFG') or (old.ynstru='XRWW')) then
    begin
      if (old.ynqlty='W') then
      begin
        oldprodtype="WXN"; /*WIP Fuse Yarn*/
      end
      else
      begin
        oldprodtype="XN"; /*Fuse Yarn*/
      end
    end
    else
    begin
      if (old.ynqlty='W') then
      begin
        oldprodtype="WYN"; /*WIP Fuse Yarn*/
      end
      else
      begin
        oldprodtype="YN"; /*VB Yarn*/
      end
    end
    select yarntype.yntype
      from yarntype
     where yarntype.ynstru=old.ynstru
       and yarntype.yntwist=old.yntwist
       and yarntype.yncol=old.yncol
      into :extprodref;
    refno=gen_id(genTxnDetRef,1);
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno,:txnno,:txncode,:oldprodtype,:extprodref, /*YF = Yarn from Factory*/
         old.ynqlty,(old.ynnet*-1),old.datemanu,old.boxno,
         "now",USER);
    if ((new.ynstru='XSFG') or (new.ynstru='XRWW')) then
    begin
      if (new.ynqlty='W') then
      begin
        newprodtype="WXN"; /*WIP Fuse Yarn*/
      end
      else
      begin
        newprodtype="XN"; /*Fuse Yarn*/
      end
    end
    else
    begin
      if (new.ynqlty='W') then
      begin
        newprodtype="WYN"; /*WIP Yarn*/
      end
      else
      begin
        newprodtype="YN"; /*VB Yarn*/
      end
    end
    select yarntype.yntype
      from yarntype
     where yarntype.ynstru=new.ynstru
       and yarntype.yntwist=new.yntwist
       and yarntype.yncol=new.yncol
      into :extprodref;
    refno=gen_id(genTxnDetRef,1);
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno,:txnno,:txncode,:newprodtype,:extprodref, /*YF = Yarn from Factory*/
         new.ynqlty,new.ynnet,new.datemanu,new.boxno,
         "now",USER);
    /*2) decrease the WIPs.  Need the product's WIP control acct here*/
    /*only need change WIPs if manufactured, ie not returned*/
    /*Note: can't change 'returned' to 'not returned' without*/
    /*('despatching' or 'issuing') and ('returning' or 'not returning')*/
    if (new.returned="N") then
    begin
      if ((old.ynstru<>new.ynstru)
         or (old.yntwist<>new.yntwist)
         or (old.datemanu<>new.datemanu)) then
      begin
        /*remove old info*/
        for select ynstruwbsrm.rmperkg,ctrlacct.extaccname,ctrlacct.accname
              from ynstruwbsrm,ctrlacct
             where ynstruwbsrm.ctrlacct=ctrlacct.accname
               and ynstruwbsrm.ynstru=old.ynstru
               and ynstruwbsrm.yntwist=old.yntwist
              into :rmperkg,:extprodref,:accname
        do
        begin
          wbsweight=new.ynnet*:rmperkg;
          refno=gen_id(genTxnDetRef,1);
          insert into txndet (ref,txnno,txncode,prodtype,extprodref,
              qlty,qty,txndate,origtxncode,dateent,userent)
            values
              (:refno,:txnno,:txncode,"WIP",:extprodref,
               "",:wbsweight,old.datemanu,old.boxno,
               "now",USER);
          /*update the control account balances*/
          update ctrlacct
             set ctrlacct.qty=ctrlacct.qty+:wbsweight
           where ctrlacct.accname=:accname;
        end
        /*add new info*/
        for select ynstruwbsrm.rmperkg,ctrlacct.extaccname,ctrlacct.accname
              from ynstruwbsrm,ctrlacct
             where ynstruwbsrm.ctrlacct=ctrlacct.accname
               and ynstruwbsrm.ynstru=new.ynstru
               and ynstruwbsrm.yntwist=new.yntwist
              into :rmperkg,:extprodref,:accname
        do
        begin
          wbsweight=new.ynnet*:rmperkg;
          refno=gen_id(genTxnDetRef,1);
          insert into txndet (ref,txnno,txncode,prodtype,extprodref,
              qlty,qty,txndate,origtxncode,dateent,userent)
            values
              (:refno,:txnno,:txncode,"WIP",:extprodref,
               "",(:wbsweight*-1),new.datemanu,new.boxno,
               "now",USER);
          /*update the control account balances*/
          update ctrlacct
             set ctrlacct.qty=ctrlacct.qty+(:wbsweight*-1)
           where ctrlacct.accname=:accname;
        end
      end
    end
  end
  when any do exception eYarnRcptUpdateTxnDet;
end
 ^
CREATE TRIGGER ISSUEDETINSERTTRIGGER FOR ISSUEDET                        
ACTIVE AFTER INSERT POSITION 15 
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable txnno integer;
declare variable extprodref char(11);
declare variable controlacct char(6);
declare variable accname char(6);
declare variable supplier char(1);
declare variable txncode char(2);
begin
  /*need two rows here including for Dye Houses*/
  refno1=gen_id(genTxnDetRef,1);
  refno2=gen_id(genTxnDetRef,1);
  txnno=gen_id(genTxnDetTxnRef,1);
  controlacct="";
  /*1) insert the issue from record: decrease the stock*/
  /* dept.supplier added DL201097 */
  select dept.ctrlacct,dept.supplier
    from dept
   where dept.deptref=new.issueto
    into :controlacct,:supplier;
  if ((supplier="N") or
     (new.issueto="DHLTI") or /*just in case the user has put Y next*/
     (new.issueto="DHTBS") or /*to a dye house department*/
     (new.issueto="DHSAF")) then
  begin
    txncode="ID"; 
  end
  else
  begin
    txncode="D1"; /*will force a negative purchase: DH*/
  end
  select product.extprodref
    from product
   where product.prodref=new.prodref
    into :extprodref;
  insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent)
    values
      (:refno1,:txnno,:txncode,"RM",:extprodref,
       "",(new.qtyissued*-1),new.dateissued,new.issueno,
       "now",USER);
  /*2) insert the issue_to record*/
  /*increase stock in WIP or at the Dye House: if WIP then check dept*/
  /*table to make sure that we are issuing to WIP and not to a NONE type*/
  /*control account, eg a supplier or a customer*/
  if ((new.issueto="DHLTI")
      or (new.issueto="DHTBS")
      or (new.issueto="DHSAF")) then
  begin
    select ctrlacct.extaccname,ctrlacct.accname
      from ctrlacct
     where ctrlacct.accname=new.issueto /*issued to Dye House*/
      into :extprodref,:accname;
    controlacct=new.issueto; /*not NONE,-> control acct will be updated*/
  end
  else
  begin
    select dept.ctrlacct
      from dept
     where dept.deptref=new.issueto
      into :controlacct;
    if (controlacct<>"NONE") then /*issuing to WIP*/
    begin
      select ctrlacct.extaccname,ctrlacct.accname
        from ctrlacct,product
       where product.prodref=new.prodref /*issued to WIP*/
         and ctrlacct.accname=product.ctrlacct
        into :extprodref,:accname;
    end
  end
  if (controlacct<>"NONE") then
  begin
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno2,:txnno,"ID","WIP",:extprodref,
         "",new.qtyissued,new.dateissued,new.issueno,
         "now",USER);
    update ctrlacct
       set ctrlacct.qty=ctrlacct.qty+new.qtyissued
     where ctrlacct.accname=:accname;
  end
  when any do exception eIssueDetInsertTxnDet;
end
 ^
CREATE TRIGGER DELHEADINSERTTXNDET FOR DELHEAD                         
ACTIVE AFTER INSERT POSITION 15 
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable txnno integer;
declare variable extprodref char(11);
begin
  /*only need insert one row here unless from Dye House*/
  /*in which case need two rows*/
  if ((new.supref<>"DHLTI")
      and (new.supref<>"DHTBS")
      and (new.supref<>"DHSAF")) then
  begin
    refno1=gen_id(genTxnDetRef,1); /*one for each row in txndet*/
    txnno=gen_id(genTxnDetTxnRef,1); /*one of each txn in txndet*/
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    /*increase stock in store*/
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,"DH","RM",:extprodref,
         "",new.qtyrcvd,new.deldate,new.delno, /*qlty is blank,not null*/
         "now",USER);
  end
  else /*Dye House->2 detail lines*/
  begin
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    /*increase stock in store*/
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,"DY","RM",:extprodref,
         "",new.qtyrcvd,new.deldate,new.delno,
         "now",USER);
    /*decrease stock at dye house: only ACRWHT is stored at DH,*/
    /*therefore decrease DH"s control account*/
    select ctrlacct.extaccname
      from ctrlacct
     where ctrlacct.accname=new.supref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno2,:txnno,"DY","WIP",:extprodref,
         "",(new.qtyrcvd*-1),new.deldate,new.delno,
         "now",USER);
    /*update the ctrlacct balance*/
    update ctrlacct
       set ctrlacct.qty=ctrlacct.qty+(new.qtyrcvd*-1)
     where ctrlacct.accname=new.supref;
  end
  when any do exception eDelHeadInsertTxnDet;
end
 ^
CREATE TRIGGER YARNRCPTINSERTTXNDETTRIGGER FOR YARNRCPT                        
ACTIVE AFTER INSERT POSITION 15 
as
declare variable refno integer; /*get the ref nos here as reqd*/
declare variable txnno integer; /*one txn no for the whole txn*/
declare variable extprodref char(11);
declare variable accname char(6);
declare variable rmperkg double precision;
declare variable wbsweight double precision;
declare variable txncode char(2);
declare variable prodtype char(3);
begin
  txnno=gen_id(genTxnDetTxnRef,1);
  if (new.ynqlty="W") then /*WIP*/
  begin
    if ((new.ynstru="XSFG") or (new.ynstru="XRWW")) then
    begin
      prodtype="WXN"; /*Fuse WIP Yarn*/
    end
    else
    begin
      prodtype="WYN"; /*WIP Yarn*/
    end
    txncode="YF"; /*WIP yarn considered to be from factory*/
  end
  else
  begin
    if ((new.ynstru="XSFG") or (new.ynstru="XRWW")) then
    begin
      prodtype="XN"; /*Fuse Yarn*/
    end
    else
    begin
      prodtype="YN"; /*VB Yarn*/
    end
    if (new.returned="N") then
    begin
      txncode="YF"; /*yarn from factory*/
    end
    else
    begin
      txncode="YC"; /*yarn from client*/
    end
  end
  /*1)insert the yarnrcpt record: increase the stock;*/
  /*decrease WIPs (if not returned)*/
  select yarntype.yntype
    from yarntype
   where yarntype.ynstru=new.ynstru
     and yarntype.yntwist=new.yntwist
     and yarntype.yncol=new.yncol
    into :extprodref;
  refno=gen_id(genTxnDetRef,1);
  insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent)
    values
      (:refno,:txnno,:txncode,:prodtype,:extprodref,/*YF=Yarn from Factory*/
       new.ynqlty,new.ynnet,new.datemanu,new.boxno,
       "now",USER);
  /*2) decrease the WIPs.  Need the product's WIP control acct here*/
  if ((new.returned="N")
       or (new.YnQlty="W")) then /*not returned so manu,so consumes RM*/
  begin
    for select ynstruwbsrm.rmperkg,ctrlacct.extaccname,ctrlacct.accname
          from ynstruwbsrm,ctrlacct
         where ynstruwbsrm.ctrlacct=ctrlacct.accname
           and ynstruwbsrm.ynstru=new.ynstru
           and ynstruwbsrm.yntwist=new.yntwist
          into :rmperkg,:extprodref,:accname
    do
    begin
      wbsweight=new.ynnet*:rmperkg;
      refno=gen_id(genTxnDetRef,1);
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values
          (:refno,:txnno,:txncode,"WIP",:extprodref,
           "",(:wbsweight*-1),new.datemanu,new.boxno,
           "now",USER);
      /*update the control account balances*/
      update ctrlacct
         set ctrlacct.qty=ctrlacct.qty+(:wbsweight*-1)
       where ctrlacct.accname=:accname;
    end
  end
  when any do exception eYarnRcptInsertTxnDet;
end
 ^
CREATE TRIGGER DELHEADUPDATETXNDET FOR DELHEAD                         
ACTIVE AFTER UPDATE POSITION 15 
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable refno3 integer;
declare variable refno4 integer;
declare variable txnno integer;
declare variable extprodref char(11);
begin
  /*need two rows here unless from Dye House*/
  /*in which case need four rows*/
  if ((new.supref<>"DHLTI")
      and (new.supref<>"DHTBS")
      and (new.supref<>"DHSAF")) then
  begin
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    select product.extprodref
      from product
     where product.prodref=old.prodref /*just in case prodref changes*/
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,"C1","RM",:extprodref,
         "",(old.qtyrcvd*-1),old.deldate,old.delno,
                 /*was new.deldate so that period balances correct: 9/10/97*/
         "now",USER);
    select product.extprodref
      from product
     where product.prodref=new.prodref /*just in case prodref changes*/
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno2,:txnno,"C1","RM",:extprodref,
         "",new.qtyrcvd,new.deldate,new.delno,
         "now",USER);
  end
  else /*Dye House->4 detail lines*/
  begin
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    refno3=gen_id(genTxnDetRef,1);
    refno4=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    select product.extprodref
      from product
     where product.prodref=old.prodref
      into :extprodref;
    /*increase stock in store*/
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,"C2","RM",:extprodref,
         "",(old.qtyrcvd*-1),old.deldate,old.delno,
         "now",USER);
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    /*increase stock in store*/
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno2,:txnno,"C2","RM",:extprodref,
         "",new.qtyrcvd,new.deldate,new.delno,
         "now",USER);
    /*decrease stock at dye house: only ACRWHT is stored at DH,*/
    /*therefore decrease DH"s control account*/
      /*first incr. stock at dye house*/
    select ctrlacct.extaccname
      from ctrlacct
     where ctrlacct.accname=old.supref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno3,:txnno,"C2","WIP",:extprodref,
         "",old.qtyrcvd,old.deldate,old.delno,
         "now",USER);
    select ctrlacct.extaccname
      from ctrlacct
     where ctrlacct.accname=new.supref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno4,:txnno,"C2","WIP",:extprodref,
         "",(new.qtyrcvd*-1),new.deldate,new.delno,
         "now",USER);
    /*update the ctrlacct balances*/
    update ctrlacct
       set ctrlacct.qty=ctrlacct.qty+old.qtyrcvd
     where ctrlacct.accname=old.supref;
    update ctrlacct
       set ctrlacct.qty=ctrlacct.qty+(new.qtyrcvd*-1)
     where ctrlacct.accname=new.supref;
  end
  when any do exception eDelHeadUpdateTxnDet;
end
 ^
CREATE TRIGGER DELHEAD_TRACKUPDATE FOR DELHEAD                         
ACTIVE AFTER UPDATE POSITION 10 
as
  declare variable trackingref1 integer;
  declare variable trackingref2 integer;
begin
  /*only run if palletno and despno<>0*/
  if ((old.delno<>new.delno) or (old.expdeldate<>new.expdeldate)
       or (old.supref<>new.supref) or (old.delnoteno<>new.delnoteno)
       or (old.agent<>new.agent) or (old.supordno<>new.supordno)
       or (old.contref<>new.contref) or (old.delnotedate<>new.delnotedate)
       or (old.palletsrcvd<>new.palletsrcvd)
       or (old.cartonsrcvd<>new.cartonsrcvd)
       or (old.qtyrcvd<>new.qtyrcvd) or (old.deldate<>new.deldate)
       or (old.rcvdby<>new.rcvdby) or (old.narrative<>new.narrative)
       or (old.prodref<>new.prodref) or (old.vtordno<>new.vtordno)) then
  begin
    /*first fetch the next two trackingref's*/ 
    trackingref1=gen_id(genDelHeadTrackingRef,1);
    trackingref2=gen_id(genDelHeadTrackingRef,1);
    /* by the time we get here all checks are done*/
    insert into DelHeadTrack
      (trackingref,delno,expdeldate,supref,delnoteno,
       agent,supordno,contref,delnotedate,
       palletsrcvd,cartonsrcvd,qtyrcvd,
       deldate,rcvdby,narrative,
       prodref,vtordno,datemod,usermod)
      values
      (:trackingref1,old.delno,old.expdeldate,old.supref,old.delnoteno,
       old.agent,old.supordno,old.contref,old.delnotedate,
       (old.palletsrcvd*-1),(old.cartonsrcvd*-1),(old.qtyrcvd*-1),
       old.deldate,old.rcvdby,old.narrative,
       old.prodref,old.vtordno,"now",USER);
    insert into DelHeadTrack
      (trackingref,delno,expdeldate,supref,delnoteno,
       agent,supordno,contref,delnotedate,
       palletsrcvd,cartonsrcvd,qtyrcvd,
       deldate,rcvdby,narrative,
       prodref,vtordno,datemod,usermod)
      values
      (:trackingref2,new.delno,new.expdeldate,new.supref,new.delnoteno,
       new.agent,new.supordno,new.contref,new.delnotedate,
       new.palletsrcvd,new.cartonsrcvd,new.qtyrcvd,
       new.deldate,new.rcvdby,new.narrative,
       new.prodref,new.vtordno,"now",USER);
  end
end
 ^
CREATE TRIGGER WIPISSUEINSERTTRIGGER FOR WIPRCPT                         
ACTIVE AFTER UPDATE POSITION 20 
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable txnno integer;
declare variable extprodref char(11);
declare variable controlacct char(6);
declare variable accname char(6);
declare variable supplier char(1); /*added DL201097*/
declare variable txncode char(2);
begin
  /*note: there is no WIPIssue table, but issuing a WIPRcpt requires*/
  /*a trigger*/
  if ((new.shift<>"W")
     and (new.issueto<>"")
     and (new.issueto is not null)
     and (old.issueto is null)) then /*and old.issueto is null added291197*/
    /*issueto filled in, therefore issue the WIP or DH*/
  begin
    /*need two rows here including for Dye Houses*/
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    controlacct="";
    supplier="";
    /* dept.supplier added DL201097 */
    select dept.ctrlacct,dept.supplier
      from dept
     where dept.deptref=new.issueto
      into :controlacct,:supplier;
    if ((supplier="N") or
        (new.issueto="DHLTI") or /*just in case the user has put Y next*/
        (new.issueto="DHTBS") or /*to a dye house department*/
        (new.issueto="DHSAF")) then
    begin
      txncode="WI"; 
    end
    else
    begin
      txncode="D2"; /*will force a negative purchase:DH*/
    end
    /*1) insert the issue from record: decrease the stock*/
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values /*new.qlty added 291197*/
        (:refno1,:txnno,:txncode,"RM",:extprodref,
         new.qlty,(new.netweight*-1),new.dateissued,new.refno,
         "now",USER);
    /*2) insert the issue_to record*/
    /*increase stock in WIP or at the Dye House: if WIP then check dept*/
    /*table to make sure that we are issuing to WIP and not to a NONE type*/
    /*control account, eg a supplier or a customer*/
    if ((new.issueto="DHLTI")
        or (new.issueto="DHTBS")
        or (new.issueto="DHSAF")) then
    begin
      select ctrlacct.extaccname,ctrlacct.accname
        from ctrlacct
       where ctrlacct.accname=new.issueto /*issued to Dye House*/
        into :extprodref,:accname;
      controlacct=new.issueto; /*not NONE,-> control acct will be updated*/
    end
    else
    begin
      select dept.ctrlacct
        from dept
       where dept.deptref=new.issueto
        into :controlacct; /* ?redundant code*/
      if (controlacct<>"NONE") then /*issuing to WIP*/
      begin
        select ctrlacct.extaccname,ctrlacct.accname
          from ctrlacct,product
         where product.prodref=new.prodref /*issued to WIP*/
           and ctrlacct.accname=product.ctrlacct
          into :extprodref,:accname;
      end
    end
    if (controlacct<>"NONE") then
    begin
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values /*new.qlty added 291197*/
          (:refno2,:txnno,"WI","WIP",:extprodref,
           new.qlty,new.netweight,new.dateissued,new.refno,
           "now",USER);
      update ctrlacct
         set ctrlacct.qty=ctrlacct.qty+new.netweight
       where ctrlacct.accname=:accname;
    end
  end
  when any do exception eWIPIssueInsertTxnDet;
end
 ^
COMMIT WORK ^
SET TERM ; ^

/* Grant permissions for this database */
GRANT SELECT ON AGENT TO ANDRIES;
GRANT SELECT ON AGENT TO BARRY;
GRANT SELECT ON AGENT TO BASIE;
GRANT SELECT ON AGENT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON AGENT TO DAVID;
GRANT SELECT ON AGENT TO FABIAN;
GRANT SELECT ON AGENT TO GEORGE;
GRANT SELECT ON AGENT TO JEROME;
GRANT SELECT ON AGENT TO JOHAN;
GRANT SELECT ON AGENT TO NATH;
GRANT INSERT, SELECT, UPDATE ON AGENT TO PAUL;
GRANT SELECT ON AGENT TO PETER;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON AGENT TO RALPH;
GRANT SELECT ON AGENT TO RONY;
GRANT SELECT ON AGENT TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON AGENT TO SUSAN;
GRANT SELECT, UPDATE ON APORDDET TO ANDRIES;
GRANT SELECT ON APORDDET TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDDET TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDDET TO DAVID;
GRANT SELECT, UPDATE ON APORDDET TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDDET TO GEORGE;
GRANT SELECT, UPDATE ON APORDDET TO JANET;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO JEROME;
GRANT SELECT ON APORDDET TO JOHAN;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO JUDITH;
GRANT SELECT, UPDATE ON APORDDET TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDDET TO PAUL;
GRANT SELECT, UPDATE ON APORDDET TO PETER;
GRANT SELECT ON APORDDET TO RONY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDDET TO SHARON;
GRANT SELECT ON APORDHDR TO ANDRIES;
GRANT SELECT ON APORDHDR TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDHDR TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDHDR TO DAVID;
GRANT SELECT ON APORDHDR TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDHDR TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO JEROME;
GRANT SELECT ON APORDHDR TO JOHAN;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO JUDITH;
GRANT SELECT ON APORDHDR TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDHDR TO PAUL;
GRANT SELECT ON APORDHDR TO PETER;
GRANT SELECT ON APORDHDR TO RONY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDHDR TO SHARON;
GRANT SELECT, UPDATE ON CTRLACCT TO BARRY;
GRANT SELECT, UPDATE ON CTRLACCT TO BASIE;
GRANT SELECT, UPDATE ON CTRLACCT TO GEORGE;
GRANT SELECT ON CTRLACCT TO NATH;
GRANT SELECT, UPDATE ON CTRLACCT TO PAUL;
GRANT SELECT, UPDATE ON CTRLACCT TO PUBLIC;
GRANT SELECT, UPDATE ON CTRLACCT TO RONY;
GRANT SELECT ON CTRLACCT TO SHARON;
GRANT SELECT, UPDATE ON CTRLACCT TO SUSAN;
GRANT SELECT ON CURRENCY TO ANDRIES;
GRANT SELECT ON CURRENCY TO BARRY;
GRANT SELECT ON CURRENCY TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO DAVID;
GRANT SELECT ON CURRENCY TO FABIAN;
GRANT SELECT ON CURRENCY TO GEORGE;
GRANT SELECT ON CURRENCY TO JUDITH;
GRANT SELECT ON CURRENCY TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO PAUL;
GRANT SELECT ON CURRENCY TO PETER;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO RALPH;
GRANT SELECT ON CURRENCY TO RONY;
GRANT SELECT ON CURRENCY TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO SUSAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELBCB TO ANDRIES;
GRANT SELECT ON DELBCB TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELBCB TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELBCB TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELBCB TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELBCB TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO JEROME;
GRANT SELECT ON DELBCB TO JOHAN;
GRANT SELECT ON DELBCB TO JUDITH;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELBCB TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELBCB TO PAUL;
GRANT SELECT, UPDATE ON DELBCB TO PETER;
GRANT SELECT ON DELBCB TO RONY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELBCB TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELHEAD TO ANDRIES;
GRANT SELECT ON DELHEAD TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELHEAD TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELHEAD TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELHEAD TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELHEAD TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO JEROME;
GRANT SELECT ON DELHEAD TO JOHAN;
GRANT SELECT ON DELHEAD TO JUDITH;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELHEAD TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELHEAD TO PAUL;
GRANT SELECT, UPDATE ON DELHEAD TO PETER;
GRANT SELECT ON DELHEAD TO RONY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELHEAD TO SHARON;
GRANT INSERT ON DELHEADTRACK TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELPALLET TO ANDRIES;
GRANT SELECT ON DELPALLET TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELPALLET TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELPALLET TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELPALLET TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELPALLET TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO JEROME;
GRANT SELECT ON DELPALLET TO JOHAN;
GRANT SELECT ON DELPALLET TO JUDITH;
GRANT DELETE, INSERT, SELECT, UPDATE ON DELPALLET TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELPALLET TO PAUL;
GRANT SELECT, UPDATE ON DELPALLET TO PETER;
GRANT SELECT ON DELPALLET TO RONY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELPALLET TO SHARON;
GRANT SELECT ON DEPT TO ANDRIES;
GRANT SELECT ON DEPT TO BARRY;
GRANT SELECT ON DEPT TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO DAVID;
GRANT SELECT ON DEPT TO FABIAN;
GRANT SELECT ON DEPT TO GEORGE;
GRANT SELECT ON DEPT TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO PAUL;
GRANT SELECT ON DEPT TO PETER;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO RALPH;
GRANT SELECT ON DEPT TO RONY;
GRANT SELECT ON DEPT TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO SUSAN;
GRANT SELECT ON INITIALS TO ANDRIES;
GRANT SELECT ON INITIALS TO BARRY;
GRANT SELECT ON INITIALS TO BASIE;
GRANT SELECT ON INITIALS TO CAMERON;
GRANT SELECT ON INITIALS TO CHRIS;
GRANT SELECT ON INITIALS TO CHRISTEL;
GRANT SELECT ON INITIALS TO CHRYSTAL;
GRANT SELECT ON INITIALS TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON INITIALS TO DAVID;
GRANT SELECT ON INITIALS TO FABIAN;
GRANT SELECT ON INITIALS TO GEORGE;
GRANT SELECT ON INITIALS TO JEROME;
GRANT SELECT ON INITIALS TO JOHAN;
GRANT SELECT ON INITIALS TO JUDITH;
GRANT SELECT ON INITIALS TO LESDENE;
GRANT SELECT ON INITIALS TO MONIQUE;
GRANT SELECT ON INITIALS TO NADIA;
GRANT SELECT ON INITIALS TO NATH;
GRANT SELECT ON INITIALS TO PAUL;
GRANT SELECT ON INITIALS TO RALPH;
GRANT SELECT ON INITIALS TO RONY;
GRANT SELECT ON INITIALS TO SHAHIEDA;
GRANT SELECT ON INITIALS TO SHARON;
GRANT SELECT ON INITIALS TO SUSAN;
GRANT SELECT ON INVFROM TO ANDRIES;
GRANT SELECT ON INVFROM TO BARRY;
GRANT SELECT ON INVFROM TO BASIE;
GRANT SELECT ON INVFROM TO DAVID;
GRANT SELECT ON INVFROM TO FABIAN;
GRANT SELECT ON INVFROM TO GEORGE;
GRANT SELECT ON INVFROM TO JEROME;
GRANT SELECT ON INVFROM TO JOHAN;
GRANT SELECT ON INVFROM TO NATH;
GRANT SELECT ON INVFROM TO PAUL;
GRANT SELECT ON INVFROM TO RALPH;
GRANT SELECT ON INVFROM TO RONY;
GRANT SELECT ON INVFROM TO SHARON;
GRANT SELECT ON INVFROM TO SUSAN;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO BASIE;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO DAVID;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO JEROME;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO NATH;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO PETER;
GRANT SELECT ON ISSUEDET TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO SHARON;
GRANT SELECT, UPDATE ON NEXTNO TO ANDRIES;
GRANT SELECT, UPDATE ON NEXTNO TO BASIE;
GRANT SELECT, UPDATE ON NEXTNO TO DAVID;
GRANT SELECT, UPDATE ON NEXTNO TO FABIAN;
GRANT SELECT, UPDATE ON NEXTNO TO GEORGE;
GRANT SELECT, UPDATE ON NEXTNO TO NATH;
GRANT SELECT, UPDATE ON NEXTNO TO PAUL;
GRANT SELECT, UPDATE ON NEXTNO TO PETER;
GRANT SELECT, UPDATE ON NEXTNO TO SHARON;
GRANT SELECT ON PARAM TO ANDRIES;
GRANT SELECT ON PARAM TO BASIE;
GRANT SELECT ON PARAM TO DAVID;
GRANT SELECT ON PARAM TO FABIAN;
GRANT SELECT ON PARAM TO GEORGE;
GRANT SELECT ON PARAM TO JUDITH;
GRANT SELECT ON PARAM TO NATH;
GRANT SELECT ON PARAM TO PAUL;
GRANT SELECT ON PARAM TO PETER;
GRANT SELECT ON PARAM TO PUBLIC;
GRANT SELECT ON PARAM TO SHARON;
GRANT SELECT ON PRODCAT TO ANDRIES;
GRANT SELECT ON PRODCAT TO BASIE;
GRANT SELECT ON PRODCAT TO DAVID;
GRANT SELECT ON PRODCAT TO FABIAN;
GRANT SELECT ON PRODCAT TO GEORGE;
GRANT SELECT ON PRODCAT TO JUDITH;
GRANT SELECT ON PRODCAT TO NATH;
GRANT SELECT ON PRODCAT TO PAUL;
GRANT SELECT ON PRODCAT TO PETER;
GRANT SELECT ON PRODCAT TO PUBLIC;
GRANT SELECT ON PRODCAT TO SHARON;
GRANT SELECT ON PRODSUP TO ANDRIES;
GRANT SELECT ON PRODSUP TO BASIE;
GRANT SELECT ON PRODSUP TO DAVID;
GRANT SELECT ON PRODSUP TO FABIAN;
GRANT SELECT ON PRODSUP TO GEORGE;
GRANT SELECT ON PRODSUP TO JUDITH;
GRANT SELECT ON PRODSUP TO NATH;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO PAUL;
GRANT SELECT ON PRODSUP TO PETER;
GRANT SELECT ON PRODSUP TO PUBLIC;
GRANT SELECT ON PRODSUP TO SHARON;
GRANT SELECT, UPDATE ON PRODUCT TO ANDRIES;
GRANT SELECT, UPDATE ON PRODUCT TO BASIE;
GRANT SELECT, UPDATE ON PRODUCT TO DAVID;
GRANT SELECT, UPDATE ON PRODUCT TO FABIAN;
GRANT SELECT, UPDATE ON PRODUCT TO GEORGE;
GRANT SELECT, UPDATE ON PRODUCT TO JEROME;
GRANT SELECT, UPDATE, REFERENCES ON PRODUCT TO JUDITH;
GRANT SELECT, UPDATE ON PRODUCT TO NATH;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO PAUL;
GRANT SELECT, UPDATE ON PRODUCT TO PETER;
GRANT SELECT ON PRODUCT TO PUBLIC;
GRANT SELECT, UPDATE ON PRODUCT TO SHARON;
GRANT SELECT ON PRODUCTMAKE TO BASIE;
GRANT SELECT ON PRODUCTMAKE TO GEORGE;
GRANT SELECT ON PRODUCTMAKE TO SHARON;
GRANT SELECT ON RMTXNDETCATEGORY TO PUBLIC;
GRANT SELECT ON STDCOSTPRICES TO BARRY;
GRANT SELECT ON STDCOSTPRICES TO BASIE;
GRANT SELECT ON STDCOSTPRICES TO GEORGE;
GRANT SELECT ON STDCOSTPRICES TO PAUL;
GRANT SELECT ON STDCOSTPRICES TO RONY;
GRANT SELECT ON STDCOSTPRICES TO SUSAN;
GRANT SELECT ON STDQLTYVALUES TO BARRY;
GRANT SELECT ON STDQLTYVALUES TO BASIE;
GRANT SELECT ON STDQLTYVALUES TO GEORGE;
GRANT SELECT ON STDQLTYVALUES TO PAUL;
GRANT SELECT ON STDQLTYVALUES TO RONY;
GRANT SELECT ON STDQLTYVALUES TO SUSAN;
GRANT SELECT ON STOREPRICE TO PAUL;
GRANT SELECT ON SUPPLIER TO ANDRIES;
GRANT SELECT ON SUPPLIER TO BARRY;
GRANT SELECT ON SUPPLIER TO BASIE;
GRANT SELECT ON SUPPLIER TO CORDENAI;
GRANT SELECT ON SUPPLIER TO DAVID;
GRANT SELECT ON SUPPLIER TO FABIAN;
GRANT SELECT ON SUPPLIER TO GEORGE;
GRANT SELECT ON SUPPLIER TO JEROME;
GRANT SELECT ON SUPPLIER TO JOHAN;
GRANT SELECT ON SUPPLIER TO JUDITH;
GRANT SELECT ON SUPPLIER TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO PAUL;
GRANT SELECT ON SUPPLIER TO PETER;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO RALPH;
GRANT SELECT ON SUPPLIER TO RONY;
GRANT SELECT ON SUPPLIER TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO SUSAN;
GRANT SELECT ON TERMS TO ANDRIES;
GRANT SELECT ON TERMS TO BARRY;
GRANT SELECT ON TERMS TO BASIE;
GRANT SELECT ON TERMS TO DAVID;
GRANT SELECT ON TERMS TO FABIAN;
GRANT SELECT ON TERMS TO GEORGE;
GRANT SELECT ON TERMS TO NATH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO PAUL;
GRANT SELECT ON TERMS TO PETER;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO RALPH;
GRANT SELECT ON TERMS TO RONY;
GRANT SELECT ON TERMS TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO SUSAN;
GRANT INSERT, SELECT ON TRANSFERDET TO BASIE;
GRANT INSERT, SELECT ON TRANSFERDET TO GEORGE;
GRANT INSERT, SELECT ON TRANSFERDET TO SHARON;
GRANT SELECT ON TXNDET TO BARRY;
GRANT INSERT, SELECT ON TXNDET TO BASIE;
GRANT INSERT, SELECT ON TXNDET TO GEORGE;
GRANT INSERT, SELECT ON TXNDET TO PAUL;
GRANT INSERT ON TXNDET TO PUBLIC;
GRANT SELECT ON TXNDET TO RONY;
GRANT INSERT, SELECT ON TXNDET TO SUSAN;
GRANT SELECT ON UNIT TO ANDRIES;
GRANT SELECT ON UNIT TO BASIE;
GRANT SELECT ON UNIT TO DAVID;
GRANT SELECT ON UNIT TO FABIAN;
GRANT SELECT ON UNIT TO GEORGE;
GRANT SELECT ON UNIT TO JUDITH;
GRANT SELECT ON UNIT TO NATH;
GRANT SELECT ON UNIT TO PAUL;
GRANT SELECT ON UNIT TO PETER;
GRANT SELECT ON UNIT TO PUBLIC;
GRANT SELECT ON UNIT TO SHARON;
GRANT SELECT ON VTPERIOD TO BARRY;
GRANT SELECT ON VTPERIOD TO BASIE;
GRANT SELECT ON VTPERIOD TO GEORGE;
GRANT SELECT ON VTPERIOD TO PAUL;
GRANT SELECT ON VTPERIOD TO RONY;
GRANT SELECT ON VTPERIOD TO SUSAN;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO BASIE;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO DAVID;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO JEROME;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO NATH;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO PETER;
GRANT SELECT ON WIPRCPT TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO SHARON;
GRANT INSERT ON WIPRCPTTRACK TO PUBLIC;
GRANT SELECT ON YARNCOL TO ANDRIES;
GRANT SELECT ON YARNCOL TO BARRY;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO BASIE;
GRANT SELECT ON YARNCOL TO CHRIS;
GRANT SELECT ON YARNCOL TO CORDENAI;
GRANT SELECT ON YARNCOL TO DAVID;
GRANT SELECT ON YARNCOL TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO GEORGE;
GRANT SELECT ON YARNCOL TO JOHAN;
GRANT SELECT ON YARNCOL TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO MONIQUE;
GRANT SELECT ON YARNCOL TO NATH;
GRANT SELECT ON YARNCOL TO PAUL;
GRANT SELECT ON YARNCOL TO PETER;
GRANT SELECT ON YARNCOL TO RALPH;
GRANT SELECT ON YARNCOL TO RONY;
GRANT SELECT ON YARNCOL TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO SHARON;
GRANT SELECT ON YARNCOL TO SUSAN;
GRANT SELECT ON YARNKIND TO ANDRIES;
GRANT SELECT ON YARNKIND TO BASIE;
GRANT SELECT ON YARNKIND TO DAVID;
GRANT SELECT ON YARNKIND TO FABIAN;
GRANT SELECT ON YARNKIND TO GEORGE;
GRANT SELECT ON YARNKIND TO NATH;
GRANT SELECT ON YARNKIND TO PAUL;
GRANT SELECT ON YARNKIND TO PETER;
GRANT SELECT ON YARNKIND TO SHARON;
GRANT SELECT ON YARNLOTNO TO ANDRIES;
GRANT SELECT ON YARNLOTNO TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNLOTNO TO BASIE;
GRANT SELECT ON YARNLOTNO TO CAMERON;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO CHRIS;
GRANT SELECT ON YARNLOTNO TO CHRISTEL;
GRANT SELECT ON YARNLOTNO TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO CORDENAI;
GRANT SELECT ON YARNLOTNO TO DAVID;
GRANT SELECT ON YARNLOTNO TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNLOTNO TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JEROME;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JOHAN;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JUDITH;
GRANT SELECT ON YARNLOTNO TO LESDENE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO MONIQUE;
GRANT SELECT ON YARNLOTNO TO NADIA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO NATH;
GRANT SELECT ON YARNLOTNO TO PAUL;
GRANT SELECT ON YARNLOTNO TO PETER;
GRANT SELECT ON YARNLOTNO TO RALPH;
GRANT SELECT ON YARNLOTNO TO RONY;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO SHAHIEDA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNLOTNO TO SHARON;
GRANT SELECT ON YARNLOTNO TO SUSAN;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO BASIE;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO DAVID;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO GEORGE;
GRANT SELECT ON YARNRCPT TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO NATH;
GRANT SELECT ON YARNRCPT TO PAUL;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO PETER;
GRANT INSERT, SELECT, UPDATE ON YARNRCPT TO SHARON;
GRANT INSERT ON YARNRCPTTRACK TO PUBLIC;
GRANT SELECT ON YARNSTRU TO ANDRIES;
GRANT SELECT ON YARNSTRU TO BARRY;
GRANT INSERT, SELECT, UPDATE ON YARNSTRU TO BASIE;
GRANT SELECT ON YARNSTRU TO CHRIS;
GRANT SELECT ON YARNSTRU TO DAVID;
GRANT SELECT ON YARNSTRU TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON YARNSTRU TO GEORGE;
GRANT SELECT ON YARNSTRU TO JOHAN;
GRANT SELECT ON YARNSTRU TO JUDITH;
GRANT SELECT ON YARNSTRU TO MONIQUE;
GRANT SELECT ON YARNSTRU TO NATH;
GRANT SELECT ON YARNSTRU TO PAUL;
GRANT SELECT ON YARNSTRU TO PETER;
GRANT SELECT ON YARNSTRU TO RALPH;
GRANT SELECT ON YARNSTRU TO RONY;
GRANT INSERT, SELECT, UPDATE ON YARNSTRU TO SHARON;
GRANT SELECT ON YARNSTRU TO SUSAN;
GRANT SELECT, UPDATE ON YARNTYPE TO ANDRIES;
GRANT SELECT ON YARNTYPE TO BARRY;
GRANT INSERT, SELECT, UPDATE ON YARNTYPE TO BASIE;
GRANT SELECT ON YARNTYPE TO CHRIS;
GRANT SELECT ON YARNTYPE TO CORDENAI;
GRANT SELECT, UPDATE ON YARNTYPE TO DAVID;
GRANT SELECT, UPDATE ON YARNTYPE TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON YARNTYPE TO GEORGE;
GRANT SELECT ON YARNTYPE TO JEROME;
GRANT SELECT ON YARNTYPE TO JOHAN;
GRANT SELECT ON YARNTYPE TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON YARNTYPE TO MONIQUE;
GRANT SELECT, UPDATE ON YARNTYPE TO NATH;
GRANT SELECT ON YARNTYPE TO PAUL;
GRANT SELECT, UPDATE ON YARNTYPE TO PETER;
GRANT SELECT ON YARNTYPE TO RALPH;
GRANT SELECT ON YARNTYPE TO RONY;
GRANT SELECT ON YARNTYPE TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON YARNTYPE TO SHARON;
GRANT SELECT ON YARNTYPE TO SUSAN;
GRANT SELECT ON YNCOLWBS TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE ON YNCOLWBS TO CHRIS;
GRANT SELECT ON YNCOLWBS TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE ON YNCOLWBSLOTNO TO BASIE;
GRANT DELETE, INSERT, SELECT, UPDATE ON YNCOLWBSLOTNO TO CHRIS;
GRANT DELETE, INSERT, SELECT, UPDATE ON YNCOLWBSLOTNO TO SHARON;
GRANT INSERT, SELECT, UPDATE ON YNDESPHDR TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YNDESPHDR TO BASIE;
GRANT SELECT ON YNDESPHDR TO DAVID;
GRANT INSERT, SELECT, UPDATE ON YNDESPHDR TO FABIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YNDESPHDR TO GEORGE;
GRANT INSERT, SELECT, UPDATE ON YNDESPHDR TO NATH;
GRANT SELECT ON YNDESPHDR TO PAUL;
GRANT SELECT ON YNDESPHDR TO PETER;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YNDESPHDR TO SHARON;
GRANT SELECT ON YNEFFGROUP TO BASIE;
GRANT SELECT ON YNEFFGROUP TO GEORGE;
GRANT SELECT ON YNEFFGROUP TO PAUL;
GRANT SELECT ON YNEFFGROUP TO SHARON;
GRANT SELECT ON YNPRICE TO PAUL;
GRANT SELECT ON YNSTRUWBSRM TO BASIE;
GRANT SELECT ON YNSTRUWBSRM TO CHRIS;
GRANT SELECT ON YNSTRUWBSRM TO GEORGE;
GRANT SELECT ON YNSTRUWBSRM TO PAUL;
GRANT SELECT ON YNSTRUWBSRM TO SHARON;
GRANT SELECT ON YNTWIST TO ANDRIES;
GRANT SELECT ON YNTWIST TO BARRY;
GRANT INSERT, SELECT, UPDATE ON YNTWIST TO BASIE;
GRANT SELECT ON YNTWIST TO CHRIS;
GRANT SELECT ON YNTWIST TO DAVID;
GRANT SELECT ON YNTWIST TO FABIAN;
GRANT INSERT, SELECT, UPDATE ON YNTWIST TO GEORGE;
GRANT SELECT ON YNTWIST TO JOHAN;
GRANT SELECT ON YNTWIST TO JUDITH;
GRANT SELECT ON YNTWIST TO MONIQUE;
GRANT SELECT ON YNTWIST TO NATH;
GRANT SELECT ON YNTWIST TO PAUL;
GRANT SELECT ON YNTWIST TO PETER;
GRANT SELECT ON YNTWIST TO RALPH;
GRANT SELECT ON YNTWIST TO RONY;
GRANT INSERT, SELECT, UPDATE ON YNTWIST TO SHARON;
GRANT SELECT ON YNTWIST TO SUSAN;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPDELINNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPDESPNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPISSUENO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPPALLETNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPTRANSFERNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPWIPRCPTNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPYNBOXNO TO PUBLIC;


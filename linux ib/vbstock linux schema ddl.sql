SET SQL DIALECT 1;

/* CREATE DATABASE 'commander:/usr/interbase/vbstock6.gdb' PAGE_SIZE 4096

 DEFAULT CHARACTER SET  */

/* Add secondary files in comments 

CREATE SHADOW 1 '/d/shadow/vbstock.shd' MANUAL 

 */


/* Table: AGENT, Owner: SYSDBA */

CREATE TABLE AGENT 
(
  AGENTREF	CHAR(6) NOT NULL,
  DESCR	VARCHAR(40),
CONSTRAINT PAGENT PRIMARY KEY (AGENTREF)
);

/* Table: AGENTFREIGHT, Owner: SYSDBA */

CREATE TABLE AGENTFREIGHT 
(
  AGENTREF	CHAR(6) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  FREIGHTPERBOX	DOUBLE PRECISION NOT NULL,
  FREIGHTPERMETRE	DOUBLE PRECISION,
  FREIGHTPERDESPATCH	DOUBLE PRECISION,
CONSTRAINT PAGENTFREIGHT PRIMARY KEY (AGENTREF, VBWIDTH, FROMDATE)
);

/* Table: APORDDET, Owner: SYSDBA */

CREATE TABLE APORDDET 
(
  EXPDELDATE	TIMESTAMP NOT NULL,
  PRODREF	CHAR(6) NOT NULL,
  QTY	DOUBLE PRECISION NOT NULL,
  QTYRCVD	DOUBLE PRECISION NOT NULL,
  ORDLINECOMPLETE	CHAR(1) NOT NULL,
  VTORDNO	INTEGER NOT NULL,
CONSTRAINT PAPORDDET PRIMARY KEY (VTORDNO, PRODREF, EXPDELDATE)
);

/* Table: APORDHDR, Owner: SYSDBA */

CREATE TABLE APORDHDR 
(
  EXPDELDATE	TIMESTAMP,
  SUPREF	CHAR(6) NOT NULL,
  ORDERSENT	CHAR(1),
  DATEENT	TIMESTAMP default "now" NOT NULL,
  DATEMOD	TIMESTAMP default "now" NOT NULL,
  ORDEREDBY	CHAR(4) NOT NULL,
  AUTHBY	CHAR(4),
  USERENT	CHAR(4) NOT NULL,
  USERMOD	CHAR(4) NOT NULL,
  ORDAPPROX	CHAR(1),
  ORDDATE	TIMESTAMP,
  SUPORDNO	CHAR(15),
  VTORDNO	INTEGER NOT NULL,
CONSTRAINT PAPORDHDR PRIMARY KEY (VTORDNO)
);

/* Table: CALEMARDSTRIPS, Owner: SYSDBA */

CREATE TABLE CALEMARDSTRIPS 
(
  REF	INTEGER NOT NULL,
  FILEREF	CHAR(7),
  STRIPNO	INTEGER,
  DATEMANU	TIMESTAMP,
  VBWIDTH	INTEGER,
  STRUCOLLOT	CHAR(20),
  WARPGREIGEFIN	CHAR(14),
  WARPLOTNO	CHAR(10),
  WEFTLOTNO	CHAR(10),
  SHORTFAULT1WARP	INTEGER,
  SHORTFAULT2WEFT	INTEGER,
  SHORTFAULT3YARN	INTEGER,
  SHORTFAULT4YNSLUB	INTEGER,
  SHORTFAULT5TWOPICS	INTEGER,
  SHORTFAULT6FIN	INTEGER,
  SHORTFAULT7COLOUR1	INTEGER,
  SHORTFAULT8MISSPIC	INTEGER,
  SHORTFAULT9MISSEND	INTEGER,
  SHORTFAULT10COLOUR2	INTEGER,
  LONGFAULT1WARP	INTEGER,
  LONGFAULT2WEFT	INTEGER,
  LONGFAULT3YARN	INTEGER,
  LONGFAULT4YNSLUB	INTEGER,
  LONGFAULT5TWOPICS	INTEGER,
  LONGFAULT6FIN	INTEGER,
  LONGFAULT7COLOUR1	INTEGER,
  LONGFAULT8MISSPIC	INTEGER,
  LONGFAULT9MISSEND	INTEGER,
  LONGFAULT10COLOUR2	INTEGER,
  STRIPGROSSLENGTH	INTEGER,
  STRIPNETLENGTH	INTEGER,
  VBSTRU	CHAR(3),
  VBCOL	CHAR(3),
CONSTRAINT PCALEMARDSTRIPS PRIMARY KEY (REF)
);

/* Table: CTRLACCT, Owner: SYSDBA */

CREATE TABLE CTRLACCT 
(
  ACCNAME	CHAR(6) NOT NULL,
  DESCRIPTION	CHAR(60),
  EXTACCNAME	CHAR(9),
  QTY	DOUBLE PRECISION default 0,
CONSTRAINT PCTRLACCT PRIMARY KEY (ACCNAME)
);

/* Table: CURRENCY, Owner: SYSDBA */

CREATE TABLE CURRENCY 
(
  CURREF	CHAR(3) NOT NULL,
  DESCR	VARCHAR(20) NOT NULL,
  MULTDIV	CHAR(1),
  EXCHRATE	DOUBLE PRECISION,
  BEFOREAFTER	CHAR(1),
  SYMBOL	CHAR(3),
CONSTRAINT PCURRENCY PRIMARY KEY (CURREF)
);

/* Table: CUSTPART, Owner: SYSDBA */

CREATE TABLE CUSTPART 
(
  CUSTREF	CHAR(6) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	INTEGER NOT NULL,
  DESCR	CHAR(10),
  STYLEDESCR	CHAR(16),
  PARTNO	CHAR(11),
CONSTRAINT PCUSTPART PRIMARY KEY (CUSTREF, VBSTRU, VBCOL, VBFIN, VBWIDTH)
);

/* Table: DELBCB, Owner: SYSDBA */

CREATE TABLE DELBCB 
(
  DELNO	INTEGER NOT NULL,
  PALLETNO	SMALLINT NOT NULL,
  BCBNO	SMALLINT NOT NULL,
  QTY	DOUBLE PRECISION NOT NULL,
  BCBISSUED	CHAR(1),
  VALUERATING	DOUBLE PRECISION NOT NULL,
  VALUERATINGDATE	TIMESTAMP NOT NULL,
  STOCKAREA	INTEGER default 0,
  QTYISSUED	DOUBLE PRECISION,
  FACTORYNO	INTEGER default 1,
CONSTRAINT PDELBCB PRIMARY KEY (DELNO, PALLETNO, BCBNO)
);

/* Table: DELHEAD, Owner: SYSDBA */

CREATE TABLE DELHEAD 
(
  DELNO	INTEGER NOT NULL,
  EXPDELDATE	TIMESTAMP NOT NULL,
  SUPREF	CHAR(6) NOT NULL,
  DELNOTENO	CHAR(15),
  AGENT	CHAR(6),
  SUPORDNO	CHAR(15),
  CONTREF	CHAR(15),
  DELNOTEDATE	TIMESTAMP NOT NULL,
  PALLETSRCVD	SMALLINT NOT NULL,
  CARTONSRCVD	SMALLINT NOT NULL,
  QTYRCVD	DOUBLE PRECISION NOT NULL,
  DELDATE	TIMESTAMP NOT NULL,
  RCVDBY	CHAR(4) NOT NULL,
  NARRATIVE	VARCHAR(60),
  PRODREF	CHAR(6) NOT NULL,
  VTORDNO	INTEGER NOT NULL,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(4),
  DATEMOD	TIMESTAMP,
  USERMOD	CHAR(4),
CONSTRAINT PDELHEAD PRIMARY KEY (DELNO)
);

/* Table: DELPALLET, Owner: SYSDBA */

CREATE TABLE DELPALLET 
(
  DELNO	INTEGER NOT NULL,
  PALLETNO	SMALLINT NOT NULL,
  PRODREF	CHAR(6),
  BAGCARTBALEDEL	SMALLINT NOT NULL,
  QTYRCVD	DOUBLE PRECISION NOT NULL,
  MERGENO	CHAR(5),
  QTYISSUED	DOUBLE PRECISION NOT NULL,
  BCBISSUED	DOUBLE PRECISION NOT NULL,
  VALUERATING	DOUBLE PRECISION NOT NULL,
  VALUERATINGDATE	TIMESTAMP NOT NULL,
CONSTRAINT PDELPALLET PRIMARY KEY (DELNO, PALLETNO)
);

/* Table: DEPT, Owner: SYSDBA */

CREATE TABLE DEPT 
(
  DEPTREF	CHAR(6) NOT NULL,
  DESCR	VARCHAR(40),
  SUPPLIER	CHAR(1) default 'N',
CONSTRAINT PDEPT PRIMARY KEY (DEPTREF)
);

/* Table: DLSTATS, Owner: SYSDBA */

CREATE TABLE DLSTATS 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  CUSTREF	CHAR(6) NOT NULL,
  TOPCLIENT	CHAR(1),
  VBTYPE	CHAR(6),
CONSTRAINT PDLSTATS PRIMARY KEY (VBSTRU, VBCOL, CUSTREF)
);

/* Table: FABRICLOTNO, Owner: SYSDBA */

CREATE TABLE FABRICLOTNO 
(
  LOTNO	INTEGER NOT NULL,
  WARPLOTNO1	INTEGER NOT NULL,
  WARPLOTNO2	SMALLINT NOT NULL,
  WARPSINGLEMULTIPLE	CHAR(1) NOT NULL,
  WEFTLOTNO1	INTEGER NOT NULL,
  WEFTLOTNO2	SMALLINT NOT NULL,
  WEFTSINGLEMULTIPLE	CHAR(1) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  DATERCVD	TIMESTAMP,
  RCVDBY	CHAR(4) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
CONSTRAINT PFABRICLOTNO PRIMARY KEY (WARPLOTNO1, WARPLOTNO2, WARPSINGLEMULTIPLE, WEFTLOTNO1, WEFTLOTNO2, WEFTSINGLEMULTIPLE, VBSTRU, VBCOL, VBFIN)
);

/* Table: FINRCPTDAILY, Owner: SYSDBA */

CREATE TABLE FINRCPTDAILY 
(
  WARPNO	INTEGER NOT NULL,
  GREIGENO	SMALLINT NOT NULL,
  FINNO	SMALLINT NOT NULL,
  FABRICLOTNO	INTEGER NOT NULL,
  WARPLOTNO1	INTEGER NOT NULL,
  WARPLOTNO2	SMALLINT NOT NULL,
  WARPSINGLEMULTIPLE	CHAR(1) NOT NULL,
  WEFTLOTNO1	INTEGER NOT NULL,
  WEFTLOTNO2	SMALLINT NOT NULL,
  WEFTSINGLEMULTIPLE	CHAR(1) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  FINLENGTH	INTEGER,
  FINDATE	TIMESTAMP,
  COMMENT	CHAR(60),
  DATEMOD	TIMESTAMP DEFAULT 'now',
  USERMOD	CHAR(4),
CONSTRAINT PFINRCPTDAILY PRIMARY KEY (WARPNO, GREIGENO, FINNO)
);

/* Table: GREIGERCPT, Owner: SYSDBA */

CREATE TABLE GREIGERCPT 
(
  WARPNO	INTEGER NOT NULL,
  GREIGENO	SMALLINT NOT NULL,
  LOOMREF	CHAR(6) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  GREIGEDATE	TIMESTAMP,
  GREIGELENGTH	INTEGER,
  FINDATE	TIMESTAMP,
  FINLENGTH	INTEGER,
  STATUS	CHAR(1),
  COMMENT	CHAR(60),
  WEAVEDATE	TIMESTAMP,
  WEAVELENGTH	INTEGER,
  DATEMOD	TIMESTAMP DEFAULT 'now',
  USERMOD	CHAR(4),
CONSTRAINT PGREIGERCPT PRIMARY KEY (WARPNO, GREIGENO)
);

/* Table: GREIGERCPTDAILY, Owner: SYSDBA */

CREATE TABLE GREIGERCPTDAILY 
(
  WARPNO	INTEGER NOT NULL,
  GREIGENO	SMALLINT NOT NULL,
  GREIGEDATE	TIMESTAMP NOT NULL,
  LOOMREF	CHAR(6) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  GREIGELENGTH	INTEGER,
  COMMENT	CHAR(60),
  DATEMOD	TIMESTAMP DEFAULT 'now',
  USERMOD	CHAR(4),
CONSTRAINT PGREIGERCPTDAILY PRIMARY KEY (WARPNO, GREIGENO, GREIGEDATE)
);

/* Table: INITIALS, Owner: SYSDBA */

CREATE TABLE INITIALS 
(
  INITIALS	CHAR(4) NOT NULL,
  SURNAME	VARCHAR(20),
  FIRSTNAME	VARCHAR(10),
  EXT	SMALLINT,
  USERNAME	CHAR(8),
CONSTRAINT PINITIALS PRIMARY KEY (INITIALS)
);

/* Table: INVFROM, Owner: SYSDBA */

CREATE TABLE INVFROM 
(
  POSTALADD1	VARCHAR(20),
  POSTALADD2	VARCHAR(20),
  POSTALADD3	VARCHAR(20),
  POSTALADD4	VARCHAR(20),
  POSTALADD5	VARCHAR(20),
  PHONENO	VARCHAR(20),
  FAXNO	VARCHAR(20),
  INVREF	CHAR(6) NOT NULL,
  DESCR	VARCHAR(40),
  VATNO	CHAR(20),
CONSTRAINT PINVFROM PRIMARY KEY (INVREF)
);

/* Table: ISSUEDET, Owner: SYSDBA */

CREATE TABLE ISSUEDET 
(
  ISSUENO	INTEGER NOT NULL,
  DELNO	INTEGER NOT NULL,
  PALLETNO	SMALLINT NOT NULL,
  BCBNO	SMALLINT NOT NULL,
  DATEISSUED	TIMESTAMP NOT NULL,
  INITIALS	CHAR(4) NOT NULL,
  QTYISSUED	DOUBLE PRECISION NOT NULL,
  ISSUETO	CHAR(6) NOT NULL,
  BCBISSUED	DOUBLE PRECISION,
  PRODREF	CHAR(6),
  BATREF	INTEGER default 0,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(4),
CONSTRAINT PISSUEDET PRIMARY KEY (ISSUENO)
);

/* Table: LOOMSPEC, Owner: SYSDBA */

CREATE TABLE LOOMSPEC 
(
  LOOMREF	CHAR(6) NOT NULL,
  LOOMPOSN	SMALLINT NOT NULL,
  LOOMTYPE	CHAR(1) NOT NULL,
  LASTSEQNO	SMALLINT,
  LOMDOWNCHK	CHAR(1),
CONSTRAINT PLOOMSPEC PRIMARY KEY (LOOMREF)
);

/* Table: LOOMTYPE, Owner: SYSDBA */

CREATE TABLE LOOMTYPE 
(
  LOOMTYPE	CHAR(1) NOT NULL,
  NAME	CHAR(6),
  SHED	CHAR(6),
  WIDTH	INTEGER,
  MAXCOL	SMALLINT,
CONSTRAINT PLOOMTYPE PRIMARY KEY (LOOMTYPE)
);

/* Table: MANUAL_LOG, Owner: SYSDBA */

CREATE TABLE MANUAL_LOG 
(
  REPLNO	INTEGER NOT NULL,
  PUBDBNO	INTEGER NOT NULL,
  SUBDBNO	INTEGER NOT NULL,
  SEQNO	INTEGER NOT NULL,
  RELATIONNO	INTEGER NOT NULL,
  REPTYPE	CHAR(1),
  OLDKEY	VARCHAR(256),
  NEWKEY	VARCHAR(256),
  FORCECOUNT	INTEGER DEFAULT 0,
  ERROR_CODE	INTEGER,
  ERROR_MSG	VARCHAR(256),
 PRIMARY KEY (REPLNO, PUBDBNO, SUBDBNO, SEQNO)
);

/* Table: MEVBSALES, Owner: SYSDBA */

CREATE TABLE MEVBSALES 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  LOCALOVERSEAS	CHAR(1) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
CONSTRAINT PMEVBSALES PRIMARY KEY (VBSTRU, VBCOL, VBWIDTH, QLTY, LOCALOVERSEAS, YEARNO, PERIODNO)
);

/* Table: MEVBSLIT, Owner: SYSDBA */

CREATE TABLE MEVBSLIT 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
  GROSSLENGTH	DOUBLE PRECISION,
CONSTRAINT PVBSLIT PRIMARY KEY (VBSTRU, VBCOL, VBWIDTH, QLTY, YEARNO, PERIODNO)
);

/* Table: MEVBSTOCK, Owner: SYSDBA */

CREATE TABLE MEVBSTOCK 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
  GROSSLENGTH	DOUBLE PRECISION,
CONSTRAINT PMEVBSTOCK PRIMARY KEY (VBSTRU, VBCOL, VBWIDTH, QLTY, YEARNO, PERIODNO)
);

/* Table: MEVBSTOCKMIN, Owner: SYSDBA */

CREATE TABLE MEVBSTOCKMIN 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  STKMIN	INTEGER,
CONSTRAINT PMEVBSTOCKMIN PRIMARY KEY (VBSTRU, VBCOL, VBWIDTH, YEARNO, PERIODNO)
);

/* Table: MEVBWEAVING, Owner: SYSDBA */

CREATE TABLE MEVBWEAVING 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  GREIGEMANU	DOUBLE PRECISION default 0,
  GREIGEOPWIP	DOUBLE PRECISION default 0,
  GREIGECLWIP	DOUBLE PRECISION default 0,
  GREIGEPROD	 COMPUTED BY (greigemanu+
greigeopwip-greigeclwip),
  FINMANU	DOUBLE PRECISION default 0,
  FINOPWIP	DOUBLE PRECISION default 0,
  FINCLWIP	DOUBLE PRECISION default 0,
  FINPROD	 COMPUTED BY (finmanu+
finopwip-finclwip),
  GROSSSLIT	DOUBLE PRECISION default 0,
  NETSLIT	DOUBLE PRECISION default 0,
CONSTRAINT PMEVBWEAVING PRIMARY KEY (VBSTRU, VBCOL, YEARNO, PERIODNO)
);

/* Table: MEWARPSTATS, Owner: SYSDBA */

CREATE TABLE MEWARPSTATS 
(
  WARPNO	INTEGER NOT NULL,
  GREIGENO	SMALLINT NOT NULL,
  WARPTYPE	CHAR(2),
  WARPCOL	CHAR(3),
  VBSTRU	CHAR(3),
  VBCOL	CHAR(3),
  WARPLENGTH	INTEGER DEFAULT 0,
  WEAVELENGTH	INTEGER DEFAULT 0,
  WOVENLENGTH	INTEGER DEFAULT 0,
  FINISHEDLENGTH	INTEGER DEFAULT 0,
  GROSSSLITRETN	INTEGER default 0,
  NETSLITRETN	INTEGER default 0,
  NETSLITFIRSTSRETN	INTEGER default 0,
  ADJUST	INTEGER default 0,
  SAMPLES	INTEGER default 0,
  GROSSSLITRETY	INTEGER default 0,
  NETSLITRETY	INTEGER default 0,
  NETSLITFIRSTSRETY	INTEGER default 0,
  RESLIT	INTEGER default 0,
  STARTDATE	TIMESTAMP,
  ENDDATE	TIMESTAMP,
CONSTRAINT PMEWARPSTATS PRIMARY KEY (WARPNO, GREIGENO)
);

/* Table: MEWARPUSED, Owner: SYSDBA */

CREATE TABLE MEWARPUSED 
(
  WARPTYPE	CHAR(2) NOT NULL,
  WARPCOL	CHAR(3) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  WARPMANU	DOUBLE PRECISION default 0,
  WARPOPWIP	DOUBLE PRECISION default 0,
  WARPCLWIP	DOUBLE PRECISION default 0,
  WARPUSED	 COMPUTED BY (warpmanu+warpopwip
-warpclwip),
CONSTRAINT PMEWARPUSED PRIMARY KEY (WARPTYPE, WARPCOL, YEARNO, PERIODNO)
);

/* Table: MEWEFTUSED, Owner: SYSDBA */

CREATE TABLE MEWEFTUSED 
(
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  YNQLTY	CHAR(1) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  OPENSTK	DOUBLE PRECISION default 0,
  OPENWIP	DOUBLE PRECISION default 0,
  YARNRCVD	DOUBLE PRECISION default 0,
  DESPTOWIP	DOUBLE PRECISION default 0,
  RETURNED	DOUBLE PRECISION default 0,
  NETDESP	 COMPUTED BY (desptowip-returned),
  CLOSEWIP	DOUBLE PRECISION default 0,
  CLOSESTK	DOUBLE PRECISION default 0,
  WEFTUSED	 COMPUTED BY (netdesp+openwip-closewip),
  DESPATCHEDVREDE1	DOUBLE PRECISION default 0,
CONSTRAINT PMEWEFTUSED PRIMARY KEY (YNSTRU, YNTWIST, YNCOL, YNQLTY, YEARNO, PERIODNO)
);

/* Table: MEYARNANAL, Owner: SYSDBA */

CREATE TABLE MEYARNANAL 
(
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  YNQLTY	CHAR(1) NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  OPENSTK	DOUBLE PRECISION default 0,
  OPENWIP	DOUBLE PRECISION default 0,
  YNRCVD	DOUBLE PRECISION default 0,
  YNRETURNED	DOUBLE PRECISION default 0,
  ISSUEDLOOM01	DOUBLE PRECISION default 0,
  ISSUEDLOOM02	DOUBLE PRECISION default 0,
  ISSUEDLOOM03	DOUBLE PRECISION default 0,
  ISSUEDLOOM04	DOUBLE PRECISION default 0,
  ISSUEDLOOM05	DOUBLE PRECISION default 0,
  ISSUEDLOOM06	DOUBLE PRECISION default 0,
  ISSUEDADJUST	DOUBLE PRECISION default 0,
  ISSUEDVREDE1	DOUBLE PRECISION default 0,
  CLOSESTK	DOUBLE PRECISION default 0,
  CLOSEWIP	DOUBLE PRECISION default 0,
  YNSTRUGRP	CHAR(4),
  CLOSESTKCALC	 COMPUTED BY (openstk+openwip+ynrcvd+ynreturned-
issuedloom01-issuedloom02-issuedloom03-issuedloom04-
issuedloom05-issuedloom06-
issuedadjust-issuedvrede1),
CONSTRAINT PMEYARNANAL PRIMARY KEY (YNSTRU, YNTWIST, YNCOL, YNQLTY, YEARNO, PERIODNO)
);

/* Table: PIECERCPT, Owner: SYSDBA */

CREATE TABLE PIECERCPT 
(
  WARPNO	INTEGER NOT NULL,
  PIECENO	SMALLINT NOT NULL,
  GREIGENO	SMALLINT NOT NULL,
  FINNO	INTEGER NOT NULL,
CONSTRAINT PPIECERCPT PRIMARY KEY (WARPNO, PIECENO)
);

/* Table: PRICETYPE, Owner: SYSDBA */

CREATE TABLE PRICETYPE 
(
  PRICETYPE	CHAR(1) NOT NULL,
  DESCR	CHAR(10),
CONSTRAINT PPRICETYPE PRIMARY KEY (PRICETYPE)
);

/* Table: PRODCAT, Owner: SYSDBA */

CREATE TABLE PRODCAT 
(
  CATEGORY	CHAR(3) NOT NULL,
  DESCR	VARCHAR(40),
CONSTRAINT PPRODCAT PRIMARY KEY (CATEGORY)
);

/* Table: PRODSUP, Owner: SYSDBA */

CREATE TABLE PRODSUP 
(
  PRODREF	CHAR(6) NOT NULL,
  SUPREF	CHAR(6) NOT NULL,
  MATSUPREF	VARCHAR(12),
  MATSUPDESC	VARCHAR(30),
CONSTRAINT PPRODSUP PRIMARY KEY (PRODREF, SUPREF)
);

/* Table: PRODUCT, Owner: SYSDBA */

CREATE TABLE PRODUCT 
(
  PRODREF	CHAR(6) NOT NULL,
  CATEGORY	CHAR(3),
  DESCR	VARCHAR(30),
  REORDER	INTEGER,
  WARNING	INTEGER,
  MERGELEVEL	INTEGER,
  UNITWEIGHT	SMALLINT,
  MEASUNIT	CHAR(4),
  RCVUNIT	CHAR(4),
  FIXEDWEIGHT	CHAR(1),
  ONORDER	DOUBLE PRECISION,
  INSTOCK	DOUBLE PRECISION,
  LABELDESCR	CHAR(10),
  PURCHCATEGORY	CHAR(6),
  CTRLACCT	CHAR(6) NOT NULL,
  EXTPRODREF	CHAR(11),
CONSTRAINT PPRODUCT PRIMARY KEY (PRODREF)
);

/* Table: QLTYREASON, Owner: SYSDBA */

CREATE TABLE QLTYREASON 
(
  QLTYREASON	CHAR(2) NOT NULL,
  DESCR	CHAR(30),
  FIRSTQLTY	CHAR(1),
  RESLIT	CHAR(1),
CONSTRAINT PQLTYREASON PRIMARY KEY (QLTYREASON)
);

/* Table: REPL_LOG, Owner: SYSDBA */

CREATE TABLE REPL_LOG 
(
  REPLNO	INTEGER NOT NULL,
  PUBDBNO	INTEGER NOT NULL,
  SUBDBNO	INTEGER NOT NULL,
  SEQNO	INTEGER NOT NULL,
  RELATIONNO	INTEGER NOT NULL,
  REPTYPE	CHAR(1),
  OLDKEY	VARCHAR(256),
  NEWKEY	VARCHAR(256),
  FORCECOUNT	INTEGER DEFAULT 0,
 PRIMARY KEY (REPLNO, PUBDBNO, SUBDBNO, SEQNO)
);

/* Table: REPL_SEPARATOR, Owner: SYSDBA */

CREATE TABLE REPL_SEPARATOR 
(
  REPLNO	INTEGER NOT NULL,
  PUBDBNO	INTEGER NOT NULL,
  SUBDBNO	INTEGER NOT NULL,
  RELATIONNO	INTEGER NOT NULL,
  RELATIONNAME	VARCHAR(100) NOT NULL,
  SEP	CHAR(1),
 PRIMARY KEY (REPLNO, PUBDBNO, SUBDBNO, RELATIONNO)
);

/* Table: RMTXNDETCATEGORY, Owner: SYSDBA */

CREATE TABLE RMTXNDETCATEGORY 
(
  RMTXNDETCATEGORY	CHAR(6) NOT NULL,
  DESCRIPTION	CHAR(60),
CONSTRAINT PTXNDETCATEGORY PRIMARY KEY (RMTXNDETCATEGORY)
);

/* Table: SALEGROUP, Owner: SYSDBA */

CREATE TABLE SALEGROUP 
(
  SALEGROUP	CHAR(6) NOT NULL,
  DESCR	CHAR(30),
CONSTRAINT PSALEGROUP PRIMARY KEY (SALEGROUP)
);

/* Table: STDCOSTPRICES, Owner: SYSDBA */

CREATE TABLE STDCOSTPRICES 
(
  EXTPRODREF	CHAR(11) NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  STDPRICE	DOUBLE PRECISION,
CONSTRAINT PSTDCOSTPRICES PRIMARY KEY (EXTPRODREF, FROMDATE)
);

/* Table: STDQLTYVALUES, Owner: SYSDBA */

CREATE TABLE STDQLTYVALUES 
(
  PRODTYPE	CHAR(3) NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  VALUERATING	DOUBLE PRECISION,
CONSTRAINT PSTDQLTYVALUES PRIMARY KEY (PRODTYPE, QLTY)
);

/* Table: STRULOOM, Owner: SYSDBA */

CREATE TABLE STRULOOM 
(
  VBSTRU	CHAR(3) NOT NULL,
  LOOMTYPE	CHAR(1) NOT NULL,
  LOOMEFF	SMALLINT,
  PICSPERMIN	SMALLINT,
CONSTRAINT PSTRULOOM PRIMARY KEY (VBSTRU, LOOMTYPE)
);

/* Table: SUPPLIER, Owner: SYSDBA */

CREATE TABLE SUPPLIER 
(
  SUPREF	CHAR(6) NOT NULL,
  SUPACCNO	VARCHAR(15),
  VATNO	VARCHAR(15),
  STREETADD1	VARCHAR(20),
  STREETADD2	VARCHAR(20),
  STREETADD3	VARCHAR(20),
  STREETADD4	VARCHAR(20),
  STREETADD5	VARCHAR(20),
  POSTALADD1	VARCHAR(20),
  POSTALADD2	VARCHAR(20),
  POSTALADD3	VARCHAR(20),
  POSTALADD4	VARCHAR(20),
  POSTALADD5	VARCHAR(20),
  PHONE	VARCHAR(20),
  FAX	VARCHAR(20),
  TELEX	VARCHAR(20),
  CONTACT	VARCHAR(20),
  TERMS	CHAR(10),
  EARLYDISC	NUMERIC(9, 4),
  CURRENCY	CHAR(3),
  AGENTREF	CHAR(6),
  NARRATIVE	VARCHAR(100),
  EMAIL	VARCHAR(40),
  CELLPHONE	VARCHAR(20),
  SCTYPE	CHAR(2),
  DEPTLINK	CHAR(6),
  CRLIMIT	DOUBLE PRECISION default 0,
  SUPDESCR	VARCHAR(40),
  BANK	CHAR(30),
  BRANCH	CHAR(30),
  ACCNO	CHAR(30),
  COREG	CHAR(30),
  NEDLIBLIMIT	DOUBLE PRECISION default 0,
  CRGUARREQ	DOUBLE PRECISION default 0,
  CRGUARLIMIT	DOUBLE PRECISION default 0,
  CRGUARRET	CHAR(1) default 'N',
  CRGUARCOMMENT	CHAR(40),
  APPROXMSALES	DOUBLE PRECISION default 0,
  LOCALOVERSEAS	CHAR(1) NOT NULL,
  SALECLIENT	CHAR(1) default 'Y',
  PLACELOAD	VARCHAR(25),
  PLACEDISCHARGE	VARCHAR(25),
  INCOTERMS	VARCHAR(40),
  PLACEDESTLINE1	VARCHAR(25),
  PLACEDESTLINE2	VARCHAR(25),
  CARRIAGEBYLINE1	VARCHAR(25),
  CARRIAGEBYLINE2	VARCHAR(25),
  TERMSLINE1	VARCHAR(40),
  TERMSLINE2	VARCHAR(40),
  NOTIFYLINE1	VARCHAR(25),
  NOTIFYLINE2	VARCHAR(25),
  NOTIFYLINE3	VARCHAR(25),
  NOTIFYLINE4	VARCHAR(25),
  TARRIFFWIDE	VARCHAR(80),
  TARRIFFNARROW	VARCHAR(80),
  METRICORIMPERIAL	CHAR(1),
  SPECIALINFO	VARCHAR(1000),
CONSTRAINT PSUPPLIER PRIMARY KEY (SUPREF)
);

/* Table: TERMS, Owner: SYSDBA */

CREATE TABLE TERMS 
(
  TERMS	CHAR(10) NOT NULL,
  DESCR	VARCHAR(40),
  TERMSDAYS	INTEGER,
CONSTRAINT PTERMS PRIMARY KEY (TERMS)
);

/* Table: TREDUK, Owner: SYSDBA */

CREATE TABLE TREDUK 
(
  BOXNO	INTEGER NOT NULL,
  DESPNO	INTEGER,
  VTORDNO	INTEGER,
  DATERQD	TIMESTAMP,
CONSTRAINT PTREDUK PRIMARY KEY (BOXNO)
);

/* Table: TXNDET, Owner: SYSDBA */

CREATE TABLE TXNDET 
(
  REF	INTEGER NOT NULL,
  TXNNO	INTEGER,
  TXNCODE	CHAR(6),
  PRODTYPE	CHAR(3),
  EXTPRODREF	CHAR(11),
  QLTY	CHAR(1),
  QTY	DOUBLE PRECISION,
  TXNDATE	TIMESTAMP,
  ORIGTXNCODE	INTEGER,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(4),
CONSTRAINT PTXNDET PRIMARY KEY (REF)
);

/* Table: TXNDETHISTORY, Owner: SYSDBA */

CREATE TABLE TXNDETHISTORY 
(
  REF	INTEGER NOT NULL,
  TXNNO	INTEGER,
  TXNCODE	CHAR(6),
  PRODTYPE	CHAR(3),
  EXTPRODREF	CHAR(11),
  QLTY	CHAR(1),
  QTY	DOUBLE PRECISION,
  TXNDATE	TIMESTAMP,
  ORIGTXNCODE	INTEGER,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(8),
CONSTRAINT PTXNDETHISTORY PRIMARY KEY (REF)
);

/* Table: TXNDETSUMMARISE, Owner: SYSDBA */

CREATE TABLE TXNDETSUMMARISE 
(
  TXNCODE	CHAR(6) NOT NULL,
  PRODTYPE	CHAR(3) NOT NULL,
  EXTPRODREF	CHAR(11) NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  QTY	DOUBLE PRECISION,
CONSTRAINT PTXNDETSUMMARISE PRIMARY KEY (PRODTYPE, TXNCODE, EXTPRODREF, QLTY)
);

/* Table: TXNDETSUMMARY, Owner: SYSDBA */

CREATE TABLE TXNDETSUMMARY 
(
  EXTPRODREF	CHAR(11) NOT NULL,
  CATEGORY	CHAR(6),
CONSTRAINT PTXNDETSUMMARY PRIMARY KEY (EXTPRODREF)
);

/* Table: UNIT, Owner: SYSDBA */

CREATE TABLE UNIT 
(
  UNITREF	CHAR(4) NOT NULL,
  DESCR	VARCHAR(40),
CONSTRAINT PUNIT PRIMARY KEY (UNITREF)
);

/* Table: VBAVESALESTEMP, Owner: SYSDBA */

CREATE TABLE VBAVESALESTEMP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  NETLENGTH	INTEGER,
  ORIGNETLENGTH	INTEGER,
  STOCKPRICE	DOUBLE PRECISION,
  STOCKVALUE	DOUBLE PRECISION,
  CONTRACTSELLPRICE	DOUBLE PRECISION,
  CONTRACTSELLVALUE	DOUBLE PRECISION,
  ORIGNETLENGTHFW	DOUBLE PRECISION,
  TOP60FLAG	CHAR(1),
  ACTUALSTOCK	DOUBLE PRECISION,
  ACTUALSTOCKVALUE	DOUBLE PRECISION,
  HDCHUK	CHAR(1),
  HDDHUK	CHAR(1),
  HBNHUK	CHAR(1),
  ARENUK	CHAR(1),
  FBNHUK	CHAR(1),
  FFRLDM	CHAR(1),
  CMKRBE	CHAR(1),
  LHCAUS	CHAR(1),
  HDFLUS	CHAR(1),
  AVSYAU	CHAR(1),
  CMPAMA	CHAR(1),
  ONORDER	INTEGER,
CONSTRAINT PVBAVESALESTEMP PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH)
);

/* Table: VBBOXDETAILS, Owner: SYSDBA */

CREATE TABLE VBBOXDETAILS 
(
  VBSTRU	CHAR(3),
  VBCOL	CHAR(3),
  VBWIDTH	SMALLINT,
  BOXNO	INTEGER NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
  VTORDNO	INTEGER,
  PALLETNO	INTEGER,
  LOTNO	INTEGER NOT NULL,
  ALLOCATED	DOUBLE PRECISION,
  DATERQD	TIMESTAMP,
  VBFIN	CHAR(2),
  ALLOWANCE	DOUBLE PRECISION,
  QLTYREASON	CHAR(2),
CONSTRAINT PVBBOXDETAILS PRIMARY KEY (LOTNO, BOXNO)
);

/* Table: VBBOXESINSTOCK, Owner: SYSDBA */

CREATE TABLE VBBOXESINSTOCK 
(
  VBSTRU	CHAR(3),
  VBCOL	CHAR(3),
  VBWIDTH	SMALLINT,
  QLTY	CHAR(1),
  BOXNO	INTEGER NOT NULL,
  LOTNO	INTEGER,
  NETLENGTH	DOUBLE PRECISION,
  VTORDNO	INTEGER,
  DATERQD	TIMESTAMP,
  PALLETNO	INTEGER,
  DESPNO	INTEGER,
  LABELSTRU	CHAR(1),
  ROWNO	INTEGER default 0,
  VBFIN	CHAR(2),
  QLTYREASON	CHAR(2),
CONSTRAINT PVBBOXESINSTOCK PRIMARY KEY (BOXNO)
);

/* Table: VBCOLOURSELECTION, Owner: SYSDBA */

CREATE TABLE VBCOLOURSELECTION 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  CUSTREF	CHAR(6) NOT NULL,
  DUMMYFIELD	INTEGER,
CONSTRAINT PVBCOLOURSELECTION PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH, CUSTREF)
);

/* Table: VBDAILYANALYSE, Owner: SYSDBA */

CREATE TABLE VBDAILYANALYSE 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	INTEGER NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  DUMMYFIELD	INTEGER,
CONSTRAINT PVBDAILYANALYSE PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH)
);

/* Table: VBDAILYBALANCE, Owner: SYSDBA */

CREATE TABLE VBDAILYBALANCE 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	INTEGER NOT NULL,
  BALANCEDATE	TIMESTAMP NOT NULL,
  AVESALES	INTEGER,
  NETLENGTH	INTEGER,
CONSTRAINT PVBDAILYBALANCE PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH, BALANCEDATE)
);

/* Table: VBDESPHDR, Owner: SYSDBA */

CREATE TABLE VBDESPHDR 
(
  DESPNO	INTEGER NOT NULL,
  CUSTREF	CHAR(6),
  DESPDATE	TIMESTAMP,
  DESPBY	CHAR(4),
  BOXES	SMALLINT,
  NETLENGTHDESP	DOUBLE PRECISION,
  TRANSBY	CHAR(6),
  WAYBILLNO	VARCHAR(25),
  SEALS	VARCHAR(25),
  CONTREF	VARCHAR(25),
  VTCONTREF	VARCHAR(25),
  EXPORTER	CHAR(6) NOT NULL,
  CUSTORDNO	VARCHAR(20),
  DESPSENT	CHAR(1),
  PALLETS	SMALLINT,
  PHYSICALPALLETS	SMALLINT,
  WAYBILLNO2	CHAR(25),
  INVDATE	TIMESTAMP,
  CONSIGNMENT	CHAR(1) NOT NULL,
  IGNOREINMINCALC	CHAR(1) default 'N',
CONSTRAINT PVBDESPHDR PRIMARY KEY (DESPNO)
);

/* Table: VBDESPSTEMP, Owner: SYSDBA */

CREATE TABLE VBDESPSTEMP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  NETLENGTH	INTEGER,
CONSTRAINT PVBDESPSTEMP PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH)
);

/* Table: VBFIN, Owner: SYSDBA */

CREATE TABLE VBFIN 
(
  VBFIN	CHAR(2) NOT NULL,
  DESCRIPTION	CHAR(30),
CONSTRAINT PVBFIN PRIMARY KEY (VBFIN)
);

/* Table: VBINVDET, Owner: SYSDBA */

CREATE TABLE VBINVDET 
(
  DESPNO	INTEGER NOT NULL,
  INVNO	INTEGER NOT NULL,
  LINENO	INTEGER NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  METRICWIDTH	INTEGER NOT NULL,
  IMPERIALWIDTH	DOUBLE PRECISION,
  QLTY	CHAR(1) NOT NULL,
  VBSTRUDESCR	CHAR(20),
  LABELDESCR	CHAR(8),
  CUSTPARTSTYLEDESCR	CHAR(16),
  CUSTPARTDESCR	CHAR(16),
  VTORDNO	INTEGER,
  GROSSLENGTHMETRES	DOUBLE PRECISION,
  NETLENGTHMETRES	DOUBLE PRECISION,
  NETLENGTHYARDS	DOUBLE PRECISION,
  PRICETYPE	CHAR(3),
  LOC_VALUE	DOUBLE PRECISION,
  BOXES	INTEGER,
  LOC_FREIGHT	DOUBLE PRECISION,
  CUSTORDNO	CHAR(20),
  LOC_PRICE	DOUBLE PRECISION,
  OVERRIDE_LOC_PRICE	DOUBLE PRECISION,
  ITEMNO	INTEGER,
CONSTRAINT PVBINVDET PRIMARY KEY (DESPNO, INVNO, LINENO)
);

/* Table: VBINVHDR, Owner: SYSDBA */

CREATE TABLE VBINVHDR 
(
  DESPNO	INTEGER NOT NULL,
  INVNO	INTEGER NOT NULL,
  CUSTREF	CHAR(6) NOT NULL,
  INVDATE	TIMESTAMP,
  TERMSFROMDATE	TIMESTAMP,
  TERMSDAYS	INTEGER,
  CURRENCY	CHAR(3),
  AGENTREF	CHAR(6),
  OURREF	VARCHAR(40),
  YOURREF	VARCHAR(40),
  EXPORTCODE	CHAR(10),
  PALLETS	INTEGER,
  BOXES	INTEGER,
  NETLENGTH	DOUBLE PRECISION,
  LOC_TOTAL	DOUBLE PRECISION,
  ACC_TOTAL	DOUBLE PRECISION,
  PALLETPRICE	DOUBLE PRECISION,
  PALLETVALUE	DOUBLE PRECISION,
  FREIGHTDOCUMENTATION	DOUBLE PRECISION,
  FREIGHTBOXES	DOUBLE PRECISION,
  LOC_GRAND_TOTAL	DOUBLE PRECISION,
  ACC_GRAND_TOTAL	DOUBLE PRECISION,
  VATRATE	DOUBLE PRECISION,
  VATAMT	DOUBLE PRECISION,
  EXCHRATE	DOUBLE PRECISION,
  INVBY	CHAR(4),
  INVSENT	CHAR(1),
  PHYSICALPALLETS	INTEGER,
  METRICORIMPERIAL	CHAR(1),
  LOCALOVERSEAS	CHAR(1),
  ADDITIONALLOCAMT	DOUBLE PRECISION,
  ADDITIONALACCAMT	DOUBLE PRECISION,
  ADDITIONALDETAILS	CHAR(60),
CONSTRAINT PVBINVHDR PRIMARY KEY (DESPNO, INVNO)
);

/* Table: VBINVHDREXTRA, Owner: SYSDBA */

CREATE TABLE VBINVHDREXTRA 
(
  DESPNO	INTEGER NOT NULL,
  INVNO	INTEGER NOT NULL,
  STREETADD1	VARCHAR(20),
  STREETADD2	VARCHAR(20),
  STREETADD3	VARCHAR(20),
  STREETADD4	VARCHAR(20),
  STREETADD5	VARCHAR(20),
  POSTALADD1	VARCHAR(20),
  POSTALADD2	VARCHAR(20),
  POSTALADD3	VARCHAR(20),
  POSTALADD4	VARCHAR(20),
  POSTALADD5	VARCHAR(20),
  PLACELOAD	VARCHAR(25),
  PLACEDISCHARGE	VARCHAR(25),
  INCOTERMS	VARCHAR(40),
  PLACEDESTLINE1	VARCHAR(25),
  PLACEDESTLINE2	VARCHAR(25),
  CARRIAGEBYLINE1	VARCHAR(25),
  CARRIAGEBYLINE2	VARCHAR(25),
  TERMSLINE1	VARCHAR(40),
  TERMSLINE2	VARCHAR(40),
  NOTIFYLINE1	VARCHAR(25),
  NOTIFYLINE2	VARCHAR(25),
  NOTIFYLINE3	VARCHAR(25),
  TARRIFFWIDE	VARCHAR(80),
  TARRIFFNARROW	VARCHAR(80),
  SPECIALINFO	VARCHAR(1000),
CONSTRAINT VBINVHDREXTRA PRIMARY KEY (DESPNO, INVNO)
);

/* Table: VBLABELSTRU, Owner: SYSDBA */

CREATE TABLE VBLABELSTRU 
(
  LABELSTRU	CHAR(2) NOT NULL,
  DESCR	CHAR(40),
  STRIPSPERCARTON	INTEGER,
  LABELSPERSTRIP	INTEGER,
CONSTRAINT PVBLABELSTRU PRIMARY KEY (LABELSTRU)
);

/* Table: VBLSP, Owner: SYSDBA */

CREATE TABLE VBLSP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  PRICETYPE	CHAR(1) NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  PRICE	DOUBLE PRECISION,
  VBFIN	CHAR(2) NOT NULL,
CONSTRAINT PVBLSP PRIMARY KEY (VBSTRU, VBFIN, VBWIDTH, QLTY, PRICETYPE, FROMDATE, TODATE)
);

/* Table: VBLSPSTD, Owner: SYSDBA */

CREATE TABLE VBLSPSTD 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  PRICE	DOUBLE PRECISION,
  VBFIN	CHAR(2) NOT NULL,
CONSTRAINT PVBLSPSTD PRIMARY KEY (VBSTRU, VBFIN, VBWIDTH, FROMDATE, TODATE)
);

/* Table: VBMAKE, Owner: SYSDBA */

CREATE TABLE VBMAKE 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  WARPTYPE	CHAR(2),
  MIN127	INTEGER default 0,
  STK127	INTEGER default 0,
  ORD127	INTEGER default 0,
  PORD127	FLOAT default 0,
  PSTK127	FLOAT default 0,
  MIN89	INTEGER default 0,
  STK89	INTEGER default 0,
  ORD89	INTEGER default 0,
  PORD89	FLOAT default 0,
  PSTK89	FLOAT default 0,
  MIN2070	INTEGER default 0,
  STK2070	INTEGER default 0,
  ORD2070	INTEGER default 0,
  PORD2070	FLOAT default 0,
  PSTK2070	FLOAT default 0,
  PTOTORD	FLOAT default 0,
  PTOTSTK	FLOAT default 0,
  PTOTRQD	FLOAT default 0,
  WWIP	FLOAT default 0,
  VWIP	FLOAT default 0,
  FWIP	FLOAT default 0,
  WARPCOL	CHAR(3),
  PCSRQD	FLOAT default 0,
  WEFT1STRU	CHAR(4),
  WEFT1TWIST	CHAR(2),
  WEFT1COL	CHAR(3),
  PCEWFT1WEIGHT	FLOAT default 0,
  WFT1YNRQD	FLOAT default 0,
  WFT1YNSTOCK	FLOAT default 0,
  WFT1TOSPIN	FLOAT default 0,
  FWSLITMRQD	FLOAT default 0,
  FWWARPMRQD	FLOAT default 0,
  PCEWARPLENGTH	FLOAT default 0,
  PCEFINLENGTH	FLOAT default 0,
  SALE89	FLOAT default 0,
  SALE127	FLOAT default 0,
  SALE2070	FLOAT default 0,
  FIRSTSALEDATE	TIMESTAMP,
  ALLOC127	INTEGER default 0,
  ALLOC89	INTEGER default 0,
  ALLOC2070	INTEGER default 0,
  REMAIN127	INTEGER default 0,
  REMAIN89	INTEGER default 0,
  REMAIN2070	INTEGER default 0,
  DIVBYDAYS	INTEGER default 0,
  MONTHSSALES	SMALLINT default 0,
  VBFIN	CHAR(2) NOT NULL,
CONSTRAINT PVBMAKE PRIMARY KEY (VBSTRU, VBCOL, VBFIN)
);

/* Table: VBMAKE_FIN, Owner: SYSDBA */

CREATE TABLE VBMAKE_FIN 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  MIN127	INTEGER default 0,
  STK127	INTEGER default 0,
  ORD127	INTEGER default 0,
  PORD127	FLOAT default 0,
  PSTK127	FLOAT default 0,
  MIN89	INTEGER default 0,
  STK89	INTEGER default 0,
  ORD89	INTEGER default 0,
  PORD89	FLOAT default 0,
  PSTK89	FLOAT default 0,
  MIN2070	INTEGER default 0,
  STK2070	INTEGER default 0,
  ORD2070	INTEGER default 0,
  PORD2070	FLOAT default 0,
  PSTK2070	FLOAT default 0,
  PTOTORD	FLOAT default 0,
  PTOTSTK	FLOAT default 0,
  PTOTRQD	FLOAT default 0,
  FWIP	FLOAT default 0,
  FWSLITMRQD	FLOAT default 0,
  PCEWARPLENGTH	FLOAT default 0,
  PCEFINLENGTH	FLOAT default 0,
  FWWARPMRQD	FLOAT default 0,
  SALE89	FLOAT default 0,
  SALE127	FLOAT default 0,
  SALE2070	FLOAT default 0,
  FIRSTSALEDATE	TIMESTAMP,
  ALLOC127	INTEGER default 0,
  ALLOC89	INTEGER default 0,
  ALLOC2070	INTEGER default 0,
  REMAIN127	INTEGER default 0,
  REMAIN89	INTEGER default 0,
  REMAIN2070	INTEGER default 0,
  DIVBYDAYS	INTEGER default 0,
  MONTHSSALES	SMALLINT default 0,
  AVESALE89	DOUBLE PRECISION default 0,
  AVESALE127	DOUBLE PRECISION default 0,
  AVESALE2070	DOUBLE PRECISION default 0,
  MINCALCMULTIPLIER89	DOUBLE PRECISION DEFAULT 0,
  MINCALCMULTIPLIER127	DOUBLE PRECISION DEFAULT 0,
  MINCALCMULTIPLIER2070	DOUBLE PRECISION DEFAULT 0,
  MAKESTKMULTIPLIER89	DOUBLE PRECISION DEFAULT 0,
  MAKESTKMULTIPLIER127	DOUBLE PRECISION DEFAULT 0,
  MAKESTKMULTIPLIER2070	DOUBLE PRECISION DEFAULT 0,
  PCSMIN127	DOUBLE PRECISION default 0,
  PCSAVESALE127	DOUBLE PRECISION default 0,
  PCSSTK127	DOUBLE PRECISION default 0,
  PCSORD127	DOUBLE PRECISION default 0,
  PCSALLOC127	DOUBLE PRECISION default 0,
  PCSREMAIN127	DOUBLE PRECISION default 0,
  PCSMIN89	DOUBLE PRECISION default 0,
  PCSAVESALE89	DOUBLE PRECISION default 0,
  PCSSTK89	DOUBLE PRECISION default 0,
  PCSORD89	DOUBLE PRECISION default 0,
  PCSALLOC89	DOUBLE PRECISION default 0,
  PCSREMAIN89	DOUBLE PRECISION default 0,
  PCSMIN2070	DOUBLE PRECISION default 0,
  PCSAVESALE2070	DOUBLE PRECISION default 0,
  PCSSTK2070	DOUBLE PRECISION default 0,
  PCSORD2070	DOUBLE PRECISION default 0,
  PCSALLOC2070	DOUBLE PRECISION default 0,
  PCSREMAIN2070	DOUBLE PRECISION default 0,
  PCSFWIP	DOUBLE PRECISION default 0,
  PCSPORD127	FLOAT DEFAULT 0,
  PCSPSTK127	FLOAT DEFAULT 0,
  PCSPORD89	FLOAT DEFAULT 0,
  PCSPSTK89	FLOAT DEFAULT 0,
  PCSPORD2070	FLOAT DEFAULT 0,
  PCSPSTK2070	FLOAT DEFAULT 0,
  PCSPTOTORD	FLOAT DEFAULT 0,
  PCSPTOTSTK	FLOAT DEFAULT 0,
  PCSPTOTRQD	FLOAT DEFAULT 0,
  PCSFWSLITMRQD	FLOAT DEFAULT 0,
  PCSFWWARPMRQD	FLOAT DEFAULT 0,
  STK2070OK	INTEGER DEFAULT 0,
  STK2070RESLIT	INTEGER DEFAULT 0,
  PCSSTK2070OK	FLOAT DEFAULT 0,
  PCSSTK2070RESLIT	FLOAT DEFAULT 0,
  PCSPHELDORD127	FLOAT DEFAULT 0,
  PCSPHELDORD89	FLOAT DEFAULT 0,
  PCSPHELDORD2070	FLOAT DEFAULT 0,
  PCSPNOTHELDORD127	FLOAT DEFAULT 0,
  PCSPNOTHELDORD89	FLOAT DEFAULT 0,
  PCSPNOTHELDORD2070	FLOAT DEFAULT 0,
  DISCON127	CHAR(1) default 'N',
  DISCON89	CHAR(1) default 'N',
  DISCON2070	CHAR(1) default 'N',
CONSTRAINT PVBMAKE_FIN PRIMARY KEY (VBSTRU, VBCOL, VBFIN)
);

/* Table: VBMAKE_FINBAK, Owner: SYSDBA */

CREATE TABLE VBMAKE_FINBAK 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  MIN127	INTEGER DEFAULT 0,
  STK127	INTEGER DEFAULT 0,
  ORD127	INTEGER DEFAULT 0,
  PORD127	FLOAT DEFAULT 0,
  PSTK127	FLOAT DEFAULT 0,
  MIN89	INTEGER DEFAULT 0,
  STK89	INTEGER DEFAULT 0,
  ORD89	INTEGER DEFAULT 0,
  PORD89	FLOAT DEFAULT 0,
  PSTK89	FLOAT DEFAULT 0,
  MIN2070	INTEGER DEFAULT 0,
  STK2070	INTEGER DEFAULT 0,
  ORD2070	INTEGER DEFAULT 0,
  PORD2070	FLOAT DEFAULT 0,
  PSTK2070	FLOAT DEFAULT 0,
  PTOTORD	FLOAT DEFAULT 0,
  PTOTSTK	FLOAT DEFAULT 0,
  PTOTRQD	FLOAT DEFAULT 0,
  FWIP	FLOAT DEFAULT 0,
  FWSLITMRQD	FLOAT DEFAULT 0,
  PCEWARPLENGTH	FLOAT DEFAULT 0,
  PCEFINLENGTH	FLOAT DEFAULT 0,
  FWWARPMRQD	FLOAT DEFAULT 0,
  SALE89	FLOAT DEFAULT 0,
  SALE127	FLOAT DEFAULT 0,
  SALE2070	FLOAT DEFAULT 0,
  FIRSTSALEDATE	TIMESTAMP,
  ALLOC127	INTEGER DEFAULT 0,
  ALLOC89	INTEGER DEFAULT 0,
  ALLOC2070	INTEGER DEFAULT 0,
  REMAIN127	INTEGER DEFAULT 0,
  REMAIN89	INTEGER DEFAULT 0,
  REMAIN2070	INTEGER DEFAULT 0,
  DIVBYDAYS	INTEGER DEFAULT 0,
  MONTHSSALES	SMALLINT DEFAULT 0
);

/* Table: VBMAKE_FINBAK1, Owner: SYSDBA */

CREATE TABLE VBMAKE_FINBAK1 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  MIN127	INTEGER DEFAULT 0,
  STK127	INTEGER DEFAULT 0,
  ORD127	INTEGER DEFAULT 0,
  PORD127	FLOAT DEFAULT 0,
  PSTK127	FLOAT DEFAULT 0,
  MIN89	INTEGER DEFAULT 0,
  STK89	INTEGER DEFAULT 0,
  ORD89	INTEGER DEFAULT 0,
  PORD89	FLOAT DEFAULT 0,
  PSTK89	FLOAT DEFAULT 0,
  MIN2070	INTEGER DEFAULT 0,
  STK2070	INTEGER DEFAULT 0,
  ORD2070	INTEGER DEFAULT 0,
  PORD2070	FLOAT DEFAULT 0,
  PSTK2070	FLOAT DEFAULT 0,
  PTOTORD	FLOAT DEFAULT 0,
  PTOTSTK	FLOAT DEFAULT 0,
  PTOTRQD	FLOAT DEFAULT 0,
  FWIP	FLOAT DEFAULT 0,
  FWSLITMRQD	FLOAT DEFAULT 0,
  PCEWARPLENGTH	FLOAT DEFAULT 0,
  PCEFINLENGTH	FLOAT DEFAULT 0,
  FWWARPMRQD	FLOAT DEFAULT 0,
  SALE89	FLOAT DEFAULT 0,
  SALE127	FLOAT DEFAULT 0,
  SALE2070	FLOAT DEFAULT 0,
  FIRSTSALEDATE	TIMESTAMP,
  ALLOC127	INTEGER DEFAULT 0,
  ALLOC89	INTEGER DEFAULT 0,
  ALLOC2070	INTEGER DEFAULT 0,
  REMAIN127	INTEGER DEFAULT 0,
  REMAIN89	INTEGER DEFAULT 0,
  REMAIN2070	INTEGER DEFAULT 0,
  DIVBYDAYS	INTEGER DEFAULT 0,
  MONTHSSALES	SMALLINT DEFAULT 0
);

/* Table: VBMAKE_FINTEMP, Owner: SYSDBA */

CREATE TABLE VBMAKE_FINTEMP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  MIN127	INTEGER DEFAULT 0,
  STK127	INTEGER DEFAULT 0,
  ORD127	INTEGER DEFAULT 0,
  PORD127	FLOAT DEFAULT 0,
  PSTK127	FLOAT DEFAULT 0,
  MIN89	INTEGER DEFAULT 0,
  STK89	INTEGER DEFAULT 0,
  ORD89	INTEGER DEFAULT 0,
  PORD89	FLOAT DEFAULT 0,
  PSTK89	FLOAT DEFAULT 0,
  MIN2070	INTEGER DEFAULT 0,
  STK2070	INTEGER DEFAULT 0,
  ORD2070	INTEGER DEFAULT 0,
  PORD2070	FLOAT DEFAULT 0,
  PSTK2070	FLOAT DEFAULT 0,
  PTOTORD	FLOAT DEFAULT 0,
  PTOTSTK	FLOAT DEFAULT 0,
  PTOTRQD	FLOAT DEFAULT 0,
  FWIP	FLOAT DEFAULT 0,
  FWSLITMRQD	FLOAT DEFAULT 0,
  PCEWARPLENGTH	FLOAT DEFAULT 0,
  PCEFINLENGTH	FLOAT DEFAULT 0,
  FWWARPMRQD	FLOAT DEFAULT 0,
  SALE89	FLOAT DEFAULT 0,
  SALE127	FLOAT DEFAULT 0,
  SALE2070	FLOAT DEFAULT 0,
  FIRSTSALEDATE	TIMESTAMP,
  ALLOC127	INTEGER DEFAULT 0,
  ALLOC89	INTEGER DEFAULT 0,
  ALLOC2070	INTEGER DEFAULT 0,
  REMAIN127	INTEGER DEFAULT 0,
  REMAIN89	INTEGER DEFAULT 0,
  REMAIN2070	INTEGER DEFAULT 0,
  DIVBYDAYS	INTEGER DEFAULT 0,
  MONTHSSALES	SMALLINT DEFAULT 0,
  AVESALE89	DOUBLE PRECISION DEFAULT 0,
  AVESALE127	DOUBLE PRECISION DEFAULT 0,
  AVESALE2070	DOUBLE PRECISION DEFAULT 0,
  MINCALCMULTIPLIER89	DOUBLE PRECISION DEFAULT 0,
  MINCALCMULTIPLIER127	DOUBLE PRECISION DEFAULT 0,
  MINCALCMULTIPLIER2070	DOUBLE PRECISION DEFAULT 0,
  MAKESTKMULTIPLIER89	DOUBLE PRECISION DEFAULT 0,
  MAKESTKMULTIPLIER127	DOUBLE PRECISION DEFAULT 0,
  MAKESTKMULTIPLIER2070	DOUBLE PRECISION DEFAULT 0,
  PCSMIN127	DOUBLE PRECISION DEFAULT 0,
  PCSAVESALE127	DOUBLE PRECISION DEFAULT 0,
  PCSSTK127	DOUBLE PRECISION DEFAULT 0,
  PCSORD127	DOUBLE PRECISION DEFAULT 0,
  PCSALLOC127	DOUBLE PRECISION DEFAULT 0,
  PCSREMAIN127	DOUBLE PRECISION DEFAULT 0,
  PCSMIN89	DOUBLE PRECISION DEFAULT 0,
  PCSAVESALE89	DOUBLE PRECISION DEFAULT 0,
  PCSSTK89	DOUBLE PRECISION DEFAULT 0,
  PCSORD89	DOUBLE PRECISION DEFAULT 0,
  PCSALLOC89	DOUBLE PRECISION DEFAULT 0,
  PCSREMAIN89	DOUBLE PRECISION DEFAULT 0,
  PCSMIN2070	DOUBLE PRECISION DEFAULT 0,
  PCSAVESALE2070	DOUBLE PRECISION DEFAULT 0,
  PCSSTK2070	DOUBLE PRECISION DEFAULT 0,
  PCSORD2070	DOUBLE PRECISION DEFAULT 0,
  PCSALLOC2070	DOUBLE PRECISION DEFAULT 0,
  PCSREMAIN2070	DOUBLE PRECISION DEFAULT 0,
  PCSFWIP	DOUBLE PRECISION DEFAULT 0,
  PCSPORD127	FLOAT DEFAULT 0,
  PCSPSTK127	FLOAT DEFAULT 0,
  PCSPORD89	FLOAT DEFAULT 0,
  PCSPSTK89	FLOAT DEFAULT 0,
  PCSPORD2070	FLOAT DEFAULT 0,
  PCSPSTK2070	FLOAT DEFAULT 0,
  PCSPTOTORD	FLOAT DEFAULT 0,
  PCSPTOTSTK	FLOAT DEFAULT 0,
  PCSPTOTRQD	FLOAT DEFAULT 0,
  PCSFWSLITMRQD	FLOAT DEFAULT 0,
  PCSFWWARPMRQD	FLOAT DEFAULT 0,
  STK2070OK	INTEGER DEFAULT 0,
  STK2070RESLIT	INTEGER DEFAULT 0,
  PCSSTK2070OK	FLOAT DEFAULT 0,
  PCSSTK2070RESLIT	FLOAT DEFAULT 0,
  PCSPHELDORD127	FLOAT DEFAULT 0,
  PCSPHELDORD89	FLOAT DEFAULT 0,
  PCSPHELDORD2070	FLOAT DEFAULT 0,
  PCSPNOTHELDORD127	FLOAT DEFAULT 0,
  PCSPNOTHELDORD89	FLOAT DEFAULT 0,
  PCSPNOTHELDORD2070	FLOAT DEFAULT 0,
  DISCON127	CHAR(1) DEFAULT 'N',
  DISCON89	CHAR(1) DEFAULT 'N',
  DISCON2070	CHAR(1) DEFAULT 'N',
CONSTRAINT PVBMAKE_FINTEMP PRIMARY KEY (VBSTRU, VBCOL, VBFIN)
);

/* Table: VBMAKE_FIN_STAT, Owner: SYSDBA */

CREATE TABLE VBMAKE_FIN_STAT 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  STATAVESALE89	DOUBLE PRECISION DEFAULT 0,
  STATAVESALE127	DOUBLE PRECISION DEFAULT 0,
  STATAVESALE2070	DOUBLE PRECISION DEFAULT 0,
  STATPCSAVESALE89	DOUBLE PRECISION DEFAULT 0,
  STATPCSAVESALE127	DOUBLE PRECISION DEFAULT 0,
  STATPCSAVESALE2070	DOUBLE PRECISION DEFAULT 0,
CONSTRAINT PVBMAKE_FIN_STAT PRIMARY KEY (VBSTRU, VBCOL, VBFIN)
);

/* Table: VBMAKE_WARP, Owner: SYSDBA */

CREATE TABLE VBMAKE_WARP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  FWWARPMRQD	FLOAT default 0,
  VWIP	FLOAT default 0,
  WWIP	FLOAT default 0,
  FWWARPMTOPLAN	FLOAT default 0,
  PCEWARPLENGTH	FLOAT default 0,
  PCSRQDTOPLAN	FLOAT default 0,
  PCEWFT1WEIGHT	FLOAT default 0,
  WFT1YNRQD	FLOAT default 0,
  WARPTYPE	CHAR(2),
  WARPCOL	CHAR(3),
  WEFT1STRU	CHAR(4),
  WEFT1TWIST	CHAR(2),
  WEFT1COL	CHAR(3),
  WARP1STRU	CHAR(4),
  WARP1TWIST	CHAR(2),
  WARP1COL	CHAR(3),
  PCSWWIP	DOUBLE PRECISION default 0,
  PCSVWIP	DOUBLE PRECISION default 0,
CONSTRAINT PVBMAKE_WARP PRIMARY KEY (VBSTRU, VBCOL)
);

/* Table: VBMAKE_WARPTEMP, Owner: SYSDBA */

CREATE TABLE VBMAKE_WARPTEMP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  FWWARPMRQD	FLOAT DEFAULT 0,
  VWIP	FLOAT DEFAULT 0,
  WWIP	FLOAT DEFAULT 0,
  FWWARPMTOPLAN	FLOAT DEFAULT 0,
  PCEWARPLENGTH	FLOAT DEFAULT 0,
  PCSRQDTOPLAN	FLOAT DEFAULT 0,
  PCEWFT1WEIGHT	FLOAT DEFAULT 0,
  WFT1YNRQD	FLOAT DEFAULT 0,
  WARPTYPE	CHAR(2),
  WARPCOL	CHAR(3),
  WEFT1STRU	CHAR(4),
  WEFT1TWIST	CHAR(2),
  WEFT1COL	CHAR(3),
  WARP1STRU	CHAR(4),
  WARP1TWIST	CHAR(2),
  WARP1COL	CHAR(3),
  PCSWWIP	DOUBLE PRECISION DEFAULT 0,
  PCSVWIP	DOUBLE PRECISION DEFAULT 0,
CONSTRAINT PVBMAKE_WARPTEMP PRIMARY KEY (VBSTRU, VBCOL)
);

/* Table: VBMAKE_WPYARN, Owner: SYSDBA */

CREATE TABLE VBMAKE_WPYARN 
(
  WPTYPE	CHAR(2) NOT NULL,
  WPCOL	CHAR(3) NOT NULL,
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  WPYNMRQD	FLOAT default 0,
  WPYNRQD	FLOAT default 0,
  WPYNSTOCKMETRES	FLOAT default 0,
  WPYNMETRESTOKGS	FLOAT default 0,
  WPYNTOSPIN	FLOAT default 0,
CONSTRAINT PVBMAKE_WPYARN PRIMARY KEY (WPTYPE, WPCOL)
);

/* Table: VBMAKE_WPYARNTEMP, Owner: SYSDBA */

CREATE TABLE VBMAKE_WPYARNTEMP 
(
  WPTYPE	CHAR(2) NOT NULL,
  WPCOL	CHAR(3) NOT NULL,
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  WPYNMRQD	FLOAT default 0,
  WPYNRQD	FLOAT default 0,
  WPYNSTOCKMETRES	FLOAT default 0,
  WPYNMETRESTOKGS	FLOAT default 0,
  WPYNTOSPIN	FLOAT default 0,
CONSTRAINT PVBMAKE_WPYARNTEMP PRIMARY KEY (WPTYPE, WPCOL)
);

/* Table: VBMAKE_WTYARN, Owner: SYSDBA */

CREATE TABLE VBMAKE_WTYARN 
(
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  WFTYNRQD	FLOAT default 0,
  WFTYNSTOCK	FLOAT default 0,
  WFTYNTOSPIN	FLOAT default 0,
CONSTRAINT PVBMAKE_WTYARN PRIMARY KEY (YNSTRU, YNTWIST, YNCOL)
);

/* Table: VBMAKE_WTYARNTEMP, Owner: SYSDBA */

CREATE TABLE VBMAKE_WTYARNTEMP 
(
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  WFTYNRQD	FLOAT default 0,
  WFTYNSTOCK	FLOAT default 0,
  WFTYNTOSPIN	FLOAT default 0,
CONSTRAINT PVBMAKE_WTYARNTEMP PRIMARY KEY (YNSTRU, YNTWIST, YNCOL)
);

/* Table: VBNEXTNO, Owner: SYSDBA */

CREATE TABLE VBNEXTNO 
(
  REF	SMALLINT NOT NULL,
  NEXTNO	INTEGER NOT NULL,
  DESCR	CHAR(20),
CONSTRAINT PNEXTNO PRIMARY KEY (REF)
);

/* Table: VBORDDET, Owner: SYSDBA */

CREATE TABLE VBORDDET 
(
  VTORDNO	INTEGER NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QTY	INTEGER NOT NULL,
  DATERQD	TIMESTAMP NOT NULL,
  RCVDBY	CHAR(4) NOT NULL,
  QTYDEL	DOUBLE PRECISION NOT NULL,
  STATUS	CHAR(1),
  QTYALLOC	DOUBLE PRECISION NOT NULL,
  ESTDATE	TIMESTAMP NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  ITEMNO	INTEGER,
CONSTRAINT PVBORDDET PRIMARY KEY (VTORDNO, VBSTRU, VBCOL, VBFIN, VBWIDTH, DATERQD)
);

/* Table: VBORDHDR, Owner: SYSDBA */

CREATE TABLE VBORDHDR 
(
  VTORDNO	INTEGER NOT NULL,
  CUSTREF	CHAR(6) NOT NULL,
  CUSTORDNO	CHAR(20),
  DATERCVD	TIMESTAMP NOT NULL,
  RCVDBY	CHAR(4) NOT NULL,
  PLANNEDCONSIGNMENT	CHAR(1) NOT NULL,
  ORDERHELD	CHAR(1),
  ORDDATE	TIMESTAMP NOT NULL,
  PRICETYPE	CHAR(1) NOT NULL,
CONSTRAINT PVBORDHDR PRIMARY KEY (VTORDNO)
);

/* Table: VBOSP, Owner: SYSDBA */

CREATE TABLE VBOSP 
(
  CUSTREF	CHAR(6) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  PRICETYPE	CHAR(3) NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  PRICE	DOUBLE PRECISION,
  VBFIN	CHAR(2) NOT NULL,
CONSTRAINT PVBOSP PRIMARY KEY (CUSTREF, VBSTRU, VBFIN, VBWIDTH, QLTY, PRICETYPE, FROMDATE, TODATE)
);

/* Table: VBPARAMS, Owner: SYSDBA */

CREATE TABLE VBPARAMS 
(
  REF	SMALLINT NOT NULL,
  MAKEDATE	TIMESTAMP,
  NOENTRYBEFOREDATE	TIMESTAMP,
  LASTMEYEARNO	SMALLINT,
  LASTMEPERIODNO	SMALLINT,
  MEINPROGRESS	CHAR(1),
  PICKING	CHAR(1) NOT NULL,
  BARCODEPRINTERTYPE	CHAR(3),
CONSTRAINT PVBPARAMS PRIMARY KEY (REF)
);

/* Table: VBPLACE, Owner: SYSDBA */

CREATE TABLE VBPLACE 
(
  REF	CHAR(1) NOT NULL,
  DESCR	CHAR(30),
CONSTRAINT PVBPLACE PRIMARY KEY (REF)
);

/* Table: VBPRICESSTD, Owner: SYSDBA */

CREATE TABLE VBPRICESSTD 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  STKPRICE	DOUBLE PRECISION,
  VBFIN	CHAR(2) NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
CONSTRAINT PVBPRICESSTD PRIMARY KEY (VBSTRU, VBFIN, VBWIDTH, QLTY, FROMDATE, TODATE)
);

/* Table: VBQLTY, Owner: SYSDBA */

CREATE TABLE VBQLTY 
(
  QLTY	CHAR(1) NOT NULL,
  DESCR	CHAR(60),
CONSTRAINT PVBQLTY PRIMARY KEY (QLTY)
);

/* Table: VBRCPT, Owner: SYSDBA */

CREATE TABLE VBRCPT 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  LOTNO	INTEGER NOT NULL,
  BOXNO	INTEGER NOT NULL,
  DATEMANU	TIMESTAMP NOT NULL,
  FAULTS	SMALLINT NOT NULL,
  METRICWIDTH	SMALLINT NOT NULL,
  GROSSLENGTH	DOUBLE PRECISION NOT NULL,
  WARPNO	INTEGER NOT NULL,
  PIECENO	SMALLINT NOT NULL,
  STRIPNO	SMALLINT NOT NULL,
  INITIALS	CHAR(4) NOT NULL,
  DESPNO	INTEGER,
  DATERCVD	TIMESTAMP,
  QLTY	CHAR(1),
  ROLLNO	INTEGER NOT NULL,
  LONGLENGTH	DOUBLE PRECISION NOT NULL,
  PALLETNO	INTEGER,
  NETLENGTH	DOUBLE PRECISION,
  ALLOWANCE	DOUBLE PRECISION,
  GREIGENO	SMALLINT NOT NULL,
  RETURNED	CHAR(1),
  VTORDNO	INTEGER default 0,
  DATERQD	TIMESTAMP default null,
  ROWNO	INTEGER default 0,
  DATEMOD	TIMESTAMP default 'now',
  USERMOD	CHAR(4),
  DESPDATE	TIMESTAMP,
  FINNO	INTEGER NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  SEQNO	INTEGER NOT NULL,
  QLTYREASON	CHAR(2),
  LABELSTRU	CHAR(2) NOT NULL,
  LABELSTRUCUSTREF	CHAR(6),
  VTORDDETITEMNO	INTEGER,
CONSTRAINT PVBRCPT PRIMARY KEY (WARPNO, PIECENO, STRIPNO, SEQNO),
CONSTRAINT UVBR_ROLLNO UNIQUE (ROLLNO, SEQNO)
);

/* Table: VBRCPTOLDROWNO, Owner: SYSDBA */

CREATE TABLE VBRCPTOLDROWNO 
(
  BOXNO	INTEGER NOT NULL,
  ROWNO	INTEGER,
CONSTRAINT PVBRCPTOLDROWNO PRIMARY KEY (BOXNO)
);

/* Table: VBRCPTTRACK, Owner: SYSDBA */

CREATE TABLE VBRCPTTRACK 
(
  TRACKINGREF	INTEGER NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  LOTNO	INTEGER NOT NULL,
  BOXNO	INTEGER NOT NULL,
  DATEMANU	TIMESTAMP,
  FAULTS	SMALLINT,
  METRICWIDTH	SMALLINT,
  GROSSLENGTH	DOUBLE PRECISION,
  WARPNO	INTEGER NOT NULL,
  PIECENO	SMALLINT NOT NULL,
  STRIPNO	SMALLINT NOT NULL,
  INITIALS	CHAR(4),
  DATERCVD	TIMESTAMP,
  QLTY	CHAR(1),
  ROLLNO	INTEGER NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
  ALLOWANCE	DOUBLE PRECISION,
  GREIGENO	SMALLINT NOT NULL,
  RETURNED	CHAR(1),
  DATEMOD	TIMESTAMP,
  USERMOD	CHAR(4),
  FINNO	INTEGER NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  LABELSTRU	CHAR(2),
CONSTRAINT PVBRCPTTRACK PRIMARY KEY (TRACKINGREF)
);

/* Table: VBRCPTTRACKTEMP, Owner: SYSDBA */

CREATE TABLE VBRCPTTRACKTEMP 
(
  ROLLNO	INTEGER,
  VBSTRU	CHAR(3),
  VBCOL	CHAR(3),
  VBFIN	CHAR(2)
);

/* Table: VBSTKBAL, Owner: SYSDBA */

CREATE TABLE VBSTKBAL 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  METRICWIDTH	INTEGER NOT NULL,
  BALDATE	TIMESTAMP NOT NULL,
  NETLENGTH	INTEGER,
  VBFIN	CHAR(2) NOT NULL,
CONSTRAINT PVBSTKBAL PRIMARY KEY (VBSTRU, VBCOL, VBFIN, METRICWIDTH, BALDATE)
);

/* Table: VBSTOCKMIN, Owner: SYSDBA */

CREATE TABLE VBSTOCKMIN 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  STKMIN	INTEGER NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  MINCALCMULTIPLIER	DOUBLE PRECISION default 0 NOT NULL,
  MAKESTKMULTIPLIER	DOUBLE PRECISION default 0 NOT NULL,
  SALEGROUP	CHAR(6) NOT NULL,
CONSTRAINT PVBSTOCKMIN PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH)
);

/* Table: VBSTOCKMINTEMP, Owner: SYSDBA */

CREATE TABLE VBSTOCKMINTEMP 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBWIDTH	SMALLINT NOT NULL,
  STKMIN	INTEGER NOT NULL,
CONSTRAINT PVBSTOCKMINTEMP PRIMARY KEY (VBSTRU, VBCOL, VBWIDTH)
);

/* Table: VBSTRU, Owner: SYSDBA */

CREATE TABLE VBSTRU 
(
  VBSTRU	CHAR(3) NOT NULL,
  DESCR	CHAR(20),
  LABELSTYLEDESCR	CHAR(8),
  WARPTYPE	CHAR(2) NOT NULL,
  TAKEUP	FLOAT,
  WARPFINWIDTH	SMALLINT,
  PCEFINLENGTH	SMALLINT,
  PCEWARPLENGTH	SMALLINT,
  CALCPCSPERBEAM	DOUBLE PRECISION,
  NETPCSPERBEAM	DOUBLE PRECISION,
  CALCWARPPCEWEIGHT	DOUBLE PRECISION,
  WARPPCEWEIGHT	DOUBLE PRECISION,
  WARP1PCEWEIGHT	DOUBLE PRECISION,
  WARP2PCEWEIGHT	DOUBLE PRECISION,
  WARP3PCEWEIGHT	DOUBLE PRECISION,
  WARP4PCEWEIGHT	DOUBLE PRECISION,
  FINPICSPERCM	DOUBLE PRECISION,
  ENDSPERDENT	SMALLINT,
  REEDWIDTH	SMALLINT,
  WASTEPERPICK	SMALLINT,
  PICKTAKEUP	FLOAT,
  WEFTWEIGHTPERPIECE	DOUBLE PRECISION,
  PICKSPERMIN	SMALLINT,
  EFFICIENCY	FLOAT,
  WEFT1STRU	CHAR(4) NOT NULL,
  WEFT1TWIST	CHAR(2) NOT NULL,
  WEFT1WEIGHT	DOUBLE PRECISION,
  WEFT2WEIGHT	DOUBLE PRECISION,
  WEFT3WEIGHT	DOUBLE PRECISION,
  WEFT4WEIGHT	DOUBLE PRECISION,
  CALCWARPFINLENGTH	DOUBLE PRECISION,
  WEFTLENGTHPERPICK	DOUBLE PRECISION,
  WEFTLENGTHPERWARP	DOUBLE PRECISION,
  WEFTLENGTHPERPIECE	DOUBLE PRECISION,
  HRSPERPIECE	FLOAT,
  WIPLSPRICE	DOUBLE PRECISION,
  WIPFINPRICE	DOUBLE PRECISION,
  OLDDESCR	CHAR(25),
  GREXTPRODREF	CHAR(5),
  FNEXTPRODREF	CHAR(5),
  DATEENT	TIMESTAMP default "now",
  USERENT	CHAR(4),
  DATEMOD	TIMESTAMP default "now",
  USERMOD	CHAR(4),
CONSTRAINT PVBSTRU PRIMARY KEY (VBSTRU)
);

/* Table: VBSTRUWEIGHT, Owner: SYSDBA */

CREATE TABLE VBSTRUWEIGHT 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBWIDTH	INTEGER NOT NULL,
  GRAMSPERGROSSMETRE	INTEGER,
CONSTRAINT PVBSTRUWEIGHT PRIMARY KEY (VBSTRU, VBWIDTH)
);

/* Table: VBTYPE, Owner: SYSDBA */

CREATE TABLE VBTYPE 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  LABELDESCR	CHAR(8) NOT NULL,
  WARPCOL	CHAR(3) NOT NULL,
  WEFTSTRU	CHAR(4) NOT NULL,
  WEFTTWIST	CHAR(2) NOT NULL,
  WEFTCOL	CHAR(3) NOT NULL,
  WARPTYPE	CHAR(2) NOT NULL,
  DATEENT	TIMESTAMP default "now",
  USERENT	CHAR(4),
  DATEMOD	TIMESTAMP default "now",
  USERMOD	CHAR(4),
  VBFIN	CHAR(2) NOT NULL,
  EXTPRODREF	CHAR(10),
CONSTRAINT PVBTYPE PRIMARY KEY (VBSTRU, VBCOL, VBFIN)
);

/* Table: VBTYPECLIENT, Owner: SYSDBA */

CREATE TABLE VBTYPECLIENT 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  LABELSTRU	CHAR(2) NOT NULL,
  STYLEDESCR	CHAR(8),
  COLORDESCR	CHAR(9),
  PARTNO	CHAR(11),
CONSTRAINT PVBTYPECLIENT PRIMARY KEY (VBSTRU, VBCOL, VBFIN, LABELSTRU)
);

/* Table: VBWIDTH, Owner: SYSDBA */

CREATE TABLE VBWIDTH 
(
  METRICWIDTH	SMALLINT NOT NULL,
  IMPERIALWIDTH	CHAR(4) NOT NULL,
  METRICLABELDESCR	CHAR(5),
  STRIPS	SMALLINT NOT NULL,
  AVEKGPERBOX	DOUBLE PRECISION,
  AVEKGPERMETRE	DOUBLE PRECISION default 0,
  TARIFFGROUP	INTEGER,
CONSTRAINT PVBWIDTH PRIMARY KEY (METRICWIDTH)
);

/* Table: VBYARNISSUED, Owner: SYSDBA */

CREATE TABLE VBYARNISSUED 
(
  BOXNO	INTEGER NOT NULL,
  ISSUEDTO	CHAR(6) NOT NULL,
  ISSUEDDATE	TIMESTAMP NOT NULL,
  ISSUEDBY	CHAR(6) NOT NULL,
  ISSUEDQTY	DOUBLE PRECISION NOT NULL,
  BATREF	INTEGER NOT NULL,
CONSTRAINT PYARNISSUE PRIMARY KEY (BOXNO)
);

/* Table: VBYARNRCPT, Owner: SYSDBA */

CREATE TABLE VBYARNRCPT 
(
  BOXNO	INTEGER NOT NULL,
  LOTNO1	SMALLINT NOT NULL,
  LOTNO2	SMALLINT NOT NULL,
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  YNNET	DOUBLE PRECISION NOT NULL,
  DATERCVD	TIMESTAMP NOT NULL,
  INITIALS	CHAR(4) NOT NULL,
  YNQLTY	CHAR(1),
  RETURNED	CHAR(1) default 'N',
  STOCKAREA	INTEGER default 0,
  BATREF	INTEGER default 0,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(4),
  DATEMOD	TIMESTAMP,
  USERMOD	CHAR(4),
  ISSUEDTO	CHAR(6),
  ISSUEDDATE	TIMESTAMP,
  ISSUEDBY	CHAR(4),
CONSTRAINT PVBYARNRCPT PRIMARY KEY (BOXNO)
);

/* Table: VBYARNRCPTTRACK, Owner: SYSDBA */

CREATE TABLE VBYARNRCPTTRACK 
(
  TRACKINGREF	INTEGER NOT NULL,
  BOXNO	INTEGER NOT NULL,
  LOTNO1	SMALLINT NOT NULL,
  LOTNO2	SMALLINT NOT NULL,
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  YNNET	DOUBLE PRECISION NOT NULL,
  DATERCVD	TIMESTAMP NOT NULL,
  INITIALS	CHAR(4) NOT NULL,
  YNQLTY	CHAR(1),
  RETURNED	CHAR(1),
  DATEMOD	TIMESTAMP,
  USERMOD	CHAR(4),
CONSTRAINT PVBYARNRCPTTRACK PRIMARY KEY (TRACKINGREF)
);

/* Table: VTLOG, Owner: SYSDBA */

CREATE TABLE VTLOG 
(
  REF	INTEGER NOT NULL,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(10),
  PROGRAMREF	CHAR(10),
  DESCR	CHAR(60),
  TABLEREF	CHAR(25),
  CHECKED	CHAR(1) default 'N',
CONSTRAINT PVTLOG PRIMARY KEY (REF)
);

/* Table: VTPERIOD, Owner: SYSDBA */

CREATE TABLE VTPERIOD 
(
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  YYYYMM	INTEGER,
CONSTRAINT PVTPERIOD PRIMARY KEY (FROMDATE)
);

/* Table: VTQUARTER, Owner: SYSDBA */

CREATE TABLE VTQUARTER 
(
  STARTDATE	TIMESTAMP NOT NULL,
  FINISHDATE	TIMESTAMP NOT NULL,
  YEARNO	INTEGER NOT NULL,
  QUARTERNO	INTEGER NOT NULL,
  FROMYYYYMM	INTEGER,
  TOYYYYMM	INTEGER,
CONSTRAINT PVTQUARTER PRIMARY KEY (STARTDATE, FINISHDATE)
);

/* Table: VTYEAR, Owner: SYSDBA */

CREATE TABLE VTYEAR 
(
  STARTDATE	TIMESTAMP NOT NULL,
  FINISHDATE	TIMESTAMP NOT NULL,
  YEARNO	INTEGER NOT NULL,
  FROMYYYYMM	INTEGER,
  TOYYYYMM	INTEGER,
CONSTRAINT PVTYEAR PRIMARY KEY (STARTDATE)
);

/* Table: WARPCOL, Owner: SYSDBA */

CREATE TABLE WARPCOL 
(
  WARPTYPE	CHAR(2) NOT NULL,
  WARPCOL	CHAR(3) NOT NULL,
  YNSTRU1	CHAR(4) NOT NULL,
  YNTWIST1	CHAR(2) NOT NULL,
  YNCOL1	CHAR(3) NOT NULL,
CONSTRAINT PWARPCOL PRIMARY KEY (WARPTYPE, WARPCOL)
);

/* Table: WARPRCPT, Owner: SYSDBA */

CREATE TABLE WARPRCPT 
(
  WARPNO	INTEGER NOT NULL,
  WARPLENGTH	INTEGER NOT NULL,
  NOOFBREAKS	SMALLINT NOT NULL,
  WARPTYPE	CHAR(2) NOT NULL,
  WARPCOL	CHAR(3) NOT NULL,
  WARPLOTNO1	INTEGER NOT NULL,
  WARPLOTNO2	SMALLINT NOT NULL,
  WARPSINGLEMULTIPLE	CHAR(1) NOT NULL,
  DATEMANU	TIMESTAMP NOT NULL,
  DATERCVD	TIMESTAMP NOT NULL,
  RCVDBY	CHAR(4) NOT NULL,
  COMMENT	CHAR(60),
  COMPLETE	CHAR(1),
  ESTGREIGELEN	 COMPUTED BY (warplength*.92),
  WARPLEFT	DOUBLE PRECISION default 0,
  YARNBOXNO	INTEGER NOT NULL,
  WARP1ENDS	INTEGER NOT NULL,
CONSTRAINT PWARPRCPT PRIMARY KEY (WARPNO)
);

/* Table: WARPTYPE, Owner: SYSDBA */

CREATE TABLE WARPTYPE 
(
  WARPTYPE	CHAR(2) NOT NULL,
  WARP1STRU	CHAR(4) NOT NULL,
  WARP1TWIST	CHAR(2) NOT NULL,
  WARP1ENDS	SMALLINT NOT NULL,
  ENDSPERSECTION	SMALLINT,
  SECTIONS	SMALLINT,
  TOTALENDS	SMALLINT,
  WARPLENGTH	SMALLINT,
  YARNLENGTH	INTEGER,
  SINGLESLENGTH	INTEGER,
  WARPWEIGHTEXWASTE	DOUBLE PRECISION,
  WARPWEIGHT	DOUBLE PRECISION,
  WARP2STRU	CHAR(4),
  WARP2TWIST	CHAR(2),
  WARP2ENDS	SMALLINT,
  WARP2WEIGHT	DOUBLE PRECISION,
  WARP3STRU	CHAR(4),
  WARP3TWIST	CHAR(2),
  WARP3ENDS	SMALLINT,
  WARP3WEIGHT	DOUBLE PRECISION,
  WARP4STRU	CHAR(4),
  WARP4TWIST	CHAR(2),
  WARP4ENDS	SMALLINT,
  WARP4WEIGHT	DOUBLE PRECISION,
  REED	FLOAT,
  WARPINGWASTE	FLOAT,
  ASSEMBLEWASTE	FLOAT,
  WARP1WEIGHT	DOUBLE PRECISION,
  WIPPRICE	DOUBLE PRECISION,
  EXTPRODREF	CHAR(3),
  DATEENT	TIMESTAMP default "now",
  USERENT	CHAR(4),
  DATEMOD	TIMESTAMP default "now",
  USERMOD	CHAR(4),
  WPYNMETRESTOKGS	DOUBLE PRECISION,
CONSTRAINT PWARPTYPE PRIMARY KEY (WARPTYPE)
);

/* Table: WHFWSALESPASS1, Owner: SYSDBA */

CREATE TABLE WHFWSALESPASS1 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  METRICWIDTH	SMALLINT NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  PERIODNO	SMALLINT NOT NULL,
  NETLENGTH	INTEGER,
CONSTRAINT WHFWSALESPASS1 PRIMARY KEY (VBSTRU, VBCOL, VBFIN, METRICWIDTH, YEARNO, PERIODNO)
);

/* Table: WHMANUBOXES, Owner: SYSDBA */

CREATE TABLE WHMANUBOXES 
(
  MANUYEAR	INTEGER NOT NULL,
  MANUMONTH	INTEGER NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
  SALESDATE	TIMESTAMP,
  SALESYEAR	INTEGER,
  SALESMONTH	INTEGER
);

/* Table: WHSALESANALYSIS, Owner: SYSDBA */

CREATE TABLE WHSALESANALYSIS 
(
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	INTEGER NOT NULL,
  NETLENGTH	INTEGER,
  MONTH1	INTEGER,
  MONTH2	INTEGER,
  MONTH3	INTEGER,
  MONTH4	INTEGER,
  MONTH5	INTEGER,
  MONTH6	INTEGER,
  MONTH7	INTEGER,
  MONTH8	INTEGER,
  MONTH9	INTEGER,
  MONTH10	INTEGER,
  MONTH11	INTEGER,
  MONTH12	INTEGER,
CONSTRAINT PWHSALESANALYSIS PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH)
);

/* Table: WHSALESPERCUSTOMER, Owner: SYSDBA */

CREATE TABLE WHSALESPERCUSTOMER 
(
  YEARNO	INTEGER,
  PERIODNO	INTEGER,
  WARPTYPE	CHAR(2),
  WARPCOL	CHAR(3),
  VBSTRU	CHAR(3),
  VBCOL	CHAR(3),
  VBFIN	CHAR(2),
  VBWIDTH	INTEGER,
  CUSTREF	CHAR(6),
  NETLENGTH	INTEGER,
  PCSNETLENGTH	FLOAT,
  AVELENGTH	INTEGER,
  PCSAVELENGTH	FLOAT
);

/* Table: WHSALESPERCUSTOMERFW, Owner: SYSDBA */

CREATE TABLE WHSALESPERCUSTOMERFW 
(
  CUSTREF	CHAR(6) NOT NULL,
  YYYYMM	INTEGER NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  NETLENGTH	DOUBLE PRECISION,
  PCSNETLENGTH	DOUBLE PRECISION,
  SALESVALUE	DOUBLE PRECISION,
CONSTRAINT WHSALESPERCUSTOMERFW PRIMARY KEY (CUSTREF, YYYYMM, VBSTRU, VBCOL, VBFIN)
);

/* Table: WHSALESTEMP, Owner: SYSDBA */

CREATE TABLE WHSALESTEMP 
(
  CUSTREF	CHAR(6) NOT NULL,
  VBSTRU	CHAR(3) NOT NULL,
  VBCOL	CHAR(3) NOT NULL,
  VBFIN	CHAR(2) NOT NULL,
  VBWIDTH	INTEGER NOT NULL,
  QLTY	CHAR(1) NOT NULL,
  YEARNO	INTEGER NOT NULL,
  MONTHNO	INTEGER NOT NULL,
  NETLENGTH	INTEGER,
CONSTRAINT PWHSALESTEMP PRIMARY KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH, QLTY, YEARNO, MONTHNO)
);

/* Table: WIPRCPT, Owner: SYSDBA */

CREATE TABLE WIPRCPT 
(
  REFNO	INTEGER NOT NULL,
  PRODREF	CHAR(6) NOT NULL,
  RCPTDATE	TIMESTAMP NOT NULL,
  RCPTINITIALS	CHAR(4) NOT NULL,
  NETWEIGHT	DOUBLE PRECISION NOT NULL,
  LOTNO1	SMALLINT,
  LOTNO2	SMALLINT,
  SHIFT	CHAR(1) NOT NULL,
  DATEMANU	TIMESTAMP NOT NULL,
  DATEISSUED	TIMESTAMP,
  ISSUEINITIALS	CHAR(4),
  ISSUETO	CHAR(6),
  VALUERATING	DOUBLE PRECISION NOT NULL,
  VALUERATINGDATE	TIMESTAMP NOT NULL,
  STOCKAREA	INTEGER default 0,
  BATREF	INTEGER default 0,
  DATEENT	TIMESTAMP,
  USERENT	CHAR(4),
  DATEMOD	TIMESTAMP,
  USERMOD	CHAR(4),
  FACTORYNO	INTEGER default 1,
CONSTRAINT PWIPRCPT PRIMARY KEY (REFNO)
);

/* Table: WKHRS, Owner: SYSDBA */

CREATE TABLE WKHRS 
(
  DEPTREF	CHAR(6) NOT NULL,
  DATEREF	TIMESTAMP NOT NULL,
  HRSPERDAY	FLOAT NOT NULL,
CONSTRAINT PWKHRS PRIMARY KEY (DEPTREF, DATEREF)
);

/* Table: WKNO, Owner: SYSDBA */

CREATE TABLE WKNO 
(
  FROMDATE	TIMESTAMP NOT NULL,
  TODATE	TIMESTAMP NOT NULL,
  YEARNO	SMALLINT NOT NULL,
  WEEKNO	SMALLINT NOT NULL,
  MONTHNO	SMALLINT NOT NULL,
  VTPERIOD	SMALLINT NOT NULL,
CONSTRAINT PWKNO PRIMARY KEY (FROMDATE, TODATE)
);

/* Table: WORWLOTNO, Owner: SYSDBA */

CREATE TABLE WORWLOTNO 
(
  LOTNOREF1	INTEGER NOT NULL,
  LOTNOREF2	SMALLINT NOT NULL,
  SINGLEMULTIPLE	CHAR(1) NOT NULL,
  W1LOTNO1	INTEGER NOT NULL,
  W1LOTNO2	SMALLINT NOT NULL,
  W1YNCOL	CHAR(3) NOT NULL,
  W2LOTNO1	INTEGER NOT NULL,
  W2LOTNO2	SMALLINT NOT NULL,
  W2YNCOL	CHAR(3) NOT NULL,
  W3LOTNO1	INTEGER NOT NULL,
  W3LOTNO2	SMALLINT NOT NULL,
  W3YNCOL	CHAR(3) NOT NULL,
  W4LOTNO1	INTEGER NOT NULL,
  W4LOTNO2	SMALLINT NOT NULL,
  W4YNCOL	CHAR(3) NOT NULL,
  DATERCVD	TIMESTAMP,
  RCVDBY	CHAR(4) NOT NULL,
CONSTRAINT PWORWLOTNO PRIMARY KEY (LOTNOREF1, LOTNOREF2, SINGLEMULTIPLE),
CONSTRAINT UWORWLOTNO UNIQUE (W1LOTNO1, W1LOTNO2, W2LOTNO1, W2LOTNO2, W3LOTNO1, W3LOTNO2, W4LOTNO1, W4LOTNO2)
);

/* Table: YARNCOL, Owner: SYSDBA */

CREATE TABLE YARNCOL 
(
  YNCOL	CHAR(3) NOT NULL,
  DESCR	CHAR(30),
CONSTRAINT PYARNCOL PRIMARY KEY (YNCOL)
);

/* Table: YARNLOTNO, Owner: SYSDBA */

CREATE TABLE YARNLOTNO 
(
  LOTNO1	INTEGER NOT NULL,
  LOTNO2	SMALLINT NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  DATEMANU	TIMESTAMP,
  DATERCVD	TIMESTAMP,
  RCVDBY	CHAR(4) NOT NULL,
CONSTRAINT PYARNLOTNO PRIMARY KEY (LOTNO1, LOTNO2, YNCOL),
CONSTRAINT UYARNLOTNO UNIQUE (LOTNO1, LOTNO2)
);

/* Table: YARNSTRU, Owner: SYSDBA */

CREATE TABLE YARNSTRU 
(
  YNSTRU	CHAR(4) NOT NULL,
  DESCR	CHAR(30),
  LABELDESCR	CHAR(8),
  WIPPRICE	DOUBLE PRECISION,
  FGPRICE	DOUBLE PRECISION,
  YNTWIST	CHAR(2) NOT NULL,
  PRODHRSPDL	DOUBLE PRECISION,
  PRODGROUP	CHAR(1),
  DEPTGROUP	CHAR(6),
  YNCOUNT	SMALLINT NOT NULL,
  PLY	SMALLINT NOT NULL,
CONSTRAINT PYARNSTRU PRIMARY KEY (YNSTRU, YNTWIST)
);

/* Table: YARNTYPE, Owner: SYSDBA */

CREATE TABLE YARNTYPE 
(
  YNSTRU	CHAR(4) NOT NULL,
  YNCOL	CHAR(3) NOT NULL,
  DESCR	CHAR(30),
  INSTOCK	DOUBLE PRECISION,
  YNTWIST	CHAR(2) NOT NULL,
  WEAVEWIP	DOUBLE PRECISION,
  MODDATE	TIMESTAMP,
  YNTYPE	CHAR(9),
CONSTRAINT PYARNTYPE PRIMARY KEY (YNSTRU, YNTWIST, YNCOL)
);

/* Table: YNSTRUWBSRM, Owner: SYSDBA */

CREATE TABLE YNSTRUWBSRM 
(
  YNSTRU	CHAR(4) NOT NULL,
  YNTWIST	CHAR(2) NOT NULL,
  CTRLACCT	CHAR(6) NOT NULL,
  RMPERKG	DOUBLE PRECISION NOT NULL,
CONSTRAINT PYNSTRUWBSRM PRIMARY KEY (YNSTRU, YNTWIST, CTRLACCT)
);

/* Table: YNTWIST, Owner: SYSDBA */

CREATE TABLE YNTWIST 
(
  TWISTREF	CHAR(2) NOT NULL,
  DESCR	CHAR(20),
CONSTRAINT PYNTWIST PRIMARY KEY (TWISTREF)
);

/*  Index definitions for all user tables */

CREATE UNIQUE INDEX UAPORDDETVPE ON APORDDET(VTORDNO, PRODREF, EXPDELDATE);
CREATE INDEX UCALEMARDSTRIPS ON CALEMARDSTRIPS(FILEREF, STRIPNO);
CREATE INDEX UFABRICLOTNO ON FABRICLOTNO(VBSTRU, VBCOL, WEFTLOTNO1);
CREATE UNIQUE INDEX UFABRICLOTNO1 ON FABRICLOTNO(WARPLOTNO1, WARPLOTNO2, WARPSINGLEMULTIPLE, WEFTLOTNO1, WEFTLOTNO2, WEFTSINGLEMULTIPLE, VBSTRU, VBCOL);
CREATE INDEX I_REPL_LOG ON REPL_LOG(SEQNO);
CREATE INDEX ITXNDET_EXTPRODREFTXNDATE ON TXNDET(EXTPRODREF, TXNDATE);
CREATE INDEX IVBBOXDETAILS_ORDNO ON VBBOXDETAILS(VTORDNO, DATERQD);
CREATE UNIQUE INDEX IVBD_TWLA ON VBBOXDETAILS(VBSTRU, VBCOL, VBWIDTH, VBFIN, LOTNO, ALLOWANCE, BOXNO);
CREATE UNIQUE INDEX IVBD_TWLB ON VBBOXDETAILS(VBSTRU, VBCOL, VBWIDTH, VBFIN, LOTNO, BOXNO);
CREATE INDEX IVBR_BOXNO ON VBRCPT(BOXNO, SEQNO);
CREATE INDEX IVBR_DATEMANU ON VBRCPT(DATEMANU);
CREATE INDEX IVBR_DESPDATE ON VBRCPT(DESPDATE);
CREATE INDEX IVBR_DESPNO ON VBRCPT(DESPNO);
CREATE INDEX IVBR_ORDDATE ON VBRCPT(VTORDNO, DATERQD);
CREATE INDEX IVBR_PALLETNO ON VBRCPT(PALLETNO);
CREATE UNIQUE INDEX IVBR_WGPS ON VBRCPT(WARPNO, PIECENO, STRIPNO, SEQNO);
CREATE INDEX VBRCPTTRACKROLLNO ON VBRCPTTRACK(ROLLNO);
CREATE INDEX I_WHMANUBOXES ON WHMANUBOXES(MANUYEAR, MANUMONTH, VBSTRU, VBCOL, VBFIN);
ALTER TABLE AGENTFREIGHT ADD CONSTRAINT FAFAGENT FOREIGN KEY (AGENTREF) REFERENCES AGENT (AGENTREF);
ALTER TABLE AGENTFREIGHT ADD CONSTRAINT FAFVBWIDTH FOREIGN KEY (VBWIDTH) REFERENCES VBWIDTH (METRICWIDTH);
ALTER TABLE APORDDET ADD CONSTRAINT FAPORDDETAPORDHDR FOREIGN KEY (VTORDNO) REFERENCES APORDHDR (VTORDNO);
ALTER TABLE APORDDET ADD CONSTRAINT FAPORDDETRPRODUCT FOREIGN KEY (PRODREF) REFERENCES PRODUCT (PRODREF);
ALTER TABLE APORDHDR ADD CONSTRAINT FAPORDHDRSUPPLIER FOREIGN KEY (SUPREF) REFERENCES SUPPLIER (SUPREF);
ALTER TABLE CUSTPART ADD CONSTRAINT FCUSTPARTSUPP FOREIGN KEY (CUSTREF) REFERENCES SUPPLIER (SUPREF);
ALTER TABLE CUSTPART ADD CONSTRAINT FCUSTPARTTYPEWIDTH FOREIGN KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH) REFERENCES VBSTOCKMIN (VBSTRU, VBCOL, VBFIN, VBWIDTH);
ALTER TABLE DELBCB ADD CONSTRAINT FDELBCBDELPALLET FOREIGN KEY (DELNO, PALLETNO) REFERENCES DELPALLET (DELNO, PALLETNO);
ALTER TABLE DELHEAD ADD CONSTRAINT FDELHEADSUPPLIER FOREIGN KEY (SUPREF) REFERENCES SUPPLIER (SUPREF);
ALTER TABLE DELHEAD ADD CONSTRAINT FDELHEADVTORDNO FOREIGN KEY (VTORDNO, PRODREF, EXPDELDATE) REFERENCES APORDDET (VTORDNO, PRODREF, EXPDELDATE);
ALTER TABLE DELHEAD ADD CONSTRAINT FDHAGENT FOREIGN KEY (AGENT) REFERENCES AGENT (AGENTREF);
ALTER TABLE DELPALLET ADD CONSTRAINT FDELPALLETDELHEAD FOREIGN KEY (DELNO) REFERENCES DELHEAD (DELNO);
ALTER TABLE DELPALLET ADD CONSTRAINT FDELPALLETPRODUCT FOREIGN KEY (PRODREF) REFERENCES PRODUCT (PRODREF);
ALTER TABLE FABRICLOTNO ADD CONSTRAINT FFLN1WORWLOTNO FOREIGN KEY (WARPLOTNO1, WARPLOTNO2, WARPSINGLEMULTIPLE) REFERENCES WORWLOTNO (LOTNOREF1, LOTNOREF2, SINGLEMULTIPLE);
ALTER TABLE FABRICLOTNO ADD CONSTRAINT FFLN2WORWLOTNO FOREIGN KEY (WEFTLOTNO1, WEFTLOTNO2, WEFTSINGLEMULTIPLE) REFERENCES WORWLOTNO (LOTNOREF1, LOTNOREF2, SINGLEMULTIPLE);
ALTER TABLE FABRICLOTNO ADD CONSTRAINT FFLNVBTYPE FOREIGN KEY (VBSTRU, VBCOL, VBFIN) REFERENCES VBTYPE (VBSTRU, VBCOL, VBFIN);
ALTER TABLE FABRICLOTNO ADD CONSTRAINT FLNINITIALS FOREIGN KEY (RCVDBY) REFERENCES INITIALS (INITIALS);
ALTER TABLE FINRCPTDAILY ADD CONSTRAINT FFRDGREIGERCPT FOREIGN KEY (WARPNO, GREIGENO) REFERENCES GREIGERCPT (WARPNO, GREIGENO);
ALTER TABLE FINRCPTDAILY ADD CONSTRAINT FFRDVBTYPE FOREIGN KEY (VBSTRU, VBCOL, VBFIN) REFERENCES VBTYPE (VBSTRU, VBCOL, VBFIN);
ALTER TABLE GREIGERCPT ADD CONSTRAINT FGRLOOMSPEC FOREIGN KEY (LOOMREF) REFERENCES LOOMSPEC (LOOMREF);
ALTER TABLE GREIGERCPT ADD CONSTRAINT FGRWARPRCPT FOREIGN KEY (WARPNO) REFERENCES WARPRCPT (WARPNO);
ALTER TABLE GREIGERCPTDAILY ADD CONSTRAINT FGRDGREIGERCPT FOREIGN KEY (WARPNO, GREIGENO) REFERENCES GREIGERCPT (WARPNO, GREIGENO);
ALTER TABLE ISSUEDET ADD CONSTRAINT FISSUEDETDELPALLET FOREIGN KEY (DELNO, PALLETNO) REFERENCES DELPALLET (DELNO, PALLETNO);
ALTER TABLE LOOMSPEC ADD CONSTRAINT FLOMSPCLOMTYP FOREIGN KEY (LOOMTYPE) REFERENCES LOOMTYPE (LOOMTYPE);
ALTER TABLE PIECERCPT ADD CONSTRAINT FPRFINRCPTDAILY FOREIGN KEY (WARPNO, GREIGENO, FINNO) REFERENCES FINRCPTDAILY (WARPNO, GREIGENO, FINNO);
ALTER TABLE PRODSUP ADD CONSTRAINT FPRODSUPSUPPLIER FOREIGN KEY (SUPREF) REFERENCES SUPPLIER (SUPREF);
ALTER TABLE PRODUCT ADD CONSTRAINT FPRODUCTCATEGORY FOREIGN KEY (CATEGORY) REFERENCES PRODCAT (CATEGORY);
ALTER TABLE PRODUCT ADD CONSTRAINT FPRODUCTMEASUNIT FOREIGN KEY (MEASUNIT) REFERENCES UNIT (UNITREF);
ALTER TABLE PRODUCT ADD CONSTRAINT FPRODUCTRCVUNIT FOREIGN KEY (RCVUNIT) REFERENCES UNIT (UNITREF);
ALTER TABLE STRULOOM ADD CONSTRAINT FSTRULOOMLOOMTYPE FOREIGN KEY (LOOMTYPE) REFERENCES LOOMTYPE (LOOMTYPE);
ALTER TABLE STRULOOM ADD CONSTRAINT FSTRULOOMVBSTRU FOREIGN KEY (VBSTRU) REFERENCES VBSTRU (VBSTRU);
ALTER TABLE SUPPLIER ADD CONSTRAINT FSUPAGENT FOREIGN KEY (AGENTREF) REFERENCES AGENT (AGENTREF);
ALTER TABLE SUPPLIER ADD CONSTRAINT FSUPTERMS FOREIGN KEY (TERMS) REFERENCES TERMS (TERMS);
ALTER TABLE SUPPLIER ADD CONSTRAINT PSUPCURRENCY FOREIGN KEY (CURRENCY) REFERENCES CURRENCY (CURREF);
ALTER TABLE VBDESPHDR ADD CONSTRAINT FVBDHINITIALS FOREIGN KEY (DESPBY) REFERENCES INITIALS (INITIALS);
ALTER TABLE VBDESPHDR ADD CONSTRAINT FVBDHSUPPLIER FOREIGN KEY (CUSTREF) REFERENCES SUPPLIER (SUPREF);
ALTER TABLE VBLSP ADD CONSTRAINT FVBLVBSTRU FOREIGN KEY (VBSTRU) REFERENCES VBSTRU (VBSTRU);
ALTER TABLE VBLSP ADD CONSTRAINT FVBLVBWIDTH FOREIGN KEY (VBWIDTH) REFERENCES VBWIDTH (METRICWIDTH);
ALTER TABLE VBORDDET ADD CONSTRAINT FVBODINITIALS FOREIGN KEY (RCVDBY) REFERENCES INITIALS (INITIALS);
ALTER TABLE VBORDDET ADD CONSTRAINT FVBODVTORDNO FOREIGN KEY (VTORDNO) REFERENCES VBORDHDR (VTORDNO);
ALTER TABLE VBORDDET ADD CONSTRAINT PVODVBSTOCKMIN FOREIGN KEY (VBSTRU, VBCOL, VBFIN, VBWIDTH) REFERENCES VBSTOCKMIN (VBSTRU, VBCOL, VBFIN, VBWIDTH);
ALTER TABLE VBORDHDR ADD CONSTRAINT FVBOHSUPPLIER FOREIGN KEY (CUSTREF) REFERENCES SUPPLIER (SUPREF);
ALTER TABLE VBORDHDR ADD CONSTRAINT FVOHINITIALS FOREIGN KEY (RCVDBY) REFERENCES INITIALS (INITIALS);
ALTER TABLE VBOSP ADD CONSTRAINT FVBOSPVBSTRU FOREIGN KEY (VBSTRU) REFERENCES VBSTRU (VBSTRU);
ALTER TABLE VBOSP ADD CONSTRAINT FVBOSPVBWIDTH FOREIGN KEY (VBWIDTH) REFERENCES VBWIDTH (METRICWIDTH);
ALTER TABLE VBRCPT ADD CONSTRAINT FVRPIECERCPT FOREIGN KEY (WARPNO, PIECENO) REFERENCES PIECERCPT (WARPNO, PIECENO);
ALTER TABLE VBSTOCKMIN ADD CONSTRAINT FVBSTOCKMINVBTYPE FOREIGN KEY (VBSTRU, VBCOL, VBFIN) REFERENCES VBTYPE (VBSTRU, VBCOL, VBFIN);
ALTER TABLE VBSTOCKMIN ADD CONSTRAINT FVBSTOCKMINVBWIDTH FOREIGN KEY (VBWIDTH) REFERENCES VBWIDTH (METRICWIDTH);
ALTER TABLE VBSTRU ADD CONSTRAINT FVBSTRUWARPTYPE FOREIGN KEY (WARPTYPE) REFERENCES WARPTYPE (WARPTYPE);
ALTER TABLE VBTYPE ADD CONSTRAINT FTYPESTRU FOREIGN KEY (VBSTRU) REFERENCES VBSTRU (VBSTRU);
ALTER TABLE VBTYPE ADD CONSTRAINT FVBTYPEVBSTRU FOREIGN KEY (VBSTRU) REFERENCES VBSTRU (VBSTRU);
ALTER TABLE VBTYPE ADD CONSTRAINT FVBTYPEWARPCOL FOREIGN KEY (WARPTYPE, WARPCOL) REFERENCES WARPCOL (WARPTYPE, WARPCOL);
ALTER TABLE VBTYPE ADD CONSTRAINT FVBVBSTRU FOREIGN KEY (VBSTRU) REFERENCES VBSTRU (VBSTRU);
ALTER TABLE VBYARNRCPT ADD CONSTRAINT FYARNRCPTYARNLOTNO FOREIGN KEY (LOTNO1, LOTNO2, YNCOL) REFERENCES YARNLOTNO (LOTNO1, LOTNO2, YNCOL);
ALTER TABLE VBYARNRCPT ADD CONSTRAINT FYARNRCPTYARNTYPE FOREIGN KEY (YNSTRU, YNTWIST, YNCOL) REFERENCES YARNTYPE (YNSTRU, YNTWIST, YNCOL);
ALTER TABLE WARPCOL ADD CONSTRAINT FWCWARPTYPE FOREIGN KEY (WARPTYPE) REFERENCES WARPTYPE (WARPTYPE);
ALTER TABLE WARPCOL ADD CONSTRAINT FWCYARNTYPE FOREIGN KEY (YNSTRU1, YNTWIST1, YNCOL1) REFERENCES YARNTYPE (YNSTRU, YNTWIST, YNCOL);
ALTER TABLE WARPRCPT ADD CONSTRAINT FWRINITIALS FOREIGN KEY (RCVDBY) REFERENCES INITIALS (INITIALS);
ALTER TABLE WARPRCPT ADD CONSTRAINT FWRWARPCOL FOREIGN KEY (WARPTYPE, WARPCOL) REFERENCES WARPCOL (WARPTYPE, WARPCOL);
ALTER TABLE WARPRCPT ADD CONSTRAINT FWRWORWLOTNO FOREIGN KEY (WARPLOTNO1, WARPLOTNO2, WARPSINGLEMULTIPLE) REFERENCES WORWLOTNO (LOTNOREF1, LOTNOREF2, SINGLEMULTIPLE);
ALTER TABLE WIPRCPT ADD CONSTRAINT FWIPRCPTPRODUCT FOREIGN KEY (PRODREF) REFERENCES PRODUCT (PRODREF);
ALTER TABLE WORWLOTNO ADD CONSTRAINT FW1YARNLOTNO FOREIGN KEY (W1LOTNO1, W1LOTNO2, W1YNCOL) REFERENCES YARNLOTNO (LOTNO1, LOTNO2, YNCOL);
ALTER TABLE WORWLOTNO ADD CONSTRAINT FW2YARNLOTNO FOREIGN KEY (W2LOTNO1, W2LOTNO2, W2YNCOL) REFERENCES YARNLOTNO (LOTNO1, LOTNO2, YNCOL);
ALTER TABLE WORWLOTNO ADD CONSTRAINT FW3YARNLOTNO FOREIGN KEY (W3LOTNO1, W3LOTNO2, W3YNCOL) REFERENCES YARNLOTNO (LOTNO1, LOTNO2, YNCOL);
ALTER TABLE WORWLOTNO ADD CONSTRAINT FW4YARNLOTNO FOREIGN KEY (W4LOTNO1, W4LOTNO2, W4YNCOL) REFERENCES YARNLOTNO (LOTNO1, LOTNO2, YNCOL);
ALTER TABLE WORWLOTNO ADD CONSTRAINT FWORWLNINITIALS FOREIGN KEY (RCVDBY) REFERENCES INITIALS (INITIALS);
ALTER TABLE YARNLOTNO ADD CONSTRAINT FYLNYARNCOL FOREIGN KEY (YNCOL) REFERENCES YARNCOL (YNCOL);
ALTER TABLE YARNSTRU ADD CONSTRAINT FYSTWISTREF FOREIGN KEY (YNTWIST) REFERENCES YNTWIST (TWISTREF);
ALTER TABLE YARNTYPE ADD CONSTRAINT FYTYARNCOL FOREIGN KEY (YNCOL) REFERENCES YARNCOL (YNCOL);

CREATE GENERATOR GENBATCHREF;
CREATE GENERATOR GENCALEMARDSTRIPSREF;
CREATE GENERATOR GENDELINNO;
CREATE GENERATOR GENDESPNO;
CREATE GENERATOR GENISSUENO;
CREATE GENERATOR GENPALLETNO;
CREATE GENERATOR GENROLLNO;
CREATE GENERATOR GENTXNDETREF;
CREATE GENERATOR GENTXNDETTXNREF;
CREATE GENERATOR GENVBRCPTTRACKREF;
CREATE GENERATOR GENVBYARNRCPTTRACKREF;
CREATE GENERATOR GENVTLOGREF;
CREATE GENERATOR GENVTORDNO;
CREATE GENERATOR GENWIPRCPTNO;
CREATE GENERATOR REPL_GENERATOR;

/* View: VBTYPELOOMWARP, Owner: SYSDBA */

CREATE VIEW VBTYPELOOMWARP (
  VBSTRU, 
  VBCOL, 
  LOOMPOSN, 
  WARPTYPE, 
  WARPCOL
) AS

select sl.vbstru,vt.vbcol,ls.loomposn,vs.warptype,wc.warpcol
from struloom sl,loomspec ls,vbstru vs,vbtype vt,warpcol wc
where sl.loomtype=ls.loomtype
and sl.vbstru=vs.vbstru
and vs.vbstru=vt.vbstru
and vt.warptype=wc.warptype
and vt.warpcol=wc.warpcol
;

/* View: VBSOLD, Owner: SYSDBA */

CREATE VIEW VBSOLD (
  VBSTRU, 
  VBCOL, 
  VBFIN, 
  VBWIDTH, 
  DESPNO, 
  DESPDATE, 
  NETLENGTH
) AS

select vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth,
       vr.despno,vr.despdate,
       sum(netlength) netlength
  from vbdesphdr vh,vbrcpt vr,supplier su
 where (vh.despsent='Y')
   and (vh.despno=vr.despno)
   and (vr.qlty='')
   and (vh.custref=su.supref)
   and (su.saleclient='Y')
 group by vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth,vr.despno,
   vr.despdate
;

/* View: V_SALEGROUP, Owner: SYSDBA */

CREATE VIEW V_SALEGROUP (
  SALEGROUP
) AS

select distinct salegroup
from vbstockmin
;

/*  Exceptions */

CREATE EXCEPTION CANNOT_DELETE_ORDER_DET 'Cannot delete order details as deliveries exist.';
CREATE EXCEPTION CANNOT_DELETE_ORDER_HDR 'Cannot delete order header as deliveries exist.';
CREATE EXCEPTION EDELHEADINSERTTXNDET 'VT: Error in DelHead Insert Trigger';
CREATE EXCEPTION EDELHEADUPDATETXNDET 'VT: Error in DelHead Update Trigger';
CREATE EXCEPTION EISSUEDETINSERTTXNDET 'VT: Error in IssueDet Insert Trigger';
CREATE EXCEPTION EVBYARNISSUEDINSERTTXNDET 'VT: Error in YarnIssued Insert Trigger';
CREATE EXCEPTION EVBYARNRCPTINSERTTXNDET 'VT: Error in VBYarnRcpt Insert Trigger';
CREATE EXCEPTION EVBYARNRCPTUPDATETXNDET 'VT: Error in VBYarnRcpt Update Trigger';
CREATE EXCEPTION EWIPISSUEINSERTTXNDET 'VT: Error in WIPIssue Insert Trigger';
CREATE EXCEPTION EWIPRCPTINSERTTXNDET 'VT: Error in WIPRcpt Insert Trigger';
CREATE EXCEPTION EWIPRCPTUPDATETXNDET 'VT: Error in WIPRcpt Update Trigger';
CREATE EXCEPTION EYARNRCPTINSERTTXNDET 'VT: Error in YarnRcpt Insert Trigger';
CREATE EXCEPTION EYARNRCPTUPDATETXNDET 'VT: Error in YarnRcpt Update Trigger';
CREATE EXCEPTION EYNDESPHDRINSERTCANNOTCOMPLETE 'VT: Cannot Complete a Yarn Despatch on Insert';
CREATE EXCEPTION EYNDESPHDRINSERTTXNDETTRIGGER 'VT: Error in YnDespHdr Insert Trigger';
CREATE EXCEPTION EYNDESPHDRUPDATETXNDETTRIGGER 'VT: Error in YnDespHdr Update Trigger';
COMMIT WORK;
SET AUTODDL OFF;
SET TERM ^ ;

/* Stored procedures */

CREATE PROCEDURE SPBATCHREF 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPCALEMARDSTRIPSREF 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPDELINNO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPDESPNO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPEXTRACTTXNDETSUMMARY 
(
  PRODTYPE CHAR(3),
  YEARNO INTEGER,
  PERIODNO INTEGER
)
RETURNS
(
  RECORDSFOUND INTEGER,
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP,
  QTYTOTAL INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPEXTRACTTXNDETSUMMARYMONTH 
(
  YEARNO INTEGER,
  PERIODNO INTEGER
)
RETURNS
(
  RECORDSFOUND INTEGER,
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP,
  QTYTOTAL INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPGENTXNDETREF 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPGENTXNDETTXNREF 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPISSUENO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPPALLETNO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPROLLNO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPSUMMARISETXNDET 
(
  PRODTYPEPARAM CHAR(3),
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPSUMMARISETXNDETMONTH 
(
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPTXNDETSUMMARY 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBBOXDETAILSINSERT 
(
  PICKQLTY CHAR(1)
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKECALCSALES 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKECOMPUTE 
(
  STKMINQTY INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEDELETE 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDALLOC 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDFIN 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDISCON 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDORDERS 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDORDERSHELD 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDORDERSNOTHELD 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDSLIT 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDSTOCK 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDWEAVING 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEFINDWOVEN 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKEMAKELIVE 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBMAKESETUP 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVBPARAMS 
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVTLOGREF 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPVTORDNO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^

CREATE PROCEDURE SPWIPRCPTNO 
RETURNS
(
  CODE INTEGER
)
AS
BEGIN EXIT; END ^


ALTER PROCEDURE SPBATCHREF 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genBatchRef,1);
end
 ^


ALTER PROCEDURE SPCALEMARDSTRIPSREF 
RETURNS
(
  CODE INTEGER
)
AS
 
BEGIN EXIT; END
 ^


ALTER PROCEDURE SPDELINNO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genDelInNo,1);
end
 ^


ALTER PROCEDURE SPDESPNO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genDespNo,1); 
end
 ^


ALTER PROCEDURE SPEXTRACTTXNDETSUMMARY 
(
  PRODTYPE CHAR(3),
  YEARNO INTEGER,
  PERIODNO INTEGER
)
RETURNS
(
  RECORDSFOUND INTEGER,
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP,
  QTYTOTAL INTEGER
)
AS
 
begin
  delete from txndetsummarise;
  select vp.fromdate,vp.todate
    from vtperiod vp
  where (vp.yearno=:yearno)
  and (vp.periodno=:periodno)
  into :fromdate,:todate;
  select count(*),sum(td.qty)
  from txndet td
  where (td.prodtype=:prodtype)
  and (td.txndate>=:fromdate)
  and (td.txndate<=:todate)
  into :recordsfound,:qtytotal;
 /* should be able to get recordsfound as a result*/
  /* of the insert below */
  insert into txndetsummarise (txncode,prodtype,extprodref,qlty,qty)
  select td.txncode,td.prodtype,td.extprodref,td.qlty,sum(td.qty)
  from txndet td
  where (td.prodtype=:prodtype)
  and (td.txndate>=:fromdate)
  and (td.txndate<=:todate)
  group by td.prodtype,td.txncode,td.extprodref,td.qlty;
end
 ^


ALTER PROCEDURE SPEXTRACTTXNDETSUMMARYMONTH 
(
  YEARNO INTEGER,
  PERIODNO INTEGER
)
RETURNS
(
  RECORDSFOUND INTEGER,
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP,
  QTYTOTAL INTEGER
)
AS
 
begin
  delete from txndetsummarise;
  select vp.fromdate,vp.todate
    from vtperiod vp
  where (vp.yearno=:yearno)
  and (vp.periodno=:periodno)
  into :fromdate,:todate;
  select count(*),sum(td.qty)
  from txndet td
  where (td.txndate>=:fromdate)
  and (td.txndate<=:todate)
  into :recordsfound,:qtytotal;
 /* should be able to get recordsfound as a result*/
  /* of the insert below */
  insert into txndetsummarise (txncode,prodtype,extprodref,qlty,qty)
  select td.txncode,td.prodtype,td.extprodref,td.qlty,sum(td.qty)
  from txndet td
  where (td.txndate>=:fromdate)
  and (td.txndate<=:todate)
  group by td.prodtype,td.txncode,td.extprodref,td.qlty;
end
 ^


ALTER PROCEDURE SPGENTXNDETREF 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genTxnDetRef,1);
end
 ^


ALTER PROCEDURE SPGENTXNDETTXNREF 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genTxnDetTxnRef,1);
end
 ^


ALTER PROCEDURE SPISSUENO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genIssueNo,1);
end
 ^


ALTER PROCEDURE SPPALLETNO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genPalletNo,1); 
end
 ^


ALTER PROCEDURE SPROLLNO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genRollNo,1); 
end
 ^


ALTER PROCEDURE SPSUMMARISETXNDET 
(
  PRODTYPEPARAM CHAR(3),
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP
)
AS
 
  declare variable txncode char(6);
  declare variable prodtype char(3);
  declare variable extprodref char(11);
  declare variable qlty char(1);
  declare variable qty double precision;
  declare variable refno integer; /*get the ref nos here as reqd*/
  declare variable txnno integer; /*one txn no for the whole txn*/
begin
  txnno=gen_id(genTxnDetTxnRef,1);
  delete from txndet td
  where (td.prodtype=:prodtypeparam)
  and (td.txndate>=:fromdate)
  and (td.txndate<=:todate);
  for select ts.txncode,ts.prodtype,ts.extprodref,ts.qlty,ts.qty
      from txndetsummarise ts
      into :txncode,:prodtype,:extprodref,:qlty,:qty
  do
  begin
    refno=gen_id(genTxnDetRef,1);
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent) values
      (:refno,:txnno,:txncode,:prodtype,:extprodref,:qlty,:qty,
      :todate,0,'now',USER);
  end
  /*set statistics index ITD_PRODTYPETXNDATE;
  set statistics index ITXNDET_EXTPRODREFTXNDATE;
  set statistics index ITXNDET_ORIGTXNCODE;
  set statistics index ITXNDET_TXNNO;*/
end
 ^


ALTER PROCEDURE SPSUMMARISETXNDETMONTH 
(
  FROMDATE TIMESTAMP,
  TODATE TIMESTAMP
)
AS
 
  declare variable txncode char(6);
  declare variable prodtype char(3);
  declare variable extprodref char(11);
  declare variable qlty char(1);
  declare variable qty double precision;
  declare variable refno integer; /*get the ref nos here as reqd*/
  declare variable txnno integer; /*one txn no for the whole txn*/
begin
  txnno=gen_id(genTxnDetTxnRef,1);
  insert into txndethistory
    select *
      from txndet td
     where (td.txndate>=:fromdate)
       and (td.txndate<=:todate);  
  delete from txndet td
  where (td.txndate>=:fromdate)
  and (td.txndate<=:todate);
  for select ts.txncode,ts.prodtype,ts.extprodref,ts.qlty,ts.qty
      from txndetsummarise ts
      into :txncode,:prodtype,:extprodref,:qlty,:qty
  do
  begin
    refno=gen_id(genTxnDetRef,1);
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent) values
      (:refno,:txnno,:txncode,:prodtype,:extprodref,:qlty,:qty,
      :todate,0,'now',USER);
  end
  /*set statistics index ITD_PRODTYPETXNDATE;
  set statistics index ITXNDET_EXTPRODREFTXNDATE;
  set statistics index ITXNDET_ORIGTXNCODE;
  set statistics index ITXNDET_TXNNO;*/
end
 ^


ALTER PROCEDURE SPTXNDETSUMMARY 
AS
 
begin
delete from txndetsummary;
insert into txndetsummary
select extprodref,purchcategory
from product;
/*singles yarn*/
insert into txndetsummary
select distinct yntype,ynstru||'/1'
from yarntype
where yntwist='1';
/*twisted yarn: 2S or 2Z or SS or SZ*/
insert into txndetsummary
select distinct yntype,ynstru||'/2'
from yarntype
where yntwist<>'1';
insert into txndetsummary
select extaccname,accname
from ctrlacct;
end
 ^


ALTER PROCEDURE SPVBBOXDETAILSINSERT 
(
  PICKQLTY CHAR(1)
)
AS
 
begin
  /*delete from vbboxdetails;*/
  /*update vbrcpt  removed DL050698 because vbrcpt_setnull trigger added
     set vbrcpt.daterqd=null
   where (vbrcpt.vtordno=0) and (vbrcpt.daterqd is not null);*/
  delete from vbboxdetails;
  insert into vbboxdetails
    select vr.vbstru,vr.vbcol,vr.metricwidth,vr.boxno,sum(vr.netlength),
           vr.vtordno,vr.palletno,vr.lotno,0,vr.daterqd,vr.vbfin,
           sum(vr.allowance), vr.qltyreason
      from vbrcpt vr /*left join vbdesphdr vh left join removed DL201099*/
        /*on vr.despno=vh.despno removed DL201099*/
     /*where ((vh.despsent='N') or (vr.despno=0)) removed DL201099*/
     where (vr.despdate is null) /*added DL201099*/
       and (vr.qlty=:PickQlty)
     group by vr.vbstru,vr.vbcol,vr.metricwidth,vr.boxno,vr.vtordno,
           vr.palletno,vr.lotno,vr.daterqd,vr.vbfin,vr.qltyreason;
  update vbboxdetails
     set vbboxdetails.allocated=netlength
   where vbboxdetails.vtordno<>0;
end
 ^


ALTER PROCEDURE SPVBMAKECALCSALES 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(2);
declare variable metricwidth integer;
declare variable netlength integer; /*double precision*/
declare variable mindate date;
declare variable divbydays integer;
declare variable avesale89 integer;
declare variable min89 integer;
declare variable avesale127 integer;
declare variable min127 integer;
declare variable avesale2070 integer;
declare variable min2070 integer;
declare variable datediff integer;
declare variable mincalcmultiplier double precision; /*added DL280699*/
declare variable makestkmultiplier double precision; /*added DL280699*/
begin
  /*supplier added DL280699 because ADJUST,ZLITT,SAMPLE*/
  /*etc customers must be ignored when calculating sales*/
  for select vr.vbstru,vr.vbcol,vr.vbfin,min(vh.despdate)
        from vbdesphdr vh,vbrcpt vr,supplier su
       where (vh.despsent='Y')
         and (vh.despno=vr.despno)
         and (vr.qlty='')
         and (vh.custref=su.supref) /*added DL280699*/
         and (su.saleclient='Y') /*added DL280699*/
         and ((vh.ignoreinmincalc='N') or (vh.ignoreinmincalc is null)) /*added DL110700*/
       group by vr.vbstru,vr.vbcol,vr.vbfin
        into :vbstru,:vbcol,:vbfin,:mindate
  do
  begin
    if (mindate is not null) then
    begin
      /*fool the system to allow for date arithmetic*/
      select cast((cast('now' as date)-:mindate) as integer)
        from vbparams
        into :datediff;
      if ((DateDiff)>180) then
      begin
        update vbmake_fintemp
           set vbmake_fintemp.FirstSaleDate=:mindate,
               vbmake_fintemp.MonthsSales=cast ((:datediff/30.3333) as integer),
               vbmake_fintemp.DivByDays=180
         where vbmake_fintemp.vbstru=:vbstru
           and vbmake_fintemp.vbcol=:vbcol
           and vbmake_fintemp.vbfin=:vbfin;
      end
      else
      begin
        update vbmake_fintemp
           set vbmake_fintemp.FirstSaleDate=:mindate,
               vbmake_fintemp.MonthsSales=cast ((:datediff/30.3333) as integer),
               vbmake_fintemp.DivByDays=cast (:datediff as integer)
         where vbmake_fintemp.vbstru=:vbstru
           and vbmake_fintemp.vbcol=:vbcol
           and vbmake_fintemp.vbfin=:vbfin;
      end
    end
  end
  /*calc ave of sales*/
  /*supplier added DL280699, see comment above*/
  for select vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth,sum(netlength)
        from vbdesphdr vh,vbrcpt vr,supplier su
       where (vh.despsent='Y')
         and (vh.despno=vr.despno)
         and (vr.qlty='')
         and (vh.despdate>=(cast(cast('now' as character(11)) as date)-180))
         and (vh.custref=su.supref) /*added DL280699*/
         and (su.saleclient='Y') /*added DL280699*/
         and ((vh.ignoreinmincalc='N') or (vh.ignoreinmincalc is null)) /*added DL110700*/
       group by vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth
        into :vbstru,:vbcol,:vbfin,:metricwidth,:netlength
  do
  begin
    select divbydays
      from vbmake_fintemp
     where vbmake_fintemp.vbstru=:vbstru
       and vbmake_fintemp.vbcol=:vbcol
       and vbmake_fintemp.vbfin=:vbfin
      into :divbydays;
    if (divbydays<>0) then
    begin
      if (metricwidth=89) then
      begin      
        if (divbydays<=30) then
        begin
          AveSale89=netlength;
        end
        else
        begin
          AveSale89=cast((netlength/divbydays*30) as integer);
        end
        update vbmake_fintemp
           set vbmake_fintemp.Sale89=:netlength,
               vbmake_fintemp.avesale89=:avesale89 /*added DL280699*/
         where vbmake_fintemp.vbstru=:vbstru
           and vbmake_fintemp.vbcol=:vbcol
           and vbmake_fintemp.vbfin=:vbfin;
      end
      else
      if (metricwidth=127) then
      begin      
        if (divbydays<=30) then
        begin
          avesale127=netlength;
        end
        else
        begin
          avesale127=cast((netlength/divbydays*30) as integer);
        end
        update vbmake_fintemp
           set vbmake_fintemp.Sale127=:netlength,
               vbmake_fintemp.avesale127=:avesale127 /*added DL280699*/
         where vbmake_fintemp.vbstru=:vbstru
           and vbmake_fintemp.vbcol=:vbcol
           and vbmake_fintemp.vbfin=:vbfin;
      end
      else
      if (metricwidth=2070) then
      begin      
        if (DivByDays<=30) then
        begin
          avesale2070=netlength;
        end
        else
        begin
          avesale2070=cast((netlength/divbydays*30) as integer);
        end
        update vbmake_fintemp
           set vbmake_fintemp.Sale2070=:netlength,
               vbmake_fintemp.avesale2070=:avesale2070 /*added DL280699*/
         where vbmake_fintemp.vbstru=:vbstru
           and vbmake_fintemp.vbcol=:vbcol
           and vbmake_fintemp.vbfin=:vbfin;
      end
    end
  end
  for select vk.vbstru,vk.vbcol,vk.vbfin,vk.vbwidth,
             vk.mincalcmultiplier,vk.makestkmultiplier,
             vf.avesale89,vf.avesale127,vf.avesale2070
        from vbstockmin vk,vbmake_fintemp vf
       where vk.vbstru=vf.vbstru
         and vk.vbcol=vf.vbcol
         and vk.vbfin=vf.vbfin
         /*and vk.vbwidth=:metricwidth -> part cartesian product*/
        into :vbstru,:vbcol,:vbfin,:metricwidth,
             :mincalcmultiplier,:makestkmultiplier,
             :avesale89,:avesale127,:avesale2070
  do
  begin
    if (mincalcmultiplier is null) then
    begin
      mincalcmultiplier=0;
      makestkmultiplier=0;
    end
    if (metricwidth=89) then
    begin      
      if (mincalcmultiplier=-1) then
      begin         
        Min89=AveSale89;
      end
      else if (MinCalcMultiplier=0) then
      begin
        Min89=0;
      end
      else if ((mincalcmultiplier>0) and (mincalcmultiplier<5)) then
      begin
        Min89=aveSale89*mincalcmultiplier;
      end
      else if (mincalcmultiplier>5) then
      begin
        Min89=mincalcmultiplier;
      end
      else
      begin
        Min89=0; /*just in case*/
      end
      update vbmake_fintemp
         set vbmake_fintemp.Min89=:Min89,
             vbmake_fintemp.mincalcmultiplier89=:mincalcmultiplier, /*added DL290699*/
             vbmake_fintemp.makestkmultiplier89=:makestkmultiplier /*added DL290699*/
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=127) then
    begin      
      if (mincalcmultiplier=-1) then
      begin         
        Min127=aveSale127;
      end
      else if (mincalcmultiplier=0) then
      begin
        Min127=0;
      end
      else if ((mincalcmultiplier>0) and (mincalcmultiplier<5)) then
      begin
        Min127=aveSale127*mincalcmultiplier;
      end
      else if (mincalcmultiplier>5) then
      begin
        Min127=mincalcmultiplier;
      end
      else
      begin
        Min127=-2; /*just in case*/
      end
      update vbmake_fintemp
         set vbmake_fintemp.Min127=:Min127,
             vbmake_fintemp.mincalcmultiplier127=:mincalcmultiplier, /*added DL290699*/
             vbmake_fintemp.makestkmultiplier127=:makestkmultiplier /*added DL290699*/
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=2070) then
    begin      
      if (mincalcmultiplier=-1) then
      begin         
        Min2070=aveSale2070;
      end
      else if (mincalcmultiplier=0) then
      begin
        Min2070=0;
      end
      else if ((mincalcmultiplier>0) and (mincalcmultiplier<5)) then
      begin
        Min2070=aveSale2070*mincalcmultiplier;
      end
      else if (mincalcmultiplier>5) then
      begin
        Min2070=mincalcmultiplier;
      end
      else
      begin
        Min2070=-2; /*just in case*/
      end
      update vbmake_fintemp
         set vbmake_fintemp.Min2070=:Min2070,
             vbmake_fintemp.mincalcmultiplier2070=:mincalcmultiplier, /*added DL290699*/
             vbmake_fintemp.makestkmultiplier2070=:makestkmultiplier /*added DL290699*/
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKECOMPUTE 
(
  STKMINQTY INTEGER
)
AS
   
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(2);
declare variable stk127 integer;
declare variable min127 integer;
declare variable ord127 integer;
declare variable stk89 integer;
declare variable min89 integer;
declare variable ord89 integer;
declare variable stk2070 integer;
declare variable min2070 integer;
declare variable ord2070 integer;
declare variable makestkmultiplier89 double precision; /*added DL290699*/
declare variable makestkmultiplier127 double precision; /*added DL290699*/
declare variable makestkmultiplier2070 double precision; /*added DL290699*/
declare variable fwwarpmrqd integer;
declare variable warptype char(2);
declare variable warpcol char(3);
declare variable fwwarpmtoplan integer;
declare variable weftstru char(4);
declare variable wefttwist char(2);
declare variable weftcol char(3);
declare variable wftynrqd integer;
begin
  for select vf.vbstru,vf.vbcol,vf.vbfin,vf.stk127,vf.min127,vf.ord127,
    vf.stk89,vf.min89,vf.ord89,
    vf.stk2070,vf.min2070,vf.ord2070,
    makestkmultiplier89,makestkmultiplier127,makestkmultiplier2070
    from vbmake_fintemp vf
    into :vbstru,:vbcol,:vbfin,:stk127,:min127,:ord127,
    :stk89,:min89,:ord89,
    :stk2070,:min2070,:ord2070,
    :makestkmultiplier89,:makestkmultiplier127,:makestkmultiplier2070
  do
  begin
    if (:Ord127>:Stk127) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.pord127=(:ord127-:stk127)/16
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    if ((:Stk127-:Ord127)<:Min127) then
    begin
      update vbmake_fintemp /*NB: no colon on POrd127 on next line*/
      /*   set vbmake_fintemp.PStk127=(((:Min127*:StkMinQty)+:Ord127-:Stk127)/16)-POrd127 removed DL290699*/
         set vbmake_fintemp.PStk127=(((:Min127*:MakeStkMultiplier127)+:Ord127-:Stk127)/16)-POrd127 /*added DL290699*/
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    if (:Ord89>:Stk89) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.pord89=(:ord89-:stk89)/23
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    if ((:Stk89-:Ord89)<:Min89) then
    begin
      update vbmake_fintemp /*NB: no colon on POrd89 on next line*/
         set vbmake_fintemp.PStk89=(((:Min89*:MakeStkMultiplier89)+:Ord89-:Stk89)/23)-POrd89 /*modified DL290699*/
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    if (:Ord2070>:Stk2070) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.pord2070=(:ord2070-:stk2070)
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    if ((:Stk2070-:Ord2070)<:Min2070) then
    begin
      update vbmake_fintemp /*NB: no colon on POrd2070 on next line*/
         set vbmake_fintemp.PStk2070=(((:Min2070*:MakeStkMultiplier2070)+:Ord2070-:Stk2070))-POrd2070 /*modified DL290699*/
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
  end
  update vbmake_fintemp
     set vbmake_fintemp.PTotOrd=vbmake_fintemp.POrd127+vbmake_fintemp.POrd89+
           vbmake_fintemp.POrd2070,
         vbmake_fintemp.PTotStk=vbmake_fintemp.PStk127+vbmake_fintemp.PStk89+
           vbmake_fintemp.PStk2070,
         vbmake_fintemp.PTotRqd=vbmake_fintemp.POrd127+vbmake_fintemp.POrd89+
           vbmake_fintemp.POrd2070+vbmake_fintemp.PStk127+vbmake_fintemp.PStk89+
           vbmake_fintemp.PStk2070,
         vbmake_fintemp.FWSlitMRqd=vbmake_fintemp.POrd127+vbmake_fintemp.POrd89+
           vbmake_fintemp.POrd2070+vbmake_fintemp.PStk127+vbmake_fintemp.PStk89+
           vbmake_fintemp.PStk2070-vbmake_fintemp.FWIP,
         vbmake_fintemp.FWWarpMRqd=(vbmake_fintemp.POrd127+vbmake_fintemp.POrd89+
           vbmake_fintemp.POrd2070+vbmake_fintemp.PStk127+vbmake_fintemp.PStk89+
           vbmake_fintemp.PStk2070-vbmake_fintemp.FWIP)
                       *vbmake_fintemp.PceWarpLength/vbmake_fintemp.PceFinLength
   where vbmake_fintemp.PceFinLength<>0; /*just in case, you never know :)*/
  /*update the full width piece info added DL290699*/
  update vbmake_fintemp
     set vbmake_fintemp.pcsMIN127=
           vbmake_fintemp.min127/16/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsavesale127=
           vbmake_fintemp.avesale127/16/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsSTK127=
           vbmake_fintemp.stk127/16/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsORD127=
           vbmake_fintemp.ord127/16/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsALLOC127=
           vbmake_fintemp.alloc127/16/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsREMAIN127=
           vbmake_fintemp.remain127/16/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPOrd127=
           vbmake_fintemp.POrd127/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPStk127=
           vbmake_fintemp.PStk127/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsMIN89=
           vbmake_fintemp.min89/23/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsavesale89=
           vbmake_fintemp.avesale89/23/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsSTK89=
           vbmake_fintemp.stk89/23/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsORD89=
           vbmake_fintemp.ord89/23/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsALLOC89=
           vbmake_fintemp.alloc89/23/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsREMAIN89=
           vbmake_fintemp.remain89/23/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPOrd89=
           vbmake_fintemp.POrd89/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPStk89=
           vbmake_fintemp.PStk89/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsMIN2070=
           vbmake_fintemp.min2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsavesale2070=
           vbmake_fintemp.avesale2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsSTK2070=
           vbmake_fintemp.stk2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsORD2070=
           vbmake_fintemp.ord2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsALLOC2070=
           vbmake_fintemp.alloc2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsREMAIN2070=
           vbmake_fintemp.remain2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPOrd2070=
           vbmake_fintemp.POrd2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPStk2070=
           vbmake_fintemp.PStk2070/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsfwip=
           vbmake_fintemp.fwip/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsFWSlitMRqd=
           vbmake_fintemp.FWSlitMRqd/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsFWWarpMRqd=
           vbmake_fintemp.FWWarpMRqd/vbmake_fintemp.pcewarplength,
         vbmake_fintemp.pcsPTotOrd=
           vbmake_fintemp.PTotOrd/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPTotStk=
           vbmake_fintemp.PTotStk/vbmake_fintemp.pcefinlength,
         vbmake_fintemp.pcsPTotRqd=
           vbmake_fintemp.PTotRqd/vbmake_fintemp.pcefinlength
   where ((vbmake_fintemp.pcefinlength<>0) and (vbmake_fintemp.pcewarplength<>0));
  /*summarise warp requirements*/
  for select vf.vbstru,vf.vbcol,sum(vf.fwwarpmrqd)
    from vbmake_fintemp vf
    group by vf.vbstru,vf.vbcol
    having sum(vf.fwwarpmrqd)<>0
    into :vbstru,:vbcol,:fwwarpmrqd
  do
  begin
    update vbmake_warptemp
       set vbmake_warptemp.fwwarpmrqd=:fwwarpmrqd
     where vbmake_warptemp.vbstru=:vbstru
       and vbmake_warptemp.vbcol=:vbcol;    
  end
  update vbmake_warptemp
     set vbmake_warptemp.fwwarpmtoplan=
           vbmake_warptemp.fwwarpmrqd-vbmake_warptemp.wwip-vbmake_warptemp.vwip,
         vbmake_warptemp.pcsrqdtoplan=
           (vbmake_warptemp.fwwarpmrqd-vbmake_warptemp.wwip-
           vbmake_warptemp.vwip)/vbmake_warptemp.pcewarplength,
         vbmake_warptemp.wft1ynrqd=
           (vbmake_warptemp.fwwarpmrqd-vbmake_warptemp.wwip-
           vbmake_warptemp.vwip)/
           vbmake_warptemp.pcewarplength*vbmake_warptemp.PceWft1Weight,
         /*next two lines added DL290699*/
         vbmake_warptemp.pcswwip=
           vbmake_warptemp.wwip/vbmake_warptemp.pcewarplength,
         vbmake_warptemp.pcsvwip=
           vbmake_warptemp.vwip/vbmake_warptemp.pcewarplength
   where vbmake_warptemp.pcewarplength<>0;
  update vbmake_warptemp
     set vbmake_warptemp.pcsrqdtoplan=0,
         vbmake_warptemp.wft1ynrqd=0
   where vbmake_warptemp.pcsrqdtoplan<0;
  /*summarise warp yarn requirements*/
  for select vw.warptype,vw.warpcol,sum(vw.fwwarpmtoplan)
    from vbmake_warptemp vw
    group by vw.warptype,vw.warpcol
    having sum(vw.fwwarpmtoplan)<>0
    into :warptype,:warpcol,:fwwarpmtoplan
  do
  begin
    update vbmake_wpyarntemp
       set vbmake_wpyarntemp.wpynmrqd=:fwwarpmtoplan,
           vbmake_wpyarntemp.wpynrqd=
             :fwwarpmtoplan-vbmake_wpyarntemp.wpynstockmetres
     where vbmake_wpyarntemp.wptype=:warptype
       and vbmake_wpyarntemp.wpcol=:warpcol;
  end
  update vbmake_wpyarntemp
     set vbmake_wpyarntemp.wpynmrqd=0
   where (vbmake_wpyarntemp.wpynmrqd<0)
      or (vbmake_wpyarntemp.wpynmrqd is null);
  update vbmake_wpyarntemp
     set vbmake_wpyarntemp.wpynrqd=0
   where (vbmake_wpyarntemp.wpynrqd<0)
      or (vbmake_wpyarntemp.wpynrqd is null);
  update vbmake_wpyarntemp
     set vbmake_wpyarntemp.wpyntospin=
           vbmake_wpyarntemp.wpynrqd*
           vbmake_wpyarntemp.wpynmetrestokgs;
  /*summarise weft yarn requirements*/
  for select vw.weft1stru,vw.weft1twist,vw.weft1col,sum(vw.wft1ynrqd)
    from vbmake_warptemp vw
    group by vw.weft1stru,vw.weft1twist,vw.weft1col
    having sum(vw.wft1ynrqd)<>0
    into :weftstru,:wefttwist,:weftcol,:wftynrqd
  do
  begin
    update vbmake_wtyarntemp
       set vbmake_wtyarntemp.wftynrqd=:wftynrqd
     where vbmake_wtyarntemp.ynstru=:weftstru
       and vbmake_wtyarntemp.yntwist=:wefttwist
       and vbmake_wtyarntemp.yncol=:weftcol;
  end
  update vbmake_wtyarntemp
     set vbmake_wtyarntemp.wftyntospin=
           vbmake_wtyarntemp.wftynrqd-vbmake_wtyarntemp.wftynstock;
  update vbmake_wtyarntemp
     set vbmake_wtyarntemp.wftyntospin=0
   where vbmake_wtyarntemp.wftyntospin<0;
end
 ^


ALTER PROCEDURE SPVBMAKEDELETE 
AS
     
begin
  /*delete from vbmake_fin; -- removed DL020301*/
  /*delete from vbmake_warp; -- removed DL020301*/
  /*delete from vbmake_wpyarn; -- removed DL020305*/
  /*delete from vbmake_wtyarn; -- removed DL020305*/
  delete from vbmake_fintemp; /*added DL020228*/
  delete from vbmake_warptemp;  /*added DL020228*/
  delete from vbmake_wpyarntemp; /*added DL020305*/
  delete from vbmake_wtyarntemp; /*added DL020305*/
end
 ^


ALTER PROCEDURE SPVBMAKEFINDALLOC 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(3);
declare variable metricwidth integer;
declare variable allocated integer;
begin
  for select vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth,sum(vr.netlength)
    from vbrcpt vr
    where (vr.vtordno<>0)
    and (vr.despdate is null)
    group by vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth
    into :vbstru,:vbcol,:vbfin,:metricwidth,:allocated
  do
  begin
    if (:metricwidth=89) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.alloc89=:allocated,
             vbmake_fintemp.remain89=vbmake_fintemp.stk89-:allocated
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (:metricwidth=127) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.alloc127=:allocated,
             vbmake_fintemp.remain127=vbmake_fintemp.stk127-:allocated
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (:metricwidth=2070) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.alloc2070=:allocated,
             vbmake_fintemp.remain2070=vbmake_fintemp.stk2070-:allocated
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDFIN 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(3);
declare variable finlength integer;
begin
  for select fr.vbstru,fr.vbcol,fr.vbfin,sum(fr.finlength)
    from greigercpt gr,finrcptdaily fr
    where gr.warpno=fr.warpno 
    and gr.greigeno=fr.greigeno
    and gr.status='F'
    group by fr.vbstru,fr.vbcol,fr.vbfin
    having sum(fr.finlength)<>0
    into :vbstru,:vbcol,:vbfin,:finlength
  do
  begin
    update vbmake_fintemp
       set vbmake_fintemp.fwip=:finlength
     where vbmake_fintemp.vbstru=:vbstru
       and vbmake_fintemp.vbcol=:vbcol
       and vbmake_fintemp.vbfin=:vbfin;   
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDISCON 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(3);
declare variable metricwidth integer;
begin
  for select vbstru,vbcol,vbfin,vbwidth
        from vbstockmin
       where salegroup='DISCON'
        into :vbstru,:vbcol,:vbfin,:metricwidth
  do
  begin
    if (metricwidth=89) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.Discon89='Y'
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=127) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.Discon127='Y'
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=2070) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.Discon2070='Y'
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDORDERS 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(3);
declare variable metricwidth integer;
declare variable qtyrem integer;
begin
  for select vod.vbstru,vod.vbcol,vod.vbfin,vod.vbwidth,sum(vod.qty-vod.qtydel)
    from vborddet vod
    where vod.status<>'C'
    group by vod.vbstru,vod.vbcol,vod.vbfin,vod.vbwidth
    having sum(vod.qty-vod.qtydel)<>0
    into :vbstru,:vbcol,:vbfin,:metricwidth,:qtyrem
  do
  begin
    if (metricwidth=89) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.ord89=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=127) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.ord127=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=2070) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.ord2070=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDORDERSHELD 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(3);
declare variable metricwidth integer;
declare variable qtyrem double precision;
begin
  for select vo.vbstru,vo.vbcol,vo.vbfin,vo.vbwidth,
    sum((vo.qty-vo.qtydel)/vw.strips/vs.pcefinlength)
  from vbordhdr vh,vborddet vo,vbwidth vw,vbstru vs
  where vh.vtordno=vo.vtordno
    and vo.status<>'C'
    and vh.orderheld='Y'
    and vo.vbwidth=vw.metricwidth
    and vo.vbstru=vs.vbstru
  group by vo.vbstru,vo.vbcol,vo.vbfin,vo.vbwidth
  having sum((vo.qty-vo.qtydel)/vw.strips/vs.pcefinlength)<>0
    into :vbstru,:vbcol,:vbfin,:metricwidth,:qtyrem
  do
  begin
    if (metricwidth=89) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.PCSPHeldORD89=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=127) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.PCSPHeldORD127=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=2070) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.PCSPHeldORD2070=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDORDERSNOTHELD 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(3);
declare variable metricwidth integer;
declare variable qtyrem double precision;
begin
  for select vo.vbstru,vo.vbcol,vo.vbfin,vo.vbwidth,
    sum((vo.qty-vo.qtydel)/vw.strips/vs.pcefinlength)
  from vbordhdr vh,vborddet vo,vbwidth vw,vbstru vs
  where vh.vtordno=vo.vtordno
    and vo.status<>'C'
    and vh.orderheld='N'
    and vo.vbwidth=vw.metricwidth
    and vo.vbstru=vs.vbstru
  group by vo.vbstru,vo.vbcol,vo.vbfin,vo.vbwidth
  having sum((vo.qty-vo.qtydel)/vw.strips/vs.pcefinlength)<>0
    into :vbstru,:vbcol,:vbfin,:metricwidth,:qtyrem
  do
  begin
    if (metricwidth=89) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.PCSPNotHeldORD89=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=127) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.PCSPNotHeldORD127=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
    else
    if (metricwidth=2070) then
    begin
      update vbmake_fintemp
        set vbmake_fintemp.PCSPNotHeldORD2070=:qtyrem
        where vbmake_fintemp.vbstru=:vbstru
        and vbmake_fintemp.vbcol=:vbcol
        and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDSLIT 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(2);
declare variable slitlength integer;
declare variable despno integer; /*added DL041099*/
declare variable custref char(6); /*added DL041099*/
begin
  /*left join added DL041099 to allow for incorrect slit receipts that were*/
  /*despatched to ADJUST to correct them. Already done in the greige rcpt summary program*/
  for select fr.vbstru,fr.vbcol,fr.vbfin,sum(vr.grosslength/vw.strips),vr.despno
    from vbwidth vw,greigercpt gr,finrcptdaily fr,vbrcpt vr
    where vr.warpno=gr.warpno
    and vr.greigeno=gr.greigeno
    and fr.warpno=gr.warpno
    and fr.greigeno=gr.greigeno
    and gr.status='F'
    and vr.metricwidth=vw.metricwidth
    and vr.returned='N'
    /*the following join required when more than one*/
    /*finish per greige: amazing it took so long to*/
    /*discover*/
    and fr.warpno=vr.warpno /*added DL060999*/
    and fr.greigeno=vr.greigeno /*added DL060999*/
    and fr.finno=vr.finno /*added DL060999*/
/*  and vr.datemanu<='''+ToDateStr+''' */
    group by fr.vbstru,fr.vbcol,fr.vbfin,vw.strips,vr.despno
    into :vbstru,:vbcol,:vbfin,:slitlength,:despno
  do
  begin
    custref='';
    if (despno<>0) then /*make sure despatch not to ADJUST*/
    begin
      select vh.custref
        from vbdesphdr vh
       where vh.despno=:despno
        into :custref;
      if (custref<>'ADJUST') then
      begin
        despno=0;
      end
    end
    if (despno=0) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.fwip=fwip-:slitlength
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDSTOCK 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable vbfin char(2);
declare variable metricwidth integer;
declare variable netlength double precision;
begin
  for select vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth,sum(vr.netlength)
    from vbrcpt vr
    where (vr.despdate is null)
    and (vr.qlty='')
    and (vr.netlength<>0)
    group by vr.vbstru,vr.vbcol,vr.vbfin,vr.metricwidth
    into :vbstru,:vbcol,:vbfin,:metricwidth,:netlength
  do
  begin
    if (:metricwidth=89) then
    begin
      update vbmake_fintemp
         set vbmake_fintemp.stk89=:netlength
       where vbmake_fintemp.vbstru=:vbstru
         and vbmake_fintemp.vbcol=:vbcol
         and vbmake_fintemp.vbfin=:vbfin;
    end
    else
      if (:metricwidth=127) then
      begin
        update vbmake_fintemp
           set vbmake_fintemp.stk127=:netlength
         where vbmake_fintemp.vbstru=:vbstru
           and vbmake_fintemp.vbcol=:vbcol
           and vbmake_fintemp.vbfin=:vbfin;
      end
      else
        if (:metricwidth=2070) then
        begin
          update vbmake_fintemp
             set vbmake_fintemp.stk2070=:netlength
           where vbmake_fintemp.vbstru=:vbstru
             and vbmake_fintemp.vbcol=:vbcol
             and vbmake_fintemp.vbfin=:vbfin;
        end
  end
  /*added the following to find full width ok to use as full width*/
  /*and full width that must be reslit for any reason.  First Only*/
  /*added DL300699*/
  for select vr.vbstru,vr.vbcol,vr.vbfin,sum(vr.netlength)
    from vbrcpt vr,qltyreason qr
    where (vr.despdate is null)
    and (vr.qlty='')
    and (vr.netlength<>0)
    and (vr.metricwidth=2070)
    and (vr.qltyreason=qr.qltyreason)
    and (qr.reslit='N') /*can be used for FW*/
    group by vr.vbstru,vr.vbcol,vr.vbfin
    into :vbstru,:vbcol,:vbfin,:netlength
  do
  begin
    update vbmake_fintemp
       set vbmake_fintemp.stk2070ok=:netlength,
           vbmake_fintemp.pcsstk2070ok=:netlength/vbmake_fintemp.pcefinlength
     where vbmake_fintemp.vbstru=:vbstru
       and vbmake_fintemp.vbcol=:vbcol
       and vbmake_fintemp.vbfin=:vbfin;
  end
  for select vr.vbstru,vr.vbcol,vr.vbfin,sum(vr.netlength)
    from vbrcpt vr,qltyreason qr
    where (vr.despdate is null)
    and (vr.qlty='')
    and (vr.netlength<>0)
    and (vr.metricwidth=2070)
    and (vr.qltyreason=qr.qltyreason)
    and (qr.reslit='Y') /*must be reslit if going to be used*/
    group by vr.vbstru,vr.vbcol,vr.vbfin
    into :vbstru,:vbcol,:vbfin,:netlength
  do
  begin
    update vbmake_fintemp
       set vbmake_fintemp.stk2070reslit=:netlength,
           vbmake_fintemp.pcsstk2070reslit=:netlength/vbmake_fintemp.pcefinlength
     where vbmake_fintemp.vbstru=:vbstru
       and vbmake_fintemp.vbcol=:vbcol
       and vbmake_fintemp.vbfin=:vbfin;
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDWEAVING 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable weavelength integer;
declare variable greigelength integer;
begin
  for select gr.vbstru,gr.vbcol,sum(gr.weavelength),sum(gr.greigelength)
    from greigercpt gr
    where gr.status='W'
    group by gr.vbstru,gr.vbcol
    having ((sum(gr.greigelength)<>0) or (sum(gr.weavelength)<>0))
    into :vbstru,:vbcol,:weavelength,:greigelength
  do
  begin
    update vbmake_warptemp
       set vbmake_warptemp.wwip=:weavelength-:greigelength,
           vbmake_warptemp.vwip=:greigelength
     where vbmake_warptemp.vbstru=:vbstru
       and vbmake_warptemp.vbcol=:vbcol;
  end
end
 ^


ALTER PROCEDURE SPVBMAKEFINDWOVEN 
AS
  
declare variable vbstru char(3);
declare variable vbcol char(3);
declare variable greigelength integer;
begin
  for select gr.vbstru,gr.vbcol,sum(gr.greigelength)
    from greigercpt gr
    where gr.status='V'
    group by gr.vbstru,gr.vbcol
    having sum(gr.greigelength)<>0
    into :vbstru,:vbcol,:greigelength
  do
  begin
    update vbmake_warptemp
       set vbmake_warptemp.vwip=vwip+:greigelength
     where vbmake_warptemp.vbstru=:vbstru
       and vbmake_warptemp.vbcol=:vbcol;
  end
end
 ^


ALTER PROCEDURE SPVBMAKEMAKELIVE 
AS
     
begin
  /*added DL020228 - removed 020301*/
  /*insert into vbmake_warp
  select * from vbmake_warptemp;
  insert into vbmake_fin
  select * from vbmake_fintemp;*/

  /*added DL020305*/
  insert into vbmake_wpyarn
  select * from vbmake_wpyarntemp;
  insert into vbmake_wtyarn
  select * from vbmake_wtyarntemp;
end
 ^


ALTER PROCEDURE SPVBMAKESETUP 
AS
     
declare variable warptype char(2);
declare variable warpcol char(3);
declare variable warp1stru char(4);
declare variable warp1twist char(2);
declare variable warp1col char(3);
declare variable warpleft integer;
declare variable records_found integer;
declare variable warpno integer;
declare variable greigeno integer;
declare variable finlength integer;
declare variable currentfinlength integer; /*added DL020228*/
declare variable greigelength integer;
declare variable currentgreigelength integer; /*added DL020228*/
begin
  /*fix greigelength & finlength totals*/
  for select grd.warpno,grd.greigeno,sum(grd.greigelength),
      gr.greigelength
    from greigercptdaily grd, greigercpt gr
    where grd.warpno=gr.warpno
    and grd.greigeno=gr.greigeno
    group by grd.warpno,grd.greigeno,gr.greigelength
    having sum(grd.greigelength)<>gr.greigelength
    into :warpno,:greigeno,:greigelength,:currentgreigelength
  do
  begin
    if (greigelength is null) then
    begin
      greigelength=0;
    end
    update greigercpt
      set greigercpt.greigelength=:greigelength
      where greigercpt.warpno=:warpno
      and greigercpt.greigeno=:greigeno;
  end
  for select frd.warpno,frd.greigeno,sum(frd.finlength),
      gr.finlength
    from finrcptdaily frd, greigercpt gr
    where frd.warpno=gr.warpno
    and frd.greigeno=gr.greigeno
    group by frd.warpno,frd.greigeno,gr.finlength
    having sum(frd.finlength)<>gr.finlength
    into :warpno,:greigeno,:finlength,:currentfinlength
  do
  begin
    if (finlength is null) then
    begin
      finlength=0;
    end
    update greigercpt
      set greigercpt.finlength=:finlength
      where greigercpt.warpno=:warpno
      and greigercpt.greigeno=:greigeno;
  end
  insert into vbmake_fintemp (vbstru,vbcol,vbfin,
      pcewarplength,pcefinlength,
      pcspheldord127,pcspheldord89,pcspheldord2070,
      pcspnotheldord127,pcspnotheldord89,pcspnotheldord2070)
    select distinct vt.vbstru,vt.vbcol,vt.vbfin,
      vs.pcewarplength,vs.pcefinlength,
      0,0,0,0,0,0
    from vbtype vt,vbstru vs
    where vt.vbstru=vs.vbstru;
  insert into vbmake_warptemp (vbstru,vbcol,pcewft1weight,
      warptype,warpcol,pcewarplength,
      warp1stru,warp1twist,warp1col,
      weft1stru,weft1twist,weft1col)
    select distinct vt.vbstru,vt.vbcol,vs.weft1weight,
      vt.warptype,vt.warpcol,vs.pcewarplength,
      wc.ynstru1,wc.yntwist1,wc.yncol1,
      vt.weftstru,vt.wefttwist,vt.weftcol
    from vbtype vt,vbstru vs,warpcol wc
    where vt.vbstru=vs.vbstru
      and vt.warptype=wc.warptype
      and vt.warpcol=wc.warpcol;
  insert into vbmake_wpyarntemp (wptype,wpcol,ynstru,yntwist,yncol,
      wpynmetrestokgs)
    select distinct vt.warptype,vt.warpcol,
           wc.ynstru1,wc.yntwist1,wc.yncol1,wt.wpynmetrestokgs
    from vbtype vt,warpcol wc,warptype wt
    where vt.warptype=wc.warptype
    and vt.warpcol=wc.warpcol
    and vt.warptype=wt.warptype;
  for select wr.warptype,wr.warpcol,sum(wr.warpleft)
    from warprcpt wr
    where wr.complete='N'
    group by wr.warptype,wr.warpcol
    into :warptype,:warpcol,:warpleft
  do
  begin
    update vbmake_wpyarntemp
    set vbmake_wpyarntemp.wpynstockmetres=:warpleft
    where vbmake_wpyarntemp.wptype=:warptype
    and vbmake_wpyarntemp.wpcol=:warpcol;
  end
  insert into vbmake_wtyarntemp (ynstru,yntwist,yncol,wftynstock)
    select distinct vt.weftstru,vt.wefttwist,vt.weftcol,
      yt.instock+yt.weavewip
    from vbtype vt,yarntype yt
    where vt.weftstru=yt.ynstru
    and vt.wefttwist=yt.yntwist
    and vt.weftcol=yt.yncol;
end
 ^


ALTER PROCEDURE SPVBPARAMS 
AS
 
begin
  update vbparams
    set  vbparams.makedate='now'
    where vbparams.ref=1;
end
 ^


ALTER PROCEDURE SPVTLOGREF 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genVTLogRef,1);
end
 ^


ALTER PROCEDURE SPVTORDNO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genVTOrdNo,1); 
end
 ^


ALTER PROCEDURE SPWIPRCPTNO 
RETURNS
(
  CODE INTEGER
)
AS
 
begin
  code=gen_id(genWIPRcptNo,1);
end
 ^

SET TERM ; ^
COMMIT WORK;
SET AUTODDL ON;
SET TERM ^ ;


/* Triggers only will work for SQL triggers */

CREATE TRIGGER REPL$AGENT46_I_1_1 FOR AGENT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.AGENTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=46;

END
END
 ^

CREATE TRIGGER REPL$AGENT46_U_1_1 FOR AGENT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.AGENTREF,NEW.AGENTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=46;

END
END
 ^

CREATE TRIGGER REPL$AGENT46_D_1_1 FOR AGENT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.AGENTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=46;

END
END
 ^

CREATE TRIGGER REPL$AGENTFREIG47_I_1_1 FOR AGENTFREIGHT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.AGENTREF||SEP||NEW.FROMDATE||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=47;

END
END
 ^

CREATE TRIGGER REPL$AGENTFREIG47_U_1_1 FOR AGENTFREIGHT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.AGENTREF||SEP||OLD.FROMDATE||SEP||OLD.VBWIDTH,NEW.AGENTREF||SEP||NEW.FROMDATE||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=47;

END
END
 ^

CREATE TRIGGER REPL$AGENTFREIG47_D_1_1 FOR AGENTFREIGHT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.AGENTREF||SEP||OLD.FROMDATE||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=47;

END
END
 ^

CREATE TRIGGER PROD_ORD_INS FOR APORDDET 
ACTIVE AFTER INSERT POSITION 0
as
begin
  update product
     set product.onorder=product.onorder+new.qty
   where product.prodref=new.prodref;
end
 ^

CREATE TRIGGER REPL$APORDDET48_I_1_1 FOR APORDDET 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.EXPDELDATE||SEP||NEW.PRODREF||SEP||NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=48;

END
END
 ^

CREATE TRIGGER PROD_ORD_UPD FOR APORDDET 
ACTIVE AFTER UPDATE POSITION 0
as
begin
  if (new.ordlinecomplete='Y') then
  begin
    update product
       set product.onorder=product.onorder+new.qtyrcvd+
             (old.qty*-1)
     where product.prodref=new.prodref;
  end
  else
  begin
    update product
       set product.onorder=product.onorder+(old.qty*-1)
     where product.prodref=old.prodref;
    update product
       set product.onorder=product.onorder+new.qty
     where product.prodref=new.prodref;
  end
end
 ^

CREATE TRIGGER REPL$APORDDET48_U_1_1 FOR APORDDET 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.EXPDELDATE||SEP||OLD.PRODREF||SEP||OLD.VTORDNO,NEW.EXPDELDATE||SEP||NEW.PRODREF||SEP||NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=48;

END
END
 ^

CREATE TRIGGER PROD_ORD_DELETE_DET FOR APORDDET 
ACTIVE BEFORE DELETE POSITION 0
as
declare variable record_count integer;
begin
  select count(delhead.vtordno)
    from delhead
   where delhead.vtordno=old.vtordno
     and delhead.prodref=old.prodref
     and delhead.expdeldate=old.expdeldate
    into :record_count;
  if (record_count<>0) then
  begin
    exception cannot_delete_order_det;
  end
end
 ^

CREATE TRIGGER REPL$APORDDET48_D_1_1 FOR APORDDET 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.EXPDELDATE||SEP||OLD.PRODREF||SEP||OLD.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=48;

END
END
 ^

CREATE TRIGGER REPL$APORDHDR49_I_1_1 FOR APORDHDR 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=49;

END
END
 ^

CREATE TRIGGER REPL$APORDHDR49_U_1_1 FOR APORDHDR 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VTORDNO,NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=49;

END
END
 ^

CREATE TRIGGER PROD_ORD_DELETE_HDR FOR APORDHDR 
ACTIVE BEFORE DELETE POSITION 0
as
begin
  delete from aporddet
  where aporddet.vtordno=old.vtordno;
end
 ^

CREATE TRIGGER REPL$APORDHDR49_D_1_1 FOR APORDHDR 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=49;

END
END
 ^

CREATE TRIGGER REPL$CTRLACCT51_I_1_1 FOR CTRLACCT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.ACCNAME
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=51;

END
END
 ^

CREATE TRIGGER REPL$CTRLACCT51_U_1_1 FOR CTRLACCT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.ACCNAME,NEW.ACCNAME
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=51;

END
END
 ^

CREATE TRIGGER REPL$CTRLACCT51_D_1_1 FOR CTRLACCT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.ACCNAME
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=51;

END
END
 ^

CREATE TRIGGER REPL$CURRENCY52_I_1_1 FOR CURRENCY 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.CURREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=52;

END
END
 ^

CREATE TRIGGER REPL$CURRENCY52_U_1_1 FOR CURRENCY 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.CURREF,NEW.CURREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=52;

END
END
 ^

CREATE TRIGGER REPL$CURRENCY52_D_1_1 FOR CURRENCY 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.CURREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=52;

END
END
 ^

CREATE TRIGGER REPL$CUSTPART53_I_1_1 FOR CUSTPART 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.CUSTREF||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=53;

END
END
 ^

CREATE TRIGGER REPL$CUSTPART53_U_1_1 FOR CUSTPART 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.CUSTREF||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.CUSTREF||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=53;

END
END
 ^

CREATE TRIGGER REPL$CUSTPART53_D_1_1 FOR CUSTPART 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.CUSTREF||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=53;

END
END
 ^

CREATE TRIGGER REPL$DELBCB54_I_1_1 FOR DELBCB 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.BCBNO||SEP||NEW.DELNO||SEP||NEW.PALLETNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=54;

END
END
 ^

CREATE TRIGGER REPL$DELBCB54_U_1_1 FOR DELBCB 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.BCBNO||SEP||OLD.DELNO||SEP||OLD.PALLETNO,NEW.BCBNO||SEP||NEW.DELNO||SEP||NEW.PALLETNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=54;

END
END
 ^

CREATE TRIGGER REPL$DELBCB54_D_1_1 FOR DELBCB 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.BCBNO||SEP||OLD.DELNO||SEP||OLD.PALLETNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=54;

END
END
 ^

CREATE TRIGGER PROD_DELHEAD_INS FOR DELHEAD 
ACTIVE AFTER INSERT POSITION 5
as begin
update aporddet
   set aporddet.qtyrcvd=aporddet.qtyrcvd+new.qtyrcvd
 where aporddet.vtordno=new.vtordno
   and aporddet.expdeldate=new.expdeldate
   and aporddet.prodref=new.prodref;
update product
   set product.instock=product.instock+new.qtyrcvd,
       product.onorder=product.onorder+(new.qtyrcvd*-1)
 where product.prodref=new.prodref;
end
 ^

CREATE TRIGGER DELHEADINSERTTXNDET FOR DELHEAD 
ACTIVE AFTER INSERT POSITION 15
as
declare variable refno1 integer;
declare variable txnno integer;
declare variable extprodref char(11);
begin
  /*only need insert one row here unless from Dye House*/
  refno1=gen_id(genTxnDetRef,1); /*one for each row in txndet*/
  txnno=gen_id(genTxnDetTxnRef,1); /*one of each txn in txndet*/
  select product.extprodref
    from product
   where product.prodref=new.prodref
    into :extprodref;
  /*increase stock in store*/
  insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent)
    values
      (:refno1,:txnno,'DH','RMP',:extprodref,
       '',new.qtyrcvd,new.deldate,new.delno, /*qlty is blank,not null*/
       new.dateent,new.userent);
  when any do exception eDelHeadInsertTxnDet;
end
 ^

CREATE TRIGGER REPL$DELHEAD55_I_1_1 FOR DELHEAD 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DELNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=55;

END
END
 ^

CREATE TRIGGER PROD_DELHEAD_UPD FOR DELHEAD 
ACTIVE AFTER UPDATE POSITION 5
as begin
update aporddet
   set aporddet.qtyrcvd=aporddet.qtyrcvd+new.qtyrcvd+(old.qtyrcvd*-1)
 where aporddet.vtordno=new.vtordno
   and aporddet.expdeldate=new.expdeldate
   and aporddet.prodref=new.prodref;
update product
   set product.instock=product.instock+(old.qtyrcvd*-1)+new.qtyrcvd,
       product.onorder=product.onorder+old.qtyrcvd+(new.qtyrcvd*-1)
 where product.prodref=new.prodref;
end
 ^

CREATE TRIGGER DELHEADUPDATETXNDET FOR DELHEAD 
ACTIVE AFTER UPDATE POSITION 15
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable refno3 integer;
declare variable refno4 integer;
declare variable txnno integer;
declare variable extprodref char(11);
begin
  /*need two rows here unless from Dye House*/
  /*in which case need four rows*/
  if ((new.supref<>'DHLTI')
      and (new.supref<>'DHTBS')
      and (new.supref<>'DHSAF')) then
  begin
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    select product.extprodref
      from product
     where product.prodref=old.prodref /*just in case prodref changes*/
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,'C1','RMP',:extprodref,
         '',(old.qtyrcvd*-1),new.deldate,old.delno,
                 /*new.deldate so that period balances correct*/
         new.datemod,new.usermod);
    select product.extprodref
      from product
     where product.prodref=new.prodref /*just in case prodref changes*/
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno2,:txnno,'C1','RMP',:extprodref,
         '',new.qtyrcvd,new.deldate,new.delno,
         new.datemod,new.usermod);
  end
  when any do exception eDelHeadUpdateTxnDet;
end
 ^

CREATE TRIGGER REPL$DELHEAD55_U_1_1 FOR DELHEAD 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DELNO,NEW.DELNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=55;

END
END
 ^

CREATE TRIGGER REPL$DELHEAD55_D_1_1 FOR DELHEAD 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DELNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=55;

END
END
 ^

CREATE TRIGGER REPL$DELPALLET56_I_1_1 FOR DELPALLET 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DELNO||SEP||NEW.PALLETNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=56;

END
END
 ^

CREATE TRIGGER REPL$DELPALLET56_U_1_1 FOR DELPALLET 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DELNO||SEP||OLD.PALLETNO,NEW.DELNO||SEP||NEW.PALLETNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=56;

END
END
 ^

CREATE TRIGGER REPL$DELPALLET56_D_1_1 FOR DELPALLET 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DELNO||SEP||OLD.PALLETNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=56;

END
END
 ^

CREATE TRIGGER REPL$DEPT57_I_1_1 FOR DEPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DEPTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=57;

END
END
 ^

CREATE TRIGGER REPL$DEPT57_U_1_1 FOR DEPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DEPTREF,NEW.DEPTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=57;

END
END
 ^

CREATE TRIGGER REPL$DEPT57_D_1_1 FOR DEPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DEPTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=57;

END
END
 ^

CREATE TRIGGER REPL$FABRICLOTN59_I_1_1 FOR FABRICLOTNO 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.WARPLOTNO1||SEP||NEW.WARPLOTNO2||SEP||NEW.WARPSINGLEMULTIPLE||SEP||NEW.WEFTLOTNO1||SEP||NEW.WEFTLOTNO2||SEP||NEW.WEFTSINGLEMULTIPLE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=59;

END
END
 ^

CREATE TRIGGER REPL$FABRICLOTN59_U_1_1 FOR FABRICLOTNO 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.WARPLOTNO1||SEP||OLD.WARPLOTNO2||SEP||OLD.WARPSINGLEMULTIPLE||SEP||OLD.WEFTLOTNO1||SEP||OLD.WEFTLOTNO2||SEP||OLD.WEFTSINGLEMULTIPLE,NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.WARPLOTNO1||SEP||NEW.WARPLOTNO2||SEP||NEW.WARPSINGLEMULTIPLE||SEP||NEW.WEFTLOTNO1||SEP||NEW.WEFTLOTNO2||SEP||NEW.WEFTSINGLEMULTIPLE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=59;

END
END
 ^

CREATE TRIGGER REPL$FABRICLOTN59_D_1_1 FOR FABRICLOTNO 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.WARPLOTNO1||SEP||OLD.WARPLOTNO2||SEP||OLD.WARPSINGLEMULTIPLE||SEP||OLD.WEFTLOTNO1||SEP||OLD.WEFTLOTNO2||SEP||OLD.WEFTSINGLEMULTIPLE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=59;

END
END
 ^

CREATE TRIGGER FINRCPTDAILY_INS FOR FINRCPTDAILY 
ACTIVE AFTER INSERT POSITION 10
as
declare variable findate date;
declare variable finlength integer;
begin
  select max(fd.findate),sum(finlength)
    from finrcptdaily fd
    where fd.warpno=new.warpno
    and fd.greigeno=new.greigeno
    into :findate,:finlength;
  if (finlength is null) then
  begin
    finlength=0;
  end
  /*must old warpno and greigeno be modified?*/
  update greigercpt
    set greigercpt.finlength=:finlength,
          greigercpt.findate=:findate
    where greigercpt.warpno=new.warpno
    and greigercpt.greigeno=new.greigeno;
end
 ^

CREATE TRIGGER REPL$FINRCPTDAI39_I_1_1 FOR FINRCPTDAILY 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FINNO||SEP||NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=39;

END
END
 ^

CREATE TRIGGER FINRCPTDAILY_UPD FOR FINRCPTDAILY 
ACTIVE AFTER UPDATE POSITION 10
as
declare variable findate date;
declare variable finlength integer;
begin
  select max(fd.findate),sum(finlength)
    from finrcptdaily fd
    where fd.warpno=old.warpno
    and fd.greigeno=old.greigeno
    into :findate,:finlength;
  if (finlength is null) then
  begin
    finlength=0;
  end
  /*must old warpno and greigeno be modified?*/
  update greigercpt
    set greigercpt.finlength=:finlength,
          greigercpt.findate=:findate
    where greigercpt.warpno=old.warpno
    and greigercpt.greigeno=old.greigeno;
end
 ^

CREATE TRIGGER REPL$FINRCPTDAI39_U_1_1 FOR FINRCPTDAILY 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FINNO||SEP||OLD.GREIGENO||SEP||OLD.WARPNO,NEW.FINNO||SEP||NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=39;

END
END
 ^

CREATE TRIGGER FINRCPTDAILY_DEL FOR FINRCPTDAILY 
ACTIVE AFTER DELETE POSITION 10
as
declare variable findate date;
begin
  select max(fd.findate)
    from finrcptdaily fd
    where fd.warpno=old.warpno
    and fd.greigeno=old.greigeno
    into :findate;
  update greigercpt
    set greigercpt.finlength=greigercpt.finlength-old.finlength,
          greigercpt.findate=:findate
    where greigercpt.warpno=old.warpno
    and greigercpt.greigeno=old.greigeno;
end
 ^

CREATE TRIGGER REPL$FINRCPTDAI39_D_1_1 FOR FINRCPTDAILY 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FINNO||SEP||OLD.GREIGENO||SEP||OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=39;

END
END
 ^

CREATE TRIGGER GREIGERCPT_INSERTWR FOR GREIGERCPT 
ACTIVE AFTER INSERT POSITION 5
as
begin
  if (new.greigelength<>0) then
  begin
     update warprcpt
           set warprcpt.warpleft=warprcpt.warpleft-new.greigelength
      where warprcpt.warpno=new.warpno;
  end
end
 ^

CREATE TRIGGER REPL$GREIGERCPT40_I_1_1 FOR GREIGERCPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=40;

END
END
 ^

CREATE TRIGGER GREIGERCPT_UPDATEWR FOR GREIGERCPT 
ACTIVE AFTER UPDATE POSITION 5
as
begin
  if (new.greigelength<>old.greigelength) then
  begin
     update warprcpt
           set warprcpt.warpleft=warprcpt.warpleft-new.greigelength+
                                              old.greigelength                                              
      where warprcpt.warpno=new.warpno;
  end
end
 ^

CREATE TRIGGER REPL$GREIGERCPT40_U_1_1 FOR GREIGERCPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.GREIGENO||SEP||OLD.WARPNO,NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=40;

END
END
 ^

CREATE TRIGGER REPL$GREIGERCPT40_D_1_1 FOR GREIGERCPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.GREIGENO||SEP||OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=40;

END
END
 ^

CREATE TRIGGER GREIGERCPTDAILY_INS FOR GREIGERCPTDAILY 
ACTIVE AFTER INSERT POSITION 10
as
declare variable greigedate date;
declare variable greigelength integer;
begin
  select max(gd.greigedate),sum(gd.greigelength)
    from greigercptdaily gd
    where gd.warpno=new.warpno
    and gd.greigeno=new.greigeno
    into :greigedate,:greigelength;
  if (greigelength is null) then
  begin
    greigelength=0;
  end
  update greigercpt
    set greigercpt.greigelength=:greigelength,
        greigercpt.greigedate=:greigedate
    where greigercpt.warpno=new.warpno
    and greigercpt.greigeno=new.greigeno;
end
 ^

CREATE TRIGGER REPL$GREIGERCPT61_I_1_1 FOR GREIGERCPTDAILY 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.GREIGEDATE||SEP||NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=61;

END
END
 ^

CREATE TRIGGER GREIGERCPTDAILY_UPD FOR GREIGERCPTDAILY 
ACTIVE AFTER UPDATE POSITION 10
as
declare variable greigedate date;
declare variable greigelength integer;
begin
  select max(gd.greigedate),sum(gd.greigelength)
    from greigercptdaily gd
    where gd.warpno=new.warpno
    and gd.greigeno=new.greigeno
    into :greigedate,:greigelength;
  if (greigelength is null) then
  begin
    greigelength=0;
  end
  /*must old warpno and greigeno be modified?*/
  update greigercpt
    set greigercpt.greigelength=:greigelength,
        greigercpt.greigedate=:greigedate
    where greigercpt.warpno=new.warpno
    and greigercpt.greigeno=new.greigeno;
end
 ^

CREATE TRIGGER REPL$GREIGERCPT61_U_1_1 FOR GREIGERCPTDAILY 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.GREIGEDATE||SEP||OLD.GREIGENO||SEP||OLD.WARPNO,NEW.GREIGEDATE||SEP||NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=61;

END
END
 ^

CREATE TRIGGER GREIGERCPTDAILY_DEL FOR GREIGERCPTDAILY 
ACTIVE AFTER DELETE POSITION 10
as
declare variable greigedate date;
declare variable greigelength integer;
begin
  select max(gd.greigedate),sum(gd.greigelength)
    from greigercptdaily gd
    where gd.warpno=old.warpno
    and gd.greigeno=old.greigeno
    into :greigedate,:greigelength;
  if (greigelength is null) then
  begin
    greigelength=0;
  end
  /*must old warpno and greigeno be modified?*/
  update greigercpt
    set greigercpt.greigelength=:greigelength,
        greigercpt.greigedate=:greigedate
    where greigercpt.warpno=old.warpno
    and greigercpt.greigeno=old.greigeno;
end
 ^

CREATE TRIGGER REPL$GREIGERCPT61_D_1_1 FOR GREIGERCPTDAILY 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.GREIGEDATE||SEP||OLD.GREIGENO||SEP||OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=61;

END
END
 ^

CREATE TRIGGER REPL$INITIALS62_I_1_1 FOR INITIALS 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.INITIALS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=62;

END
END
 ^

CREATE TRIGGER REPL$INITIALS1_I_1_1 FOR INITIALS 
ACTIVE AFTER INSERT POSITION 32767
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.INITIALS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=1;

END
END
 ^

CREATE TRIGGER REPL$INITIALS62_U_1_1 FOR INITIALS 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.INITIALS,NEW.INITIALS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=62;

END
END
 ^

CREATE TRIGGER REPL$INITIALS1_U_1_1 FOR INITIALS 
ACTIVE AFTER UPDATE POSITION 32767
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.INITIALS,NEW.INITIALS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=1;

END
END
 ^

CREATE TRIGGER REPL$INITIALS62_D_1_1 FOR INITIALS 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.INITIALS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=62;

END
END
 ^

CREATE TRIGGER REPL$INITIALS1_D_1_1 FOR INITIALS 
ACTIVE AFTER DELETE POSITION 32767
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.INITIALS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=1;

END
END
 ^

CREATE TRIGGER REPL$INVFROM63_I_1_1 FOR INVFROM 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.INVREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=63;

END
END
 ^

CREATE TRIGGER REPL$INVFROM63_U_1_1 FOR INVFROM 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.INVREF,NEW.INVREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=63;

END
END
 ^

CREATE TRIGGER REPL$INVFROM63_D_1_1 FOR INVFROM 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.INVREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=63;

END
END
 ^

CREATE TRIGGER ISSUEDETINSERTTRIGGER FOR ISSUEDET 
ACTIVE AFTER INSERT POSITION 15
as
declare variable refno1 integer;
declare variable txnno integer;
declare variable extprodref char(11);
declare variable supplier char(1); /*added DL201097*/
declare variable txncode char(2);
begin
  /*need two rows here including for Dye Houses*/
  refno1=gen_id(genTxnDetRef,1);
  txnno=gen_id(genTxnDetTxnRef,1);
/*  controlacct=''; used when issuing to dye house*/
  /*1) insert the issue from record: decrease the stock*/
  select dept.supplier
    from dept
   where dept.deptref=new.issueto
    into :supplier;
  if ((supplier='N') or
      (new.issueto='DHLTI') or /*just in case the user has put Y next*/
      (new.issueto='DHTBS') or /*to a dye house department*/
      (new.issueto='DHSAF')) then
  begin
    txncode='ID'; 
  end
  else
  begin
    txncode='D1'; /*will force a negative purchase:DH*/
  end
  select product.extprodref
    from product
   where product.prodref=new.prodref
    into :extprodref;
  insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent)
    values
      (:refno1,:txnno,:txncode,'RMP',:extprodref,
       '',(new.qtyissued*-1),new.dateissued,new.issueno,
       new.dateent,new.userent);
  when any do exception eIssueDetInsertTxnDet;
end
 ^

CREATE TRIGGER REPL$ISSUEDET64_I_1_1 FOR ISSUEDET 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.ISSUENO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=64;

END
END
 ^

CREATE TRIGGER REPL$ISSUEDET64_U_1_1 FOR ISSUEDET 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.ISSUENO,NEW.ISSUENO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=64;

END
END
 ^

CREATE TRIGGER REPL$ISSUEDET64_D_1_1 FOR ISSUEDET 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.ISSUENO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=64;

END
END
 ^

CREATE TRIGGER REPL$LOOMSPEC42_I_1_1 FOR LOOMSPEC 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LOOMREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=42;

END
END
 ^

CREATE TRIGGER REPL$LOOMSPEC42_U_1_1 FOR LOOMSPEC 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LOOMREF,NEW.LOOMREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=42;

END
END
 ^

CREATE TRIGGER REPL$LOOMSPEC42_D_1_1 FOR LOOMSPEC 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LOOMREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=42;

END
END
 ^

CREATE TRIGGER REPL$LOOMTYPE43_I_1_1 FOR LOOMTYPE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LOOMTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=43;

END
END
 ^

CREATE TRIGGER REPL$LOOMTYPE43_U_1_1 FOR LOOMTYPE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LOOMTYPE,NEW.LOOMTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=43;

END
END
 ^

CREATE TRIGGER REPL$LOOMTYPE43_D_1_1 FOR LOOMTYPE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LOOMTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=43;

END
END
 ^

CREATE TRIGGER REPL$MEWARPSTAT70_I_1_1 FOR MEWARPSTATS 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=70;

END
END
 ^

CREATE TRIGGER REPL$MEWARPSTAT70_U_1_1 FOR MEWARPSTATS 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.GREIGENO||SEP||OLD.WARPNO,NEW.GREIGENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=70;

END
END
 ^

CREATE TRIGGER REPL$MEWARPSTAT70_D_1_1 FOR MEWARPSTATS 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.GREIGENO||SEP||OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=70;

END
END
 ^

CREATE TRIGGER REPL$PIECERCPT41_I_1_1 FOR PIECERCPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.PIECENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=41;

END
END
 ^

CREATE TRIGGER REPL$PIECERCPT41_U_1_1 FOR PIECERCPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.PIECENO||SEP||OLD.WARPNO,NEW.PIECENO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=41;

END
END
 ^

CREATE TRIGGER REPL$PIECERCPT41_D_1_1 FOR PIECERCPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.PIECENO||SEP||OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=41;

END
END
 ^

CREATE TRIGGER REPL$PRICETYPE145_I_1_1 FOR PRICETYPE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.PRICETYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=145;

END
END
 ^

CREATE TRIGGER REPL$PRICETYPE145_U_1_1 FOR PRICETYPE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.PRICETYPE,NEW.PRICETYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=145;

END
END
 ^

CREATE TRIGGER REPL$PRICETYPE145_D_1_1 FOR PRICETYPE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.PRICETYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=145;

END
END
 ^

CREATE TRIGGER REPL$PRODCAT75_I_1_1 FOR PRODCAT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.CATEGORY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=75;

END
END
 ^

CREATE TRIGGER REPL$PRODCAT75_U_1_1 FOR PRODCAT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.CATEGORY,NEW.CATEGORY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=75;

END
END
 ^

CREATE TRIGGER REPL$PRODCAT75_D_1_1 FOR PRODCAT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.CATEGORY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=75;

END
END
 ^

CREATE TRIGGER REPL$PRODSUP76_I_1_1 FOR PRODSUP 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.PRODREF||SEP||NEW.SUPREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=76;

END
END
 ^

CREATE TRIGGER REPL$PRODSUP76_U_1_1 FOR PRODSUP 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.PRODREF||SEP||OLD.SUPREF,NEW.PRODREF||SEP||NEW.SUPREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=76;

END
END
 ^

CREATE TRIGGER REPL$PRODSUP76_D_1_1 FOR PRODSUP 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.PRODREF||SEP||OLD.SUPREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=76;

END
END
 ^

CREATE TRIGGER REPL$PRODUCT77_I_1_1 FOR PRODUCT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.PRODREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=77;

END
END
 ^

CREATE TRIGGER REPL$PRODUCT77_U_1_1 FOR PRODUCT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.PRODREF,NEW.PRODREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=77;

END
END
 ^

CREATE TRIGGER REPL$PRODUCT77_D_1_1 FOR PRODUCT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.PRODREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=77;

END
END
 ^

CREATE TRIGGER REPL$QLTYREASON78_I_1_1 FOR QLTYREASON 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.QLTYREASON
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=78;

END
END
 ^

CREATE TRIGGER REPL$QLTYREASON78_U_1_1 FOR QLTYREASON 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.QLTYREASON,NEW.QLTYREASON
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=78;

END
END
 ^

CREATE TRIGGER REPL$QLTYREASON78_D_1_1 FOR QLTYREASON 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.QLTYREASON
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=78;

END
END
 ^

CREATE TRIGGER REPL_GEN_SEQNO FOR REPL_LOG 
ACTIVE BEFORE INSERT POSITION 0
AS BEGIN NEW.SEQNO = GEN_ID(REPL_GENERATOR,1);POST_EVENT 'REPLNOW';END
 ^

CREATE TRIGGER REPL$RMTXNDETCA79_I_1_1 FOR RMTXNDETCATEGORY 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.RMTXNDETCATEGORY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=79;

END
END
 ^

CREATE TRIGGER REPL$RMTXNDETCA79_U_1_1 FOR RMTXNDETCATEGORY 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.RMTXNDETCATEGORY,NEW.RMTXNDETCATEGORY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=79;

END
END
 ^

CREATE TRIGGER REPL$RMTXNDETCA79_D_1_1 FOR RMTXNDETCATEGORY 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.RMTXNDETCATEGORY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=79;

END
END
 ^

CREATE TRIGGER REPL$SALEGROUP80_I_1_1 FOR SALEGROUP 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.SALEGROUP
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=80;

END
END
 ^

CREATE TRIGGER REPL$SALEGROUP80_U_1_1 FOR SALEGROUP 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.SALEGROUP,NEW.SALEGROUP
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=80;

END
END
 ^

CREATE TRIGGER REPL$SALEGROUP80_D_1_1 FOR SALEGROUP 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.SALEGROUP
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=80;

END
END
 ^

CREATE TRIGGER REPL$STDCOSTPRI81_I_1_1 FOR STDCOSTPRICES 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.EXTPRODREF||SEP||NEW.FROMDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=81;

END
END
 ^

CREATE TRIGGER REPL$STDCOSTPRI81_U_1_1 FOR STDCOSTPRICES 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.EXTPRODREF||SEP||OLD.FROMDATE,NEW.EXTPRODREF||SEP||NEW.FROMDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=81;

END
END
 ^

CREATE TRIGGER REPL$STDCOSTPRI81_D_1_1 FOR STDCOSTPRICES 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.EXTPRODREF||SEP||OLD.FROMDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=81;

END
END
 ^

CREATE TRIGGER REPL$STDQLTYVAL82_I_1_1 FOR STDQLTYVALUES 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.PRODTYPE||SEP||NEW.QLTY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=82;

END
END
 ^

CREATE TRIGGER REPL$STDQLTYVAL82_U_1_1 FOR STDQLTYVALUES 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.PRODTYPE||SEP||OLD.QLTY,NEW.PRODTYPE||SEP||NEW.QLTY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=82;

END
END
 ^

CREATE TRIGGER REPL$STDQLTYVAL82_D_1_1 FOR STDQLTYVALUES 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.PRODTYPE||SEP||OLD.QLTY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=82;

END
END
 ^

CREATE TRIGGER REPL$STRULOOM83_I_1_1 FOR STRULOOM 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LOOMTYPE||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=83;

END
END
 ^

CREATE TRIGGER REPL$STRULOOM83_U_1_1 FOR STRULOOM 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LOOMTYPE||SEP||OLD.VBSTRU,NEW.LOOMTYPE||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=83;

END
END
 ^

CREATE TRIGGER REPL$STRULOOM83_D_1_1 FOR STRULOOM 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LOOMTYPE||SEP||OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=83;

END
END
 ^

CREATE TRIGGER REPL$SUPPLIER21_I_1_1 FOR SUPPLIER 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.SUPREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=21;

END
END
 ^

CREATE TRIGGER REPL$SUPPLIER21_U_1_1 FOR SUPPLIER 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.SUPREF,NEW.SUPREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=21;

END
END
 ^

CREATE TRIGGER REPL$SUPPLIER21_D_1_1 FOR SUPPLIER 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.SUPREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=21;

END
END
 ^

CREATE TRIGGER REPL$TERMS84_I_1_1 FOR TERMS 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.TERMS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=84;

END
END
 ^

CREATE TRIGGER REPL$TERMS84_U_1_1 FOR TERMS 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.TERMS,NEW.TERMS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=84;

END
END
 ^

CREATE TRIGGER REPL$TERMS84_D_1_1 FOR TERMS 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.TERMS
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=84;

END
END
 ^

CREATE TRIGGER REPL$TXNDET86_I_1_1 FOR TXNDET 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=86;

END
END
 ^

CREATE TRIGGER REPL$TXNDET86_U_1_1 FOR TXNDET 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.REF,NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=86;

END
END
 ^

CREATE TRIGGER REPL$TXNDET86_D_1_1 FOR TXNDET 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=86;

END
END
 ^

CREATE TRIGGER REPL$UNIT90_I_1_1 FOR UNIT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.UNITREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=90;

END
END
 ^

CREATE TRIGGER REPL$UNIT90_U_1_1 FOR UNIT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.UNITREF,NEW.UNITREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=90;

END
END
 ^

CREATE TRIGGER REPL$UNIT90_D_1_1 FOR UNIT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.UNITREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=90;

END
END
 ^

CREATE TRIGGER REPL$VBCOLOURSE146_I_1_1 FOR VBCOLOURSELECTION 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.CUSTREF||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=146;

END
END
 ^

CREATE TRIGGER REPL$VBCOLOURSE146_U_1_1 FOR VBCOLOURSELECTION 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.CUSTREF||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.CUSTREF||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=146;

END
END
 ^

CREATE TRIGGER REPL$VBCOLOURSE146_D_1_1 FOR VBCOLOURSELECTION 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.CUSTREF||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=146;

END
END
 ^

CREATE TRIGGER VBDESPHDR_INS FOR VBDESPHDR 
ACTIVE AFTER INSERT POSITION 0
as
begin
  /* note: vborddet update is currently done in vbpalhdr.pas */
  if (new.despsent='Y') then
  begin
    update vbrcpt
           set vbrcpt.despdate=new.despdate
     where vbrcpt.despno=new.despno;
    update vbrcpt
       set vbrcpt.vtorddetitemno=
      (
      select vborddet.itemno
        from vborddet
       where vborddet.vbstru=vbrcpt.vbstru
         and vborddet.vbcol=vbrcpt.vbcol
         and vborddet.vbfin=vbrcpt.vbfin
         and vborddet.vbwidth=vbrcpt.metricwidth
         and vborddet.vtordno=vbrcpt.vtordno
         and vborddet.daterqd=vbrcpt.daterqd
         and vborddet.itemno is not null
       )
     where vbrcpt.despno=new.despno;
  end
end
 ^

CREATE TRIGGER REPL$VBDESPHDR22_I_1_1 FOR VBDESPHDR 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DESPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=22;

END
END
 ^

CREATE TRIGGER VBDESPHDR_UPD FOR VBDESPHDR 
ACTIVE AFTER UPDATE POSITION 0
as
begin
  /* note: vborddet update is currently done in vbpalhdr.pas */
  if ((new.despsent='Y') and (old.despsent='N')) then
  begin
    update vbrcpt
           set vbrcpt.despdate=new.despdate
     where vbrcpt.despno=new.despno;
    update vbrcpt
       set vbrcpt.vtorddetitemno=
      (
      select vborddet.itemno
        from vborddet
       where vborddet.vbstru=vbrcpt.vbstru
         and vborddet.vbcol=vbrcpt.vbcol
         and vborddet.vbfin=vbrcpt.vbfin
         and vborddet.vbwidth=vbrcpt.metricwidth
         and vborddet.vtordno=vbrcpt.vtordno
         and vborddet.daterqd=vbrcpt.daterqd
         and vborddet.itemno is not null
       )
     where vbrcpt.despno=new.despno;
  end
end
 ^

CREATE TRIGGER REPL$VBDESPHDR22_U_1_1 FOR VBDESPHDR 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DESPNO,NEW.DESPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=22;

END
END
 ^

CREATE TRIGGER REPL$VBDESPHDR22_D_1_1 FOR VBDESPHDR 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DESPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=22;

END
END
 ^

CREATE TRIGGER REPL$VBFIN98_I_1_1 FOR VBFIN 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBFIN
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=98;

END
END
 ^

CREATE TRIGGER REPL$VBFIN98_U_1_1 FOR VBFIN 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBFIN,NEW.VBFIN
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=98;

END
END
 ^

CREATE TRIGGER REPL$VBFIN98_D_1_1 FOR VBFIN 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBFIN
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=98;

END
END
 ^

CREATE TRIGGER REPL$VBINVDET99_I_1_1 FOR VBINVDET 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DESPNO||SEP||NEW.INVNO||SEP||NEW.LINENO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=99;

END
END
 ^

CREATE TRIGGER REPL$VBINVDET99_U_1_1 FOR VBINVDET 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DESPNO||SEP||OLD.INVNO||SEP||OLD.LINENO,NEW.DESPNO||SEP||NEW.INVNO||SEP||NEW.LINENO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=99;

END
END
 ^

CREATE TRIGGER REPL$VBINVDET99_D_1_1 FOR VBINVDET 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DESPNO||SEP||OLD.INVNO||SEP||OLD.LINENO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=99;

END
END
 ^

CREATE TRIGGER REPL$VBINVHDR100_I_1_1 FOR VBINVHDR 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DESPNO||SEP||NEW.INVNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=100;

END
END
 ^

CREATE TRIGGER REPL$VBINVHDR100_U_1_1 FOR VBINVHDR 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DESPNO||SEP||OLD.INVNO,NEW.DESPNO||SEP||NEW.INVNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=100;

END
END
 ^

CREATE TRIGGER REPL$VBINVHDR100_D_1_1 FOR VBINVHDR 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DESPNO||SEP||OLD.INVNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=100;

END
END
 ^

CREATE TRIGGER REPL$VBINVHDREX101_I_1_1 FOR VBINVHDREXTRA 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DESPNO||SEP||NEW.INVNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=101;

END
END
 ^

CREATE TRIGGER REPL$VBINVHDREX101_U_1_1 FOR VBINVHDREXTRA 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DESPNO||SEP||OLD.INVNO,NEW.DESPNO||SEP||NEW.INVNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=101;

END
END
 ^

CREATE TRIGGER REPL$VBINVHDREX101_D_1_1 FOR VBINVHDREXTRA 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DESPNO||SEP||OLD.INVNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=101;

END
END
 ^

CREATE TRIGGER REPL$VBLABELSTR102_I_1_1 FOR VBLABELSTRU 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LABELSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=102;

END
END
 ^

CREATE TRIGGER REPL$VBLABELSTR102_U_1_1 FOR VBLABELSTRU 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LABELSTRU,NEW.LABELSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=102;

END
END
 ^

CREATE TRIGGER REPL$VBLABELSTR102_D_1_1 FOR VBLABELSTRU 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LABELSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=102;

END
END
 ^

CREATE TRIGGER REPL$VBLSP103_I_1_1 FOR VBLSP 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FROMDATE||SEP||NEW.PRICETYPE||SEP||NEW.QLTY||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=103;

END
END
 ^

CREATE TRIGGER REPL$VBLSP103_U_1_1 FOR VBLSP 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FROMDATE||SEP||OLD.PRICETYPE||SEP||OLD.QLTY||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.FROMDATE||SEP||NEW.PRICETYPE||SEP||NEW.QLTY||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=103;

END
END
 ^

CREATE TRIGGER REPL$VBLSP103_D_1_1 FOR VBLSP 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FROMDATE||SEP||OLD.PRICETYPE||SEP||OLD.QLTY||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=103;

END
END
 ^

CREATE TRIGGER REPL$VBLSPSTD104_I_1_1 FOR VBLSPSTD 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FROMDATE||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=104;

END
END
 ^

CREATE TRIGGER REPL$VBLSPSTD104_U_1_1 FOR VBLSPSTD 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FROMDATE||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.FROMDATE||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=104;

END
END
 ^

CREATE TRIGGER REPL$VBLSPSTD104_D_1_1 FOR VBLSPSTD 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FROMDATE||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=104;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE105_I_1_1 FOR VBMAKE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=105;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE105_U_1_1 FOR VBMAKE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU,NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=105;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE105_D_1_1 FOR VBMAKE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=105;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_FIN23_I_1_1 FOR VBMAKE_FIN 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=23;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_FIN23_U_1_1 FOR VBMAKE_FIN 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU,NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=23;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_FIN23_D_1_1 FOR VBMAKE_FIN 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=23;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WAR24_I_1_1 FOR VBMAKE_WARP 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBCOL||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=24;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WAR24_U_1_1 FOR VBMAKE_WARP 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBCOL||SEP||OLD.VBSTRU,NEW.VBCOL||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=24;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WAR24_D_1_1 FOR VBMAKE_WARP 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBCOL||SEP||OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=24;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WPY44_I_1_1 FOR VBMAKE_WPYARN 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.WPCOL||SEP||NEW.WPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=44;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WPY44_U_1_1 FOR VBMAKE_WPYARN 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.WPCOL||SEP||OLD.WPTYPE,NEW.WPCOL||SEP||NEW.WPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=44;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WPY44_D_1_1 FOR VBMAKE_WPYARN 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.WPCOL||SEP||OLD.WPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=44;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WTY45_I_1_1 FOR VBMAKE_WTYARN 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.YNCOL||SEP||NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=45;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WTY45_U_1_1 FOR VBMAKE_WTYARN 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.YNCOL||SEP||OLD.YNSTRU||SEP||OLD.YNTWIST,NEW.YNCOL||SEP||NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=45;

END
END
 ^

CREATE TRIGGER REPL$VBMAKE_WTY45_D_1_1 FOR VBMAKE_WTYARN 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.YNCOL||SEP||OLD.YNSTRU||SEP||OLD.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=45;

END
END
 ^

CREATE TRIGGER REPL$VBNEXTNO113_I_1_1 FOR VBNEXTNO 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=113;

END
END
 ^

CREATE TRIGGER REPL$VBNEXTNO113_U_1_1 FOR VBNEXTNO 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.REF,NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=113;

END
END
 ^

CREATE TRIGGER REPL$VBNEXTNO113_D_1_1 FOR VBNEXTNO 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=113;

END
END
 ^

CREATE TRIGGER REPL$VBORDDET25_I_1_1 FOR VBORDDET 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DATERQD||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH||SEP||NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=25;

END
END
 ^

CREATE TRIGGER REPL$VBORDDET25_U_1_1 FOR VBORDDET 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DATERQD||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH||SEP||OLD.VTORDNO,NEW.DATERQD||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH||SEP||NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=25;

END
END
 ^

CREATE TRIGGER REPL$VBORDDET25_D_1_1 FOR VBORDDET 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DATERQD||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH||SEP||OLD.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=25;

END
END
 ^

CREATE TRIGGER POST_NEW_VBORDHDR FOR VBORDHDR 
ACTIVE AFTER INSERT POSITION 10
as begin
post_event 'new_vborder';
end
 ^

CREATE TRIGGER REPL$VBORDHDR26_I_1_1 FOR VBORDHDR 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=26;

END
END
 ^

CREATE TRIGGER REPL$VBORDHDR26_U_1_1 FOR VBORDHDR 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VTORDNO,NEW.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=26;

END
END
 ^

CREATE TRIGGER REPL$VBORDHDR26_D_1_1 FOR VBORDHDR 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VTORDNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=26;

END
END
 ^

CREATE TRIGGER REPL$VBOSP114_I_1_1 FOR VBOSP 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.CUSTREF||SEP||NEW.FROMDATE||SEP||NEW.PRICETYPE||SEP||NEW.QLTY||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=114;

END
END
 ^

CREATE TRIGGER REPL$VBOSP114_U_1_1 FOR VBOSP 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.CUSTREF||SEP||OLD.FROMDATE||SEP||OLD.PRICETYPE||SEP||OLD.QLTY||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.CUSTREF||SEP||NEW.FROMDATE||SEP||NEW.PRICETYPE||SEP||NEW.QLTY||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=114;

END
END
 ^

CREATE TRIGGER REPL$VBOSP114_D_1_1 FOR VBOSP 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.CUSTREF||SEP||OLD.FROMDATE||SEP||OLD.PRICETYPE||SEP||OLD.QLTY||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=114;

END
END
 ^

CREATE TRIGGER REPL$VBPARAMS27_I_1_1 FOR VBPARAMS 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=27;

END
END
 ^

CREATE TRIGGER REPL$VBPARAMS27_U_1_1 FOR VBPARAMS 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.REF,NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=27;

END
END
 ^

CREATE TRIGGER REPL$VBPARAMS27_D_1_1 FOR VBPARAMS 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=27;

END
END
 ^

CREATE TRIGGER REPL$VBPLACE148_I_1_1 FOR VBPLACE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=148;

END
END
 ^

CREATE TRIGGER REPL$VBPLACE148_U_1_1 FOR VBPLACE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.REF,NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=148;

END
END
 ^

CREATE TRIGGER REPL$VBPLACE148_D_1_1 FOR VBPLACE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=148;

END
END
 ^

CREATE TRIGGER REPL$VBPRICESST116_I_1_1 FOR VBPRICESSTD 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FROMDATE||SEP||NEW.QLTY||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=116;

END
END
 ^

CREATE TRIGGER REPL$VBPRICESST116_U_1_1 FOR VBPRICESSTD 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FROMDATE||SEP||OLD.QLTY||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.FROMDATE||SEP||NEW.QLTY||SEP||NEW.TODATE||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=116;

END
END
 ^

CREATE TRIGGER REPL$VBPRICESST116_D_1_1 FOR VBPRICESSTD 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FROMDATE||SEP||OLD.QLTY||SEP||OLD.TODATE||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=116;

END
END
 ^

CREATE TRIGGER REPL$VBQLTY117_I_1_1 FOR VBQLTY 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.QLTY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=117;

END
END
 ^

CREATE TRIGGER REPL$VBQLTY117_U_1_1 FOR VBQLTY 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.QLTY,NEW.QLTY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=117;

END
END
 ^

CREATE TRIGGER REPL$VBQLTY117_D_1_1 FOR VBQLTY 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.QLTY
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=117;

END
END
 ^

CREATE TRIGGER REPL$VBRCPT28_I_1_1 FOR VBRCPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.PIECENO||SEP||NEW.SEQNO||SEP||NEW.STRIPNO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=28;

END
END
 ^

CREATE TRIGGER VBRCPT_SETNULL FOR VBRCPT 
ACTIVE BEFORE UPDATE POSITION 5
as
begin
  if ((new.vtordno=0) and (new.daterqd is not null)) then 
  begin
    new.daterqd=null;
  end
end
 ^

CREATE TRIGGER VBRCPT_TRACKUPDATE FOR VBRCPT 
ACTIVE AFTER UPDATE POSITION 10
as
  declare variable trackingref1 integer;
  declare variable trackingref2 integer;
begin
  /*only run if palletno and despno<>0 and not picked*/
  if ((new.palletno=0) and (new.despno=0) and (new.vtordno=0)) then
  begin
    if (((old.vbstru<>new.vbstru) or (old.vbcol<>new.vbcol) or (old.vbfin<>new.vbfin) or
         (old.lotno<>new.lotno) or (old.boxno<>new.boxno) or
         (old.datemanu<>new.datemanu) or (old.faults<>new.faults) or
         (old.metricwidth<>new.metricwidth) or
         (old.grosslength<>new.grosslength) or (old.warpno<>new.warpno) or
         (old.pieceno<>new.pieceno) or (old.stripno<>new.stripno) or
         (old.initials<>new.initials) or (old.datercvd<>new.datercvd) or
         (old.qlty<>new.qlty) or (old.rollno<>new.rollno) or
         (old.netlength<>new.netlength) or (old.allowance<>new.allowance) or
         (old.labelstru<>new.labelstru) or (old.greigeno<>new.greigeno) or
         (old.returned<>new.returned) or (old.finno<>new.finno)) 
      and ( cast(old.datemod as character(11))
                <>cast(new.datemod as character(11)) )) then
    begin
      /*first fetch the next two trackingref's*/ 
      trackingref1=gen_id(genVBRcptTrackRef,1);
      trackingref2=gen_id(genVBRcptTrackRef,1);
      /* by the time we get here all checks are done*/
      insert into vbrcpttrack
        (trackingref,vbstru,vbcol,lotno,boxno,datemanu,
         faults,metricwidth,grosslength,warpno,pieceno,
         stripno,initials,datercvd,qlty,rollno,
         netlength,allowance,labelstru,greigeno,returned,datemod,
         usermod,finno,vbfin)
        values
        (:trackingref1,old.vbstru,old.vbcol,old.lotno,old.boxno,
         new.datemanu,  
         old.faults,old.metricwidth,old.grosslength*-1,old.warpno,
         old.pieceno,
         old.stripno,old.initials,old.datercvd,old.qlty,old.rollno,
         old.netlength*-1,old.allowance*-1,
         old.labelstru,old.greigeno,
         old.returned,new.datemod,new.usermod,old.finno,old.vbfin);
      insert into vbrcpttrack
        (trackingref,vbstru,vbcol,lotno,boxno,datemanu,
         faults,metricwidth,grosslength,warpno,pieceno,
         stripno,initials,datercvd,qlty,rollno,
         netlength,allowance,labelstru,greigeno,returned,datemod,
         usermod,finno,vbfin)
        values
        (:trackingref2,new.vbstru,new.vbcol,new.lotno,new.boxno,
         new.datemanu ,
         new.faults,new.metricwidth,new.grosslength,new.warpno,new.pieceno,
         new.stripno,new.initials,new.datercvd,new.qlty,new.rollno,
         new.netlength,new.allowance,new.labelstru,
         new.greigeno,
         new.returned,new.datemod,new.usermod,new.finno,new.vbfin);
    end
  end
end
 ^

CREATE TRIGGER REPL$VBRCPT28_U_1_1 FOR VBRCPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.PIECENO||SEP||OLD.SEQNO||SEP||OLD.STRIPNO||SEP||OLD.WARPNO,NEW.PIECENO||SEP||NEW.SEQNO||SEP||NEW.STRIPNO||SEP||NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=28;

END
END
 ^

CREATE TRIGGER REPL$VBRCPT28_D_1_1 FOR VBRCPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.PIECENO||SEP||OLD.SEQNO||SEP||OLD.STRIPNO||SEP||OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=28;

END
END
 ^

CREATE TRIGGER REPL$VBRCPTTRAC119_I_1_1 FOR VBRCPTTRACK 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.TRACKINGREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=119;

END
END
 ^

CREATE TRIGGER REPL$VBRCPTTRAC119_U_1_1 FOR VBRCPTTRACK 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.TRACKINGREF,NEW.TRACKINGREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=119;

END
END
 ^

CREATE TRIGGER REPL$VBRCPTTRAC119_D_1_1 FOR VBRCPTTRACK 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.TRACKINGREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=119;

END
END
 ^

CREATE TRIGGER REPL$VBSTOCKMIN122_I_1_1 FOR VBSTOCKMIN 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=122;

END
END
 ^

CREATE TRIGGER REPL$VBSTOCKMIN122_U_1_1 FOR VBSTOCKMIN 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=122;

END
END
 ^

CREATE TRIGGER REPL$VBSTOCKMIN122_D_1_1 FOR VBSTOCKMIN 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=122;

END
END
 ^

CREATE TRIGGER REPL$VBSTRU1_I_1_1 FOR VBSTRU 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=1;

END
END
 ^

CREATE TRIGGER REPL$VBSTRU1_U_1_1 FOR VBSTRU 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBSTRU,NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=1;

END
END
 ^

CREATE TRIGGER REPL$VBSTRU1_D_1_1 FOR VBSTRU 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=1;

END
END
 ^

CREATE TRIGGER REPL$VBSTRUWEIG124_I_1_1 FOR VBSTRUWEIGHT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=124;

END
END
 ^

CREATE TRIGGER REPL$VBSTRUWEIG124_U_1_1 FOR VBSTRUWEIGHT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBSTRU||SEP||OLD.VBWIDTH,NEW.VBSTRU||SEP||NEW.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=124;

END
END
 ^

CREATE TRIGGER REPL$VBSTRUWEIG124_D_1_1 FOR VBSTRUWEIGHT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBSTRU||SEP||OLD.VBWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=124;

END
END
 ^

CREATE TRIGGER REPL$VBTYPE29_I_1_1 FOR VBTYPE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=29;

END
END
 ^

CREATE TRIGGER REPL$VBTYPE29_U_1_1 FOR VBTYPE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU,NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=29;

END
END
 ^

CREATE TRIGGER REPL$VBTYPE29_D_1_1 FOR VBTYPE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=29;

END
END
 ^

CREATE TRIGGER REPL$VBTYPECLIE30_I_1_1 FOR VBTYPECLIENT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LABELSTRU||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=30;

END
END
 ^

CREATE TRIGGER REPL$VBTYPECLIE30_U_1_1 FOR VBTYPECLIENT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LABELSTRU||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU,NEW.LABELSTRU||SEP||NEW.VBCOL||SEP||NEW.VBFIN||SEP||NEW.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=30;

END
END
 ^

CREATE TRIGGER REPL$VBTYPECLIE30_D_1_1 FOR VBTYPECLIENT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LABELSTRU||SEP||OLD.VBCOL||SEP||OLD.VBFIN||SEP||OLD.VBSTRU
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=30;

END
END
 ^

CREATE TRIGGER REPL$VBWIDTH31_I_1_1 FOR VBWIDTH 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.METRICWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=31;

END
END
 ^

CREATE TRIGGER REPL$VBWIDTH31_U_1_1 FOR VBWIDTH 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.METRICWIDTH,NEW.METRICWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=31;

END
END
 ^

CREATE TRIGGER REPL$VBWIDTH31_D_1_1 FOR VBWIDTH 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.METRICWIDTH
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=31;

END
END
 ^

CREATE TRIGGER REPL$VBYARNISSU125_I_1_1 FOR VBYARNISSUED 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.BOXNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=125;

END
END
 ^

CREATE TRIGGER REPL$VBYARNISSU125_U_1_1 FOR VBYARNISSUED 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.BOXNO,NEW.BOXNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=125;

END
END
 ^

CREATE TRIGGER REPL$VBYARNISSU125_D_1_1 FOR VBYARNISSUED 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.BOXNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=125;

END
END
 ^

CREATE TRIGGER YRYARNTYPE_INS FOR VBYARNRCPT 
ACTIVE AFTER INSERT POSITION 5
as
begin
  update yarntype
     set yarntype.instock=yarntype.instock+new.ynnet
   where yarntype.ynstru=new.ynstru
     and yarntype.yntwist=new.yntwist
     and yarntype.yncol=new.yncol;
end
 ^

CREATE TRIGGER VBYARNRCPTINSERTTXNDETTRIGGER FOR VBYARNRCPT 
ACTIVE AFTER INSERT POSITION 15
as
declare variable refno integer; /*get the ref nos here as reqd*/
declare variable txnno integer; /*one txn no for the whole txn*/
declare variable extprodref char(11);
/*declare variable accname char(6);*/
/*declare variable rmperkg double precision;*/
/*declare variable wbsweight double precision;*/
declare variable txncode char(2);
declare variable prodtype char(3);
begin
  txnno=gen_id(genTxnDetTxnRef,1);
  if (new.ynqlty='W') then /*WIP*/
  begin
    prodtype='WEW'; /*Weft WIP Yarn*/
    txncode='WF'; /*WEW yarn considered to be from factory*/
  end
  else
  begin
    prodtype='WEF'; /*Weft Yarn*/
    if (new.returned='Y') then
    begin
      txncode='WF'; /*weft yarn from factory*/
    end
    else
    begin
      txncode='WS'; /*weft yarn from supplier (factory 1)*/
    end
  end
  /*1)insert the yarnrcpt record: increase the stock;*/
  /*decrease WIPs (if not returned): WIP not recorded at Weaving factory*/
  select yarntype.yntype
    from yarntype
   where yarntype.ynstru=new.ynstru
     and yarntype.yntwist=new.yntwist
     and yarntype.yncol=new.yncol
    into :extprodref;
  refno=gen_id(genTxnDetRef,1);
  insert into txndet (ref,txnno,txncode,prodtype,extprodref,
      qlty,qty,txndate,origtxncode,dateent,userent)
    values
      (:refno,:txnno,:txncode,:prodtype,:extprodref,
       new.ynqlty,new.ynnet,new.datercvd,new.boxno,
       new.dateent,new.userent);
  when any do exception eYarnRcptInsertTxnDet;
end
 ^

CREATE TRIGGER REPL$VBYARNRCPT32_I_1_1 FOR VBYARNRCPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.BOXNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=32;

END
END
 ^

CREATE TRIGGER YRYARNTYPE_UPD FOR VBYARNRCPT 
ACTIVE AFTER UPDATE POSITION 5
as
begin
  if ((new.batref<>0) and (old.batref=0)) then /*issuing*/
  begin
    update yarntype
       set yarntype.instock=yarntype.instock+(new.ynnet*-1)
     where yarntype.ynstru=new.ynstru
       and yarntype.yntwist=new.yntwist
       and yarntype.yncol=new.yncol;
  end
  /*don't put the rest in an else in case both kinds of changes at the same time*/
  /*shouldn't happen from program code*/
  if ((new.ynnet<>old.ynnet) or (new.ynstru<>old.ynstru)
    or (new.yntwist<>old.yntwist) or (new.yncol<>old.yncol)) then
  begin
    update yarntype
       set yarntype.instock=yarntype.instock+(old.ynnet*-1)
     where yarntype.ynstru=old.ynstru
       and yarntype.yntwist=old.yntwist
       and yarntype.yncol=old.yncol;
    update yarntype
       set yarntype.instock=yarntype.instock+new.ynnet
     where yarntype.ynstru=new.ynstru
       and yarntype.yntwist=new.yntwist
       and yarntype.yncol=new.yncol;
  end
end
 ^

CREATE TRIGGER VBYARNRCPT_TRACKUPDATE FOR VBYARNRCPT 
ACTIVE AFTER UPDATE POSITION 10
as
  declare variable trackingref1 integer;
  declare variable trackingref2 integer;
begin
  /*only run if not issued*/
  if (new.batref<>0) then
  begin
    if ((old.boxno<>new.boxno) or (old.lotno1<>new.lotno1)
      or (old.lotno2<>new.lotno2) or (old.ynstru<>new.ynstru)
      or (old.yntwist<>new.yntwist) or (old.yncol<>new.yncol)
      or (old.ynnet<>new.ynnet) or (old.datercvd<>new.datercvd)
      or (old.initials<>new.initials) or (old.ynqlty<>new.ynqlty)
      or (old.returned<>new.returned)) then
    begin
      /*first fetch the next two trackingref's*/ 
      trackingref1=gen_id(genVBYarnRcptTrackRef,1);
      trackingref2=gen_id(genVBYarnRcptTrackRef,1);
      /* by the time we get here all checks are done*/
      insert into VBYarnRcptTrack
        (trackingref,boxno,lotno1,lotno2,ynstru,
         yntwist,yncol,ynnet,datercvd,initials,
         ynqlty,returned,datemod,usermod)
      values
        (:trackingref1,old.boxno,old.lotno1,old.lotno2,old.ynstru,
         old.yntwist,old.yncol,old.ynnet*-1,old.datercvd,old.initials,
         old.ynqlty,old.returned,new.datemod,new.usermod);
      insert into VBYarnRcptTrack
        (trackingref,boxno,lotno1,lotno2,ynstru,
         yntwist,yncol,ynnet,datercvd,initials,
         ynqlty,returned,datemod,usermod)
      values
        (:trackingref2,new.boxno,new.lotno1,new.lotno2,new.ynstru,
         new.yntwist,new.yncol,new.ynnet,new.datercvd,new.initials,
         new.ynqlty,new.returned,new.datemod,new.usermod);
    end
  end
end
 ^

CREATE TRIGGER VBYARNRCPTUPDATETXNDETTRIGGER FOR VBYARNRCPT 
ACTIVE AFTER UPDATE POSITION 15
as
declare variable refno integer; /*get the ref nos here as reqd*/
declare variable txnno integer; /*one txn no for the whole txn*/
declare variable extprodref char(11);
/*declare variable accname char(6);*/
/*declare variable rmperkg double precision;*/
/*declare variable wbsweight double precision;*/
declare variable txncode char(2);
declare variable oldprodtype char(3);
declare variable newprodtype char(3);
begin
  if ((new.batref<>0) and (old.batref=0)) then /*despatch in progress*/
  /*don't do an extra update if the data is edited*/
  begin
    txnno=gen_id(genTxnDetTxnRef,1);
    if (new.ynqlty='W') then /*WIP*/
    begin
      newprodtype='WEW'; /*Weft WIP Yarn*/
      txncode='FI'; /*WEW weft yarn considered to be issued to factory*/
    end
    else
    begin
      newprodtype='WEF'; /*Weft Yarn*/
      if (new.issuedto='VREDE1') then
      begin
        txncode='FR'; /*weft returned to supplier*/
      end
      else
      begin
        txncode='FI'; /*weft issued to WIP*/
      end
    end
    /*1)insert the yarnrcpt record: decrease the stock;*/
    /*decrease WIPs (if not returned): WIP not recorded at Weaving factory*/
    select yarntype.yntype
      from yarntype
     where yarntype.ynstru=new.ynstru
       and yarntype.yntwist=new.yntwist
       and yarntype.yncol=new.yncol
      into :extprodref;
    refno=gen_id(genTxnDetRef,1);
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno,:txnno,:txncode,:newprodtype,:extprodref,
         new.ynqlty,(new.ynnet*-1),new.issueddate,new.boxno,
         new.dateent,new.userent);
  end
  else /*change in progress*/
  begin
    if ((old.boxno<>new.boxno)
        or (old.ynstru<>new.ynstru)
        or (old.yntwist<>new.yntwist) /*a colour change doesn't effect WIP*/
        or (old.yncol<>new.yncol)
        or (old.datercvd<>new.datercvd)
        or (old.ynnet<>new.ynnet)
        or (old.ynqlty<>new.ynqlty)) then
    begin /*only do a change if it is required*/
      if (new.returned='N') then
      begin
        txncode='C6'; /*change to yarn from supplier*/
      end
      else
      begin
        txncode='C7'; /*change to yarn from factory (weft wip returned)*/
      end
       txnno=gen_id(genTxnDetTxnRef,1);
      /*1)insert the yarnrcpt record: increase the stock; decr WIPs*/
        if (old.ynqlty='W') then
        begin
          oldprodtype='WEW'; /*Weft WIP Yarn*/
        end
        else
        begin
          oldprodtype='WEF'; /*Weft Yarn*/
        end
      select yarntype.yntype
        from yarntype
       where yarntype.ynstru=old.ynstru
         and yarntype.yntwist=old.yntwist
         and yarntype.yncol=old.yncol
        into :extprodref;
      refno=gen_id(genTxnDetRef,1);
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values
          (:refno,:txnno,:txncode,:oldprodtype,:extprodref,
           old.ynqlty,(old.ynnet*-1),new.datercvd,old.boxno,
           new.datemod,new.usermod);
        if (new.ynqlty='W') then
        begin
          newprodtype='WEW'; /*Weft WIP Yarn*/
        end
        else
        begin
          newprodtype='WEF'; /*Weft Yarn*/
        end
      select yarntype.yntype
        from yarntype
       where yarntype.ynstru=new.ynstru
         and yarntype.yntwist=new.yntwist
         and yarntype.yncol=new.yncol
        into :extprodref;
      refno=gen_id(genTxnDetRef,1);
      insert into txndet (ref,txnno,txncode,prodtype,extprodref,
          qlty,qty,txndate,origtxncode,dateent,userent)
        values
          (:refno,:txnno,:txncode,:newprodtype,:extprodref,
           new.ynqlty,new.ynnet,new.datercvd,new.boxno,
           new.datemod,new.usermod);
    end
  end
  when any do exception evbYarnRcptUpdateTxnDet;
end
 ^

CREATE TRIGGER REPL$VBYARNRCPT32_U_1_1 FOR VBYARNRCPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.BOXNO,NEW.BOXNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=32;

END
END
 ^

CREATE TRIGGER REPL$VBYARNRCPT32_D_1_1 FOR VBYARNRCPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.BOXNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=32;

END
END
 ^

CREATE TRIGGER REPL$VBYARNRCPT126_I_1_1 FOR VBYARNRCPTTRACK 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.TRACKINGREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=126;

END
END
 ^

CREATE TRIGGER REPL$VBYARNRCPT126_U_1_1 FOR VBYARNRCPTTRACK 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.TRACKINGREF,NEW.TRACKINGREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=126;

END
END
 ^

CREATE TRIGGER REPL$VBYARNRCPT126_D_1_1 FOR VBYARNRCPTTRACK 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.TRACKINGREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=126;

END
END
 ^

CREATE TRIGGER VTLOG_BEFOREINSERT FOR VTLOG 
ACTIVE BEFORE INSERT POSITION 0
as
begin
  new.dateent='now';
  new.userent=USER;
end
 ^

CREATE TRIGGER REPL$VTLOG127_I_1_1 FOR VTLOG 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=127;

END
END
 ^

CREATE TRIGGER REPL$VTLOG127_U_1_1 FOR VTLOG 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.REF,NEW.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=127;

END
END
 ^

CREATE TRIGGER REPL$VTLOG127_D_1_1 FOR VTLOG 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.REF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=127;

END
END
 ^

CREATE TRIGGER REPL$VTPERIOD128_I_1_1 FOR VTPERIOD 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FROMDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=128;

END
END
 ^

CREATE TRIGGER REPL$VTPERIOD128_U_1_1 FOR VTPERIOD 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FROMDATE,NEW.FROMDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=128;

END
END
 ^

CREATE TRIGGER REPL$VTPERIOD128_D_1_1 FOR VTPERIOD 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FROMDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=128;

END
END
 ^

CREATE TRIGGER REPL$VTQUARTER129_I_1_1 FOR VTQUARTER 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FINISHDATE||SEP||NEW.STARTDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=129;

END
END
 ^

CREATE TRIGGER REPL$VTQUARTER129_U_1_1 FOR VTQUARTER 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FINISHDATE||SEP||OLD.STARTDATE,NEW.FINISHDATE||SEP||NEW.STARTDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=129;

END
END
 ^

CREATE TRIGGER REPL$VTQUARTER129_D_1_1 FOR VTQUARTER 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FINISHDATE||SEP||OLD.STARTDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=129;

END
END
 ^

CREATE TRIGGER REPL$VTYEAR130_I_1_1 FOR VTYEAR 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.STARTDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=130;

END
END
 ^

CREATE TRIGGER REPL$VTYEAR130_U_1_1 FOR VTYEAR 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.STARTDATE,NEW.STARTDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=130;

END
END
 ^

CREATE TRIGGER REPL$VTYEAR130_D_1_1 FOR VTYEAR 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.STARTDATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=130;

END
END
 ^

CREATE TRIGGER REPL$WARPCOL33_I_1_1 FOR WARPCOL 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.WARPCOL||SEP||NEW.WARPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=33;

END
END
 ^

CREATE TRIGGER REPL$WARPCOL33_U_1_1 FOR WARPCOL 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.WARPCOL||SEP||OLD.WARPTYPE,NEW.WARPCOL||SEP||NEW.WARPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=33;

END
END
 ^

CREATE TRIGGER REPL$WARPCOL33_D_1_1 FOR WARPCOL 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.WARPCOL||SEP||OLD.WARPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=33;

END
END
 ^

CREATE TRIGGER REPL$WARPRCPT34_I_1_1 FOR WARPRCPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=34;

END
END
 ^

CREATE TRIGGER REPL$WARPRCPT34_U_1_1 FOR WARPRCPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.WARPNO,NEW.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=34;

END
END
 ^

CREATE TRIGGER REPL$WARPRCPT34_D_1_1 FOR WARPRCPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.WARPNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=34;

END
END
 ^

CREATE TRIGGER REPL$WARPTYPE35_I_1_1 FOR WARPTYPE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.WARPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=35;

END
END
 ^

CREATE TRIGGER REPL$WARPTYPE35_U_1_1 FOR WARPTYPE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.WARPTYPE,NEW.WARPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=35;

END
END
 ^

CREATE TRIGGER REPL$WARPTYPE35_D_1_1 FOR WARPTYPE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.WARPTYPE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=35;

END
END
 ^

CREATE TRIGGER WIPRCPTINSERTTRIGGER FOR WIPRCPT 
ACTIVE AFTER INSERT POSITION 15
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable txnno integer;
declare variable extprodref char(11);
declare variable newaccname char(6);
declare variable shift char(1);
declare variable prodtype char(3);
begin
  if (new.shift='W') then /*WIP Rcpts for WIP RM handled manually*/
  begin /*for PACKing enter the WIP Rcpts- don't hold WIP values*/
    shift='W';
    prodtype='RMW';
  end
  else
  begin
    shift='';
    prodtype='RMP';
  end
    /*need two rows here*/
    refno1=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    /*1) insert the wiprcpt record: increase the stock*/
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,'WR',:prodtype,:extprodref,
         :shift,new.netweight,new.datemanu,new.refno,
         new.dateent,new.userent);
  when any do exception eWIPRcptInsertTxnDet;
end
 ^

CREATE TRIGGER REPL$WIPRCPT137_I_1_1 FOR WIPRCPT 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.REFNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=137;

END
END
 ^

CREATE TRIGGER WIPRCPTUPDATETXNDETTRIGGER FOR WIPRCPT 
ACTIVE AFTER UPDATE POSITION 15
as
declare variable refno1 integer;
declare variable refno2 integer;
declare variable txnno integer;
declare variable extprodref char(11);
/*declare variable oldaccname char(6);*/
/*declare variable newaccname char(6);*/
declare variable prodtype char(3);
begin
  /*only insert record if changed*/
  if ((new.prodref<>old.prodref) or 
      (old.netweight<>new.netweight) or
      (old.datemanu<>new.datemanu) or
      (old.refno<>new.refno) or
      (old.shift<>new.shift)) then
  begin
    /*need four rows here*/
    if (old.shift='W') then
    begin
      prodtype='RMW';
    end
    else
    begin
      prodtype='RMP';
    end  
    refno1=gen_id(genTxnDetRef,1);
    refno2=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
    /*1)insert the wiprcpt record: increase the stock; 2 adjusting entries*/
    select product.extprodref
      from product
     where product.prodref=old.prodref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,'C3',:prodtype,:extprodref,
         old.shift,(old.netweight*-1),new.datemanu,old.refno,
         new.datemod,new.usermod);
    if (new.shift='W') then
    begin
      prodtype='RMW';
    end
    else
    begin
      prodtype='RMP';
    end
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno2,:txnno,'C3',:prodtype,:extprodref,
         new.shift,new.netweight,new.datemanu,new.refno,
         new.datemod,new.usermod);
  end
  when any do exception eWIPRcptUpdateTxnDet;
end
 ^

CREATE TRIGGER WIPISSUEINSERTTRIGGER FOR WIPRCPT 
ACTIVE AFTER UPDATE POSITION 20
as
declare variable refno1 integer;
declare variable txnno integer;
declare variable extprodref char(11);
/*declare variable controlacct char(6);*/
/*declare variable accname char(6);*/
declare variable prodtype char(3);
declare variable supplier char(1); /*added DL201097*/
declare variable txncode char(2);
begin
  /*note: there is no WIPIssue table, but issuing a WIPRcpt requires*/
  /*a trigger*/
  if ((new.issueto<>'') and (new.issueto is not null)) then 
    /*issueto filled in, therefore issue the WIP or DH*/
  begin
    if (new.shift='W') then
    begin
      prodtype='RMW';
    end
    else
    begin
      prodtype='RMP';
    end
    /*need two rows here including for Dye Houses*/
    refno1=gen_id(genTxnDetRef,1);
    txnno=gen_id(genTxnDetTxnRef,1);
/*    controlacct='';*/
    /*1) insert the issue from record: decrease the stock*/
    select dept.supplier
      from dept
     where dept.deptref=new.issueto
      into :supplier;
    if ((supplier='N') or
        (new.issueto='DHLTI') or /*just in case the user has put Y next*/
        (new.issueto='DHTBS') or /*to a dye house department*/
        (new.issueto='DHSAF')) then
    begin
      txncode='WI'; 
    end
    else
    begin
      txncode='D2'; /*will force a negative purchase:DH*/
    end
    select product.extprodref
      from product
     where product.prodref=new.prodref
      into :extprodref;
    insert into txndet (ref,txnno,txncode,prodtype,extprodref,
        qlty,qty,txndate,origtxncode,dateent,userent)
      values
        (:refno1,:txnno,:txncode,:prodtype,:extprodref,
         new.shift,(new.netweight*-1),new.dateissued,new.refno,
         new.datemod,new.usermod);
  end
  when any do exception eWIPIssueInsertTxnDet;
end
 ^

CREATE TRIGGER REPL$WIPRCPT137_U_1_1 FOR WIPRCPT 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.REFNO,NEW.REFNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=137;

END
END
 ^

CREATE TRIGGER REPL$WIPRCPT137_D_1_1 FOR WIPRCPT 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.REFNO
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=137;

END
END
 ^

CREATE TRIGGER REPL$WKHRS138_I_1_1 FOR WKHRS 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.DATEREF||SEP||NEW.DEPTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=138;

END
END
 ^

CREATE TRIGGER REPL$WKHRS138_U_1_1 FOR WKHRS 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.DATEREF||SEP||OLD.DEPTREF,NEW.DATEREF||SEP||NEW.DEPTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=138;

END
END
 ^

CREATE TRIGGER REPL$WKHRS138_D_1_1 FOR WKHRS 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.DATEREF||SEP||OLD.DEPTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=138;

END
END
 ^

CREATE TRIGGER REPL$WKNO139_I_1_1 FOR WKNO 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.FROMDATE||SEP||NEW.TODATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=139;

END
END
 ^

CREATE TRIGGER REPL$WKNO139_U_1_1 FOR WKNO 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.FROMDATE||SEP||OLD.TODATE,NEW.FROMDATE||SEP||NEW.TODATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=139;

END
END
 ^

CREATE TRIGGER REPL$WKNO139_D_1_1 FOR WKNO 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.FROMDATE||SEP||OLD.TODATE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=139;

END
END
 ^

CREATE TRIGGER REPL$WORWLOTNO36_I_1_1 FOR WORWLOTNO 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LOTNOREF1||SEP||NEW.LOTNOREF2||SEP||NEW.SINGLEMULTIPLE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=36;

END
END
 ^

CREATE TRIGGER REPL$WORWLOTNO36_U_1_1 FOR WORWLOTNO 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LOTNOREF1||SEP||OLD.LOTNOREF2||SEP||OLD.SINGLEMULTIPLE,NEW.LOTNOREF1||SEP||NEW.LOTNOREF2||SEP||NEW.SINGLEMULTIPLE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=36;

END
END
 ^

CREATE TRIGGER REPL$WORWLOTNO36_D_1_1 FOR WORWLOTNO 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LOTNOREF1||SEP||OLD.LOTNOREF2||SEP||OLD.SINGLEMULTIPLE
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=36;

END
END
 ^

CREATE TRIGGER REPL$YARNCOL37_I_1_1 FOR YARNCOL 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.YNCOL
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=37;

END
END
 ^

CREATE TRIGGER REPL$YARNCOL37_U_1_1 FOR YARNCOL 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.YNCOL,NEW.YNCOL
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=37;

END
END
 ^

CREATE TRIGGER REPL$YARNCOL37_D_1_1 FOR YARNCOL 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.YNCOL
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=37;

END
END
 ^

CREATE TRIGGER REPL$YARNLOTNO38_I_1_1 FOR YARNLOTNO 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.LOTNO1||SEP||NEW.LOTNO2||SEP||NEW.YNCOL
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=38;

END
END
 ^

CREATE TRIGGER REPL$YARNLOTNO38_U_1_1 FOR YARNLOTNO 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.LOTNO1||SEP||OLD.LOTNO2||SEP||OLD.YNCOL,NEW.LOTNO1||SEP||NEW.LOTNO2||SEP||NEW.YNCOL
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=38;

END
END
 ^

CREATE TRIGGER REPL$YARNLOTNO38_D_1_1 FOR YARNLOTNO 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.LOTNO1||SEP||OLD.LOTNO2||SEP||OLD.YNCOL
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=38;

END
END
 ^

CREATE TRIGGER REPL$YARNSTRU140_I_1_1 FOR YARNSTRU 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=140;

END
END
 ^

CREATE TRIGGER REPL$YARNSTRU140_U_1_1 FOR YARNSTRU 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.YNSTRU||SEP||OLD.YNTWIST,NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=140;

END
END
 ^

CREATE TRIGGER REPL$YARNSTRU140_D_1_1 FOR YARNSTRU 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.YNSTRU||SEP||OLD.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=140;

END
END
 ^

CREATE TRIGGER REPL$YARNTYPE141_I_1_1 FOR YARNTYPE 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.YNCOL||SEP||NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=141;

END
END
 ^

CREATE TRIGGER REPL$YARNTYPE141_U_1_1 FOR YARNTYPE 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.YNCOL||SEP||OLD.YNSTRU||SEP||OLD.YNTWIST,NEW.YNCOL||SEP||NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=141;

END
END
 ^

CREATE TRIGGER REPL$YARNTYPE141_D_1_1 FOR YARNTYPE 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.YNCOL||SEP||OLD.YNSTRU||SEP||OLD.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=141;

END
END
 ^

CREATE TRIGGER REPL$YNSTRUWBSR142_I_1_1 FOR YNSTRUWBSRM 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.CTRLACCT||SEP||NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=142;

END
END
 ^

CREATE TRIGGER REPL$YNSTRUWBSR142_U_1_1 FOR YNSTRUWBSRM 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.CTRLACCT||SEP||OLD.YNSTRU||SEP||OLD.YNTWIST,NEW.CTRLACCT||SEP||NEW.YNSTRU||SEP||NEW.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=142;

END
END
 ^

CREATE TRIGGER REPL$YNSTRUWBSR142_D_1_1 FOR YNSTRUWBSRM 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.CTRLACCT||SEP||OLD.YNSTRU||SEP||OLD.YNTWIST
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=142;

END
END
 ^

CREATE TRIGGER REPL$YNTWIST143_I_1_1 FOR YNTWIST 
ACTIVE AFTER INSERT POSITION 32760
AS BEGIN IF (USER <> 'REPL') THEN BEGIN   INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'I',NEW.TWISTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=143;

END
END
 ^

CREATE TRIGGER REPL$YNTWIST143_U_1_1 FOR YNTWIST 
ACTIVE AFTER UPDATE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY,NEWKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'U',OLD.TWISTREF,NEW.TWISTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=143;

END
END
 ^

CREATE TRIGGER REPL$YNTWIST143_D_1_1 FOR YNTWIST 
ACTIVE AFTER DELETE POSITION 32760
AS
BEGIN
IF (USER <> 'REPL') THEN BEGIN
  INSERT INTO REPL_LOG(REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,REPTYPE,OLDKEY)
  SELECT REPLNO,PUBDBNO,SUBDBNO,RELATIONNO,'D',OLD.TWISTREF
    FROM REPL_SEPARATOR
   WHERE REPLNO=1
     AND PUBDBNO=1
     AND RELATIONNO=143;

END
END
 ^

COMMIT WORK ^
SET TERM ;^

/* Grant Roles for this database */


/* Grant permissions for this database */

GRANT SELECT ON AGENT TO ANDRIES;
GRANT SELECT ON AGENT TO BARBARA;
GRANT SELECT ON AGENT TO BARRY;
GRANT SELECT ON AGENT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON AGENT TO DAVID;
GRANT SELECT ON AGENT TO DONOVAN;
GRANT SELECT ON AGENT TO GLODENE;
GRANT SELECT ON AGENT TO GREG;
GRANT SELECT ON AGENT TO ISAAC;
GRANT SELECT ON AGENT TO JEROME;
GRANT SELECT, REFERENCES ON AGENT TO JOAN;
GRANT SELECT ON AGENT TO KEITH;
GRANT SELECT ON AGENT TO LINDAC;
GRANT SELECT ON AGENT TO MAGDA;
GRANT SELECT ON AGENT TO MONIQUE;
GRANT SELECT ON AGENT TO NADIA;
GRANT SELECT ON AGENT TO NATALIA;
GRANT SELECT ON AGENT TO PAUL;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON AGENT TO RALPH;
GRANT SELECT ON AGENT TO SHARON;
GRANT SELECT ON AGENT TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON AGENT TO SUSAN;
GRANT SELECT ON AGENT TO VIVIAN;
GRANT SELECT ON AGENTFREIGHT TO ANDRIES;
GRANT SELECT ON AGENTFREIGHT TO BARBARA;
GRANT SELECT ON AGENTFREIGHT TO BARRY;
GRANT SELECT ON AGENTFREIGHT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON AGENTFREIGHT TO DAVID;
GRANT SELECT ON AGENTFREIGHT TO GLODENE;
GRANT SELECT ON AGENTFREIGHT TO JOAN;
GRANT SELECT ON AGENTFREIGHT TO LINDAC;
GRANT SELECT ON AGENTFREIGHT TO MONIQUE;
GRANT SELECT ON AGENTFREIGHT TO NADIA;
GRANT SELECT ON AGENTFREIGHT TO NATALIA;
GRANT SELECT ON AGENTFREIGHT TO PAUL;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON AGENTFREIGHT TO RALPH;
GRANT SELECT ON AGENTFREIGHT TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON AGENTFREIGHT TO SUSAN;
GRANT SELECT ON AGENTFREIGHT TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO BARBARA;
GRANT SELECT ON APORDDET TO BARRY;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDDET TO DAVID;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO GREG;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO JEROME;
GRANT SELECT ON APORDDET TO JOHAN;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO KEITH;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO MAGDA;
GRANT SELECT ON APORDDET TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO NADIA;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO NATALIA;
GRANT INSERT, SELECT, UPDATE ON APORDDET TO SHARON;
GRANT SELECT ON APORDDET TO SUES;
GRANT SELECT ON APORDDET TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO BARBARA;
GRANT SELECT ON APORDHDR TO BARRY;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON APORDHDR TO DAVID;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO GREG;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO JEROME;
GRANT SELECT ON APORDHDR TO JOAN;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO KEITH;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO MAGDA;
GRANT SELECT ON APORDHDR TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO NADIA;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO NATALIA;
GRANT SELECT ON APORDHDR TO PAUL;
GRANT INSERT, SELECT, UPDATE ON APORDHDR TO SHARON;
GRANT SELECT ON APORDHDR TO SUES;
GRANT SELECT ON APORDHDR TO VIVIAN;
GRANT SELECT, UPDATE ON CTRLACCT TO ANDRIES;
GRANT SELECT, UPDATE ON CTRLACCT TO BARBARA;
GRANT SELECT ON CTRLACCT TO BARRY;
GRANT SELECT, UPDATE ON CTRLACCT TO CORDENAI;
GRANT SELECT, UPDATE ON CTRLACCT TO DONOVAN;
GRANT SELECT, UPDATE ON CTRLACCT TO GLODENE;
GRANT SELECT, UPDATE ON CTRLACCT TO GREG;
GRANT SELECT, UPDATE ON CTRLACCT TO ISAAC;
GRANT SELECT, UPDATE ON CTRLACCT TO JEROME;
GRANT SELECT, UPDATE ON CTRLACCT TO KEITH;
GRANT SELECT, UPDATE ON CTRLACCT TO LINDAC;
GRANT SELECT, UPDATE ON CTRLACCT TO MAGDA;
GRANT SELECT, UPDATE ON CTRLACCT TO NADIA;
GRANT SELECT, UPDATE ON CTRLACCT TO NATALIA;
GRANT SELECT, UPDATE ON CTRLACCT TO SHARON;
GRANT SELECT ON CTRLACCT TO VIVIAN;
GRANT SELECT ON CURRENCY TO ANDRIES;
GRANT SELECT ON CURRENCY TO BARBARA;
GRANT SELECT ON CURRENCY TO BARRY;
GRANT SELECT ON CURRENCY TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO DAVID;
GRANT SELECT ON CURRENCY TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE ON CURRENCY TO JOAN;
GRANT SELECT ON CURRENCY TO JUDITH;
GRANT SELECT ON CURRENCY TO LINDAC;
GRANT SELECT ON CURRENCY TO MONIQUE;
GRANT SELECT ON CURRENCY TO NADIA;
GRANT SELECT ON CURRENCY TO NATALIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO PAUL;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO RALPH;
GRANT SELECT ON CURRENCY TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CURRENCY TO SUSAN;
GRANT SELECT ON CURRENCY TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUSTPART TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUSTPART TO BARBARA;
GRANT SELECT ON CUSTPART TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CUSTPART TO CORDENAI;
GRANT SELECT ON CUSTPART TO ESTELLE;
GRANT SELECT ON CUSTPART TO EUGENE;
GRANT SELECT ON CUSTPART TO EUGENEA;
GRANT SELECT ON CUSTPART TO GEORGINA;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUSTPART TO GLODENE;
GRANT SELECT ON CUSTPART TO JOAN;
GRANT SELECT ON CUSTPART TO JOANVW;
GRANT SELECT ON CUSTPART TO JUANITA;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUSTPART TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUSTPART TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CUSTPART TO NATALIA;
GRANT SELECT ON CUSTPART TO PAUL;
GRANT SELECT ON CUSTPART TO PUBLIC;
GRANT SELECT ON CUSTPART TO RUTHANE;
GRANT SELECT ON CUSTPART TO SIDWELL;
GRANT SELECT ON CUSTPART TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO BARBARA;
GRANT SELECT ON DELBCB TO BARRY;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELBCB TO DAVID;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO GREG;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO JEROME;
GRANT SELECT ON DELBCB TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO KEITH;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO MAGDA;
GRANT SELECT ON DELBCB TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO NADIA;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO NATALIA;
GRANT INSERT, SELECT, UPDATE ON DELBCB TO SHARON;
GRANT SELECT ON DELBCB TO SUES;
GRANT SELECT ON DELBCB TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO BARBARA;
GRANT SELECT ON DELHEAD TO BARRY;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELHEAD TO DAVID;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO GREG;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO JEROME;
GRANT SELECT ON DELHEAD TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO KEITH;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO MAGDA;
GRANT SELECT ON DELHEAD TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO NADIA;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO NATALIA;
GRANT INSERT, SELECT, UPDATE ON DELHEAD TO SHARON;
GRANT SELECT ON DELHEAD TO SUES;
GRANT SELECT ON DELHEAD TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO BARBARA;
GRANT SELECT ON DELPALLET TO BARRY;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DELPALLET TO DAVID;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO GREG;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO JEROME;
GRANT SELECT ON DELPALLET TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO KEITH;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO MAGDA;
GRANT SELECT ON DELPALLET TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO NADIA;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO NATALIA;
GRANT INSERT, SELECT, UPDATE ON DELPALLET TO SHARON;
GRANT SELECT ON DELPALLET TO SUES;
GRANT SELECT ON DELPALLET TO VIVIAN;
GRANT SELECT ON DEPT TO ANDRIES;
GRANT SELECT ON DEPT TO BARBARA;
GRANT SELECT ON DEPT TO BARRY;
GRANT SELECT ON DEPT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO DAVID;
GRANT SELECT ON DEPT TO DONOVAN;
GRANT SELECT ON DEPT TO ESTELLE;
GRANT SELECT ON DEPT TO EUGENE;
GRANT SELECT ON DEPT TO EUGENEA;
GRANT SELECT ON DEPT TO GEORGINA;
GRANT SELECT ON DEPT TO GLODENE;
GRANT SELECT ON DEPT TO GREG;
GRANT SELECT ON DEPT TO ISAAC;
GRANT SELECT ON DEPT TO JEROME;
GRANT DELETE, INSERT, SELECT, UPDATE ON DEPT TO JOAN;
GRANT SELECT ON DEPT TO JOANVW;
GRANT SELECT ON DEPT TO JUANITA;
GRANT SELECT ON DEPT TO KEITH;
GRANT SELECT ON DEPT TO LINDAC;
GRANT SELECT ON DEPT TO MAGDA;
GRANT SELECT ON DEPT TO MONIQUE;
GRANT SELECT ON DEPT TO NADIA;
GRANT SELECT ON DEPT TO NATALIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO PAUL;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO RALPH;
GRANT SELECT ON DEPT TO RUTHANE;
GRANT SELECT ON DEPT TO SHARON;
GRANT SELECT ON DEPT TO SIDWELL;
GRANT SELECT ON DEPT TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON DEPT TO SUSAN;
GRANT SELECT ON DEPT TO VIVIAN;
GRANT SELECT ON DLSTATS TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO ANDRIES;
GRANT SELECT ON FABRICLOTNO TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO BARBARA;
GRANT SELECT ON FABRICLOTNO TO BARRY;
GRANT SELECT ON FABRICLOTNO TO BELINDA;
GRANT SELECT ON FABRICLOTNO TO CHRISTEL;
GRANT SELECT ON FABRICLOTNO TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON FABRICLOTNO TO DAVID;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO DONOVAN;
GRANT SELECT ON FABRICLOTNO TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO EUGENEA;
GRANT SELECT ON FABRICLOTNO TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO GREG;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO JEROME;
GRANT SELECT ON FABRICLOTNO TO JOAN;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO JUANITA;
GRANT SELECT ON FABRICLOTNO TO KATY;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO KEITH;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO LANCE;
GRANT SELECT ON FABRICLOTNO TO LESDENE;
GRANT SELECT ON FABRICLOTNO TO LINDA;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO LINDAC;
GRANT SELECT ON FABRICLOTNO TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO MARIO;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO MARK;
GRANT SELECT ON FABRICLOTNO TO MARY;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO NADIA;
GRANT SELECT ON FABRICLOTNO TO NANCY;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO NATALIA;
GRANT SELECT ON FABRICLOTNO TO NEVILLE;
GRANT SELECT ON FABRICLOTNO TO PAUL;
GRANT SELECT ON FABRICLOTNO TO RALPH;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO SHARON;
GRANT SELECT ON FABRICLOTNO TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON FABRICLOTNO TO SIDWELL;
GRANT SELECT ON FABRICLOTNO TO STEPHAN;
GRANT SELECT ON FABRICLOTNO TO SUES;
GRANT SELECT ON FABRICLOTNO TO SUSAN;
GRANT SELECT ON FABRICLOTNO TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO ANDRIES;
GRANT SELECT ON FINRCPTDAILY TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO BARBARA;
GRANT SELECT ON FINRCPTDAILY TO BARRY;
GRANT SELECT ON FINRCPTDAILY TO BELINDA;
GRANT SELECT ON FINRCPTDAILY TO CAMERON;
GRANT SELECT ON FINRCPTDAILY TO CHRISTEL;
GRANT SELECT ON FINRCPTDAILY TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON FINRCPTDAILY TO DAVID;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO DONOVAN;
GRANT SELECT ON FINRCPTDAILY TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO EUGENEA;
GRANT SELECT ON FINRCPTDAILY TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO GREG;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO JEROME;
GRANT SELECT ON FINRCPTDAILY TO JOAN;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO JUANITA;
GRANT SELECT ON FINRCPTDAILY TO KATY;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO KEITH;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO LANCE;
GRANT SELECT ON FINRCPTDAILY TO LESDENE;
GRANT SELECT ON FINRCPTDAILY TO LINDA;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO LINDAC;
GRANT SELECT ON FINRCPTDAILY TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO MARIO;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO MARK;
GRANT SELECT ON FINRCPTDAILY TO MARY;
GRANT SELECT ON FINRCPTDAILY TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO NADIA;
GRANT SELECT ON FINRCPTDAILY TO NANCY;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO NATALIA;
GRANT SELECT ON FINRCPTDAILY TO NEVILLE;
GRANT SELECT ON FINRCPTDAILY TO PAUL;
GRANT SELECT ON FINRCPTDAILY TO RALPH;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO SHARON;
GRANT SELECT ON FINRCPTDAILY TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON FINRCPTDAILY TO SIDWELL;
GRANT SELECT ON FINRCPTDAILY TO STEPHAN;
GRANT SELECT ON FINRCPTDAILY TO SUES;
GRANT SELECT ON FINRCPTDAILY TO SUSAN;
GRANT SELECT ON FINRCPTDAILY TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO ANDRIES;
GRANT SELECT ON GREIGERCPT TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO BARBARA;
GRANT SELECT ON GREIGERCPT TO BARRY;
GRANT SELECT ON GREIGERCPT TO BELINDA;
GRANT SELECT ON GREIGERCPT TO CAMERON;
GRANT SELECT ON GREIGERCPT TO CHRISTEL;
GRANT SELECT ON GREIGERCPT TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON GREIGERCPT TO DAVID;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO DONOVAN;
GRANT SELECT ON GREIGERCPT TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO EUGENEA;
GRANT SELECT ON GREIGERCPT TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO GREG;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO JEROME;
GRANT SELECT ON GREIGERCPT TO JOAN;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO JUANITA;
GRANT SELECT ON GREIGERCPT TO KATY;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO KEITH;
GRANT SELECT, UPDATE ON GREIGERCPT TO LANCE;
GRANT SELECT ON GREIGERCPT TO LESDENE;
GRANT SELECT ON GREIGERCPT TO LINDA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO LINDAC;
GRANT SELECT ON GREIGERCPT TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO MAGDA;
GRANT SELECT, UPDATE ON GREIGERCPT TO MARIO;
GRANT SELECT, UPDATE ON GREIGERCPT TO MARK;
GRANT SELECT ON GREIGERCPT TO MARY;
GRANT SELECT ON GREIGERCPT TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO NADIA;
GRANT SELECT ON GREIGERCPT TO NANCY;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO NATALIA;
GRANT SELECT ON GREIGERCPT TO NEVILLE;
GRANT SELECT ON GREIGERCPT TO PAUL;
GRANT SELECT ON GREIGERCPT TO RALPH;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO SHARON;
GRANT SELECT ON GREIGERCPT TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPT TO SIDWELL;
GRANT SELECT ON GREIGERCPT TO STEPHAN;
GRANT SELECT ON GREIGERCPT TO SUES;
GRANT SELECT ON GREIGERCPT TO SUSAN;
GRANT SELECT ON GREIGERCPT TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO ANDRIES;
GRANT SELECT ON GREIGERCPTDAILY TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO BARBARA;
GRANT SELECT ON GREIGERCPTDAILY TO BARRY;
GRANT SELECT ON GREIGERCPTDAILY TO BELINDA;
GRANT SELECT ON GREIGERCPTDAILY TO CAMERON;
GRANT SELECT ON GREIGERCPTDAILY TO CHRISTEL;
GRANT SELECT ON GREIGERCPTDAILY TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON GREIGERCPTDAILY TO DAVID;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO DONOVAN;
GRANT SELECT ON GREIGERCPTDAILY TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO EUGENEA;
GRANT SELECT ON GREIGERCPTDAILY TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO GREG;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO JEROME;
GRANT SELECT ON GREIGERCPTDAILY TO JOAN;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO JUANITA;
GRANT SELECT ON GREIGERCPTDAILY TO KATY;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO KEITH;
GRANT SELECT, UPDATE ON GREIGERCPTDAILY TO LANCE;
GRANT SELECT ON GREIGERCPTDAILY TO LESDENE;
GRANT SELECT ON GREIGERCPTDAILY TO LINDA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO LINDAC;
GRANT SELECT ON GREIGERCPTDAILY TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO MAGDA;
GRANT SELECT, UPDATE ON GREIGERCPTDAILY TO MARIO;
GRANT SELECT, UPDATE ON GREIGERCPTDAILY TO MARK;
GRANT SELECT ON GREIGERCPTDAILY TO MARY;
GRANT SELECT ON GREIGERCPTDAILY TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO NADIA;
GRANT SELECT ON GREIGERCPTDAILY TO NANCY;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO NATALIA;
GRANT SELECT ON GREIGERCPTDAILY TO NEVILLE;
GRANT SELECT ON GREIGERCPTDAILY TO PAUL;
GRANT SELECT ON GREIGERCPTDAILY TO RALPH;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO SHARON;
GRANT SELECT ON GREIGERCPTDAILY TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON GREIGERCPTDAILY TO SIDWELL;
GRANT SELECT ON GREIGERCPTDAILY TO STEPHAN;
GRANT SELECT ON GREIGERCPTDAILY TO SUES;
GRANT SELECT ON GREIGERCPTDAILY TO SUSAN;
GRANT SELECT ON GREIGERCPTDAILY TO VIVIAN;
GRANT SELECT ON INITIALS TO ANDRIES;
GRANT SELECT ON INITIALS TO ANTHEA;
GRANT SELECT ON INITIALS TO BARBARA;
GRANT SELECT ON INITIALS TO BARRY;
GRANT SELECT ON INITIALS TO BELINDA;
GRANT SELECT ON INITIALS TO CAMERON;
GRANT SELECT ON INITIALS TO CHRIS;
GRANT SELECT ON INITIALS TO CHRISTEL;
GRANT SELECT ON INITIALS TO CHRYSTAL;
GRANT SELECT ON INITIALS TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON INITIALS TO DAVID;
GRANT SELECT ON INITIALS TO DONOVAN;
GRANT SELECT ON INITIALS TO ELRIQUE;
GRANT SELECT ON INITIALS TO ESTELLE;
GRANT SELECT ON INITIALS TO EUGENE;
GRANT SELECT ON INITIALS TO EUGENEA;
GRANT SELECT ON INITIALS TO FILECIA;
GRANT SELECT ON INITIALS TO GEORGINA;
GRANT SELECT ON INITIALS TO GLODENE;
GRANT SELECT ON INITIALS TO GREG;
GRANT SELECT ON INITIALS TO ISAAC;
GRANT SELECT ON INITIALS TO JEROME;
GRANT SELECT ON INITIALS TO JOAN;
GRANT SELECT ON INITIALS TO JOANVW;
GRANT SELECT ON INITIALS TO JUANITA;
GRANT SELECT ON INITIALS TO JUDITH;
GRANT SELECT ON INITIALS TO KATY;
GRANT SELECT ON INITIALS TO KEITH;
GRANT SELECT ON INITIALS TO LANCE;
GRANT SELECT ON INITIALS TO LESDENE;
GRANT SELECT ON INITIALS TO LINDA;
GRANT SELECT ON INITIALS TO LINDAC;
GRANT SELECT ON INITIALS TO LIZELLE;
GRANT SELECT ON INITIALS TO MAGDA;
GRANT SELECT ON INITIALS TO MARIO;
GRANT SELECT ON INITIALS TO MARK;
GRANT SELECT ON INITIALS TO MARY;
GRANT SELECT ON INITIALS TO MONIQUE;
GRANT SELECT ON INITIALS TO NADIA;
GRANT SELECT ON INITIALS TO NANCY;
GRANT SELECT ON INITIALS TO NATALIA;
GRANT SELECT ON INITIALS TO NEVILLE;
GRANT SELECT ON INITIALS TO PAUL;
GRANT SELECT ON INITIALS TO RALPH;
GRANT SELECT ON INITIALS TO RUTHANE;
GRANT SELECT ON INITIALS TO SHAHIEDA;
GRANT SELECT ON INITIALS TO SHARON;
GRANT SELECT ON INITIALS TO SHAUN;
GRANT SELECT ON INITIALS TO SIDWELL;
GRANT SELECT ON INITIALS TO STEPHAN;
GRANT SELECT ON INITIALS TO SUES;
GRANT SELECT ON INITIALS TO SUSAN;
GRANT SELECT ON INITIALS TO VIVIAN;
GRANT SELECT ON INVFROM TO ANDRIES;
GRANT SELECT ON INVFROM TO BARBARA;
GRANT SELECT ON INVFROM TO BARRY;
GRANT SELECT ON INVFROM TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON INVFROM TO DAVID;
GRANT SELECT ON INVFROM TO DONOVAN;
GRANT SELECT ON INVFROM TO GLODENE;
GRANT SELECT ON INVFROM TO GREG;
GRANT SELECT ON INVFROM TO ISAAC;
GRANT SELECT ON INVFROM TO JEROME;
GRANT SELECT ON INVFROM TO JOAN;
GRANT SELECT ON INVFROM TO KEITH;
GRANT SELECT ON INVFROM TO LINDAC;
GRANT SELECT ON INVFROM TO MAGDA;
GRANT SELECT ON INVFROM TO MONIQUE;
GRANT SELECT ON INVFROM TO NADIA;
GRANT SELECT ON INVFROM TO NATALIA;
GRANT SELECT ON INVFROM TO PAUL;
GRANT SELECT ON INVFROM TO RALPH;
GRANT SELECT ON INVFROM TO SHARON;
GRANT SELECT ON INVFROM TO SUES;
GRANT SELECT ON INVFROM TO SUSAN;
GRANT SELECT ON INVFROM TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO BARBARA;
GRANT SELECT ON ISSUEDET TO BARRY;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO GREG;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO JEROME;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO KEITH;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO NADIA;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO NATALIA;
GRANT SELECT ON ISSUEDET TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON ISSUEDET TO SHARON;
GRANT SELECT ON ISSUEDET TO VIVIAN;
GRANT SELECT ON LOOMSPEC TO ANDRIES;
GRANT SELECT ON LOOMSPEC TO ANTHEA;
GRANT SELECT ON LOOMSPEC TO BARBARA;
GRANT SELECT ON LOOMSPEC TO BARRY;
GRANT SELECT ON LOOMSPEC TO BELINDA;
GRANT SELECT ON LOOMSPEC TO CHRISTEL;
GRANT SELECT ON LOOMSPEC TO CHRYSTAL;
GRANT SELECT ON LOOMSPEC TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON LOOMSPEC TO DAVID;
GRANT SELECT ON LOOMSPEC TO DONOVAN;
GRANT SELECT ON LOOMSPEC TO ELRIQUE;
GRANT SELECT ON LOOMSPEC TO ESTELLE;
GRANT SELECT ON LOOMSPEC TO EUGENE;
GRANT SELECT ON LOOMSPEC TO EUGENEA;
GRANT SELECT ON LOOMSPEC TO FILECIA;
GRANT SELECT ON LOOMSPEC TO GEORGINA;
GRANT SELECT ON LOOMSPEC TO GLODENE;
GRANT SELECT ON LOOMSPEC TO GREG;
GRANT SELECT ON LOOMSPEC TO ISAAC;
GRANT SELECT ON LOOMSPEC TO JEROME;
GRANT SELECT ON LOOMSPEC TO JOAN;
GRANT SELECT ON LOOMSPEC TO JOANVW;
GRANT SELECT ON LOOMSPEC TO JUANITA;
GRANT SELECT ON LOOMSPEC TO KATY;
GRANT SELECT ON LOOMSPEC TO KEITH;
GRANT SELECT ON LOOMSPEC TO LANCE;
GRANT SELECT ON LOOMSPEC TO LESDENE;
GRANT SELECT ON LOOMSPEC TO LINDA;
GRANT SELECT ON LOOMSPEC TO LINDAC;
GRANT SELECT ON LOOMSPEC TO LIZELLE;
GRANT SELECT ON LOOMSPEC TO MAGDA;
GRANT SELECT ON LOOMSPEC TO MARIO;
GRANT SELECT ON LOOMSPEC TO MARK;
GRANT SELECT ON LOOMSPEC TO MARY;
GRANT SELECT ON LOOMSPEC TO MONIQUE;
GRANT SELECT ON LOOMSPEC TO NADIA;
GRANT SELECT ON LOOMSPEC TO NANCY;
GRANT SELECT ON LOOMSPEC TO NATALIA;
GRANT SELECT ON LOOMSPEC TO NEVILLE;
GRANT SELECT ON LOOMSPEC TO PAUL;
GRANT SELECT ON LOOMSPEC TO RALPH;
GRANT SELECT ON LOOMSPEC TO RUTHANE;
GRANT SELECT ON LOOMSPEC TO SHAHIEDA;
GRANT SELECT ON LOOMSPEC TO SHARON;
GRANT SELECT ON LOOMSPEC TO SHAUN;
GRANT SELECT ON LOOMSPEC TO SIDWELL;
GRANT SELECT ON LOOMSPEC TO STEPHAN;
GRANT SELECT ON LOOMSPEC TO SUES;
GRANT SELECT ON LOOMSPEC TO SUSAN;
GRANT SELECT ON LOOMSPEC TO VIVIAN;
GRANT SELECT ON LOOMTYPE TO ANDRIES;
GRANT SELECT ON LOOMTYPE TO ANTHEA;
GRANT SELECT ON LOOMTYPE TO BARBARA;
GRANT SELECT ON LOOMTYPE TO BARRY;
GRANT SELECT ON LOOMTYPE TO BELINDA;
GRANT SELECT ON LOOMTYPE TO CHRISTEL;
GRANT SELECT ON LOOMTYPE TO CHRYSTAL;
GRANT SELECT ON LOOMTYPE TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON LOOMTYPE TO DAVID;
GRANT SELECT ON LOOMTYPE TO DONOVAN;
GRANT SELECT ON LOOMTYPE TO ELRIQUE;
GRANT SELECT ON LOOMTYPE TO ESTELLE;
GRANT SELECT ON LOOMTYPE TO EUGENE;
GRANT SELECT ON LOOMTYPE TO EUGENEA;
GRANT SELECT ON LOOMTYPE TO FILECIA;
GRANT SELECT ON LOOMTYPE TO GEORGINA;
GRANT SELECT ON LOOMTYPE TO GLODENE;
GRANT SELECT ON LOOMTYPE TO GREG;
GRANT SELECT ON LOOMTYPE TO ISAAC;
GRANT SELECT ON LOOMTYPE TO JEROME;
GRANT SELECT ON LOOMTYPE TO JOAN;
GRANT SELECT ON LOOMTYPE TO JOANVW;
GRANT SELECT ON LOOMTYPE TO JUANITA;
GRANT SELECT ON LOOMTYPE TO KATY;
GRANT SELECT ON LOOMTYPE TO KEITH;
GRANT SELECT ON LOOMTYPE TO LESDENE;
GRANT SELECT ON LOOMTYPE TO LINDA;
GRANT SELECT ON LOOMTYPE TO LINDAC;
GRANT SELECT ON LOOMTYPE TO LIZELLE;
GRANT SELECT ON LOOMTYPE TO MAGDA;
GRANT SELECT ON LOOMTYPE TO MARY;
GRANT SELECT ON LOOMTYPE TO MONIQUE;
GRANT SELECT ON LOOMTYPE TO NADIA;
GRANT SELECT ON LOOMTYPE TO NANCY;
GRANT SELECT ON LOOMTYPE TO NATALIA;
GRANT SELECT ON LOOMTYPE TO NEVILLE;
GRANT SELECT ON LOOMTYPE TO PAUL;
GRANT SELECT ON LOOMTYPE TO RALPH;
GRANT SELECT ON LOOMTYPE TO RUTHANE;
GRANT SELECT ON LOOMTYPE TO SHAHIEDA;
GRANT SELECT ON LOOMTYPE TO SHARON;
GRANT SELECT ON LOOMTYPE TO SHAUN;
GRANT SELECT ON LOOMTYPE TO SIDWELL;
GRANT SELECT ON LOOMTYPE TO STEPHAN;
GRANT SELECT ON LOOMTYPE TO SUES;
GRANT SELECT ON LOOMTYPE TO SUSAN;
GRANT SELECT ON LOOMTYPE TO VIVIAN;
GRANT SELECT ON MEVBSALES TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MEVBSALES TO DAVID;
GRANT SELECT ON MEVBSALES TO MONIQUE;
GRANT SELECT ON MEVBSALES TO SUES;
GRANT SELECT ON MEVBSALES TO VIVIAN;
GRANT SELECT ON MEVBSLIT TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MEVBSLIT TO DAVID;
GRANT SELECT ON MEVBSLIT TO MONIQUE;
GRANT SELECT ON MEVBSLIT TO SUES;
GRANT SELECT ON MEVBSLIT TO VIVIAN;
GRANT SELECT ON MEVBSTOCK TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MEVBSTOCK TO DAVID;
GRANT SELECT ON MEVBSTOCK TO MONIQUE;
GRANT SELECT ON MEVBSTOCK TO SUES;
GRANT SELECT ON MEVBSTOCK TO VIVIAN;
GRANT SELECT ON MEVBSTOCKMIN TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MEVBSTOCKMIN TO DAVID;
GRANT SELECT ON MEVBSTOCKMIN TO MONIQUE;
GRANT SELECT ON MEVBSTOCKMIN TO SUES;
GRANT SELECT ON MEVBSTOCKMIN TO VIVIAN;
GRANT SELECT ON MEVBWEAVING TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MEVBWEAVING TO DAVID;
GRANT SELECT ON MEVBWEAVING TO MONIQUE;
GRANT SELECT ON MEVBWEAVING TO SUES;
GRANT SELECT ON MEVBWEAVING TO VIVIAN;
GRANT SELECT ON MEWARPUSED TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MEWARPUSED TO DAVID;
GRANT SELECT ON MEWARPUSED TO MONIQUE;
GRANT SELECT ON MEWARPUSED TO SUES;
GRANT SELECT ON MEWARPUSED TO VIVIAN;
GRANT SELECT ON MEWEFTUSED TO BARRY;
GRANT SELECT ON MEYARNANAL TO BARRY;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO BARBARA;
GRANT SELECT ON PIECERCPT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO BELINDA;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO CHRISTEL;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON PIECERCPT TO DAVID;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO GREG;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO JEROME;
GRANT SELECT ON PIECERCPT TO JOAN;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO KATY;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO KEITH;
GRANT SELECT ON PIECERCPT TO LANCE;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO LESDENE;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO LINDA;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO MAGDA;
GRANT SELECT ON PIECERCPT TO MARIO;
GRANT SELECT ON PIECERCPT TO MARK;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO MARY;
GRANT SELECT ON PIECERCPT TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO NANCY;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO NATALIA;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO NEVILLE;
GRANT SELECT ON PIECERCPT TO PAUL;
GRANT SELECT ON PIECERCPT TO RALPH;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO SHARON;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON PIECERCPT TO STEPHAN;
GRANT SELECT ON PIECERCPT TO SUES;
GRANT SELECT ON PIECERCPT TO SUSAN;
GRANT SELECT ON PIECERCPT TO VIVIAN;
GRANT SELECT ON PRICETYPE TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO BARBARA;
GRANT SELECT ON PRODCAT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO GREG;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO JEROME;
GRANT SELECT ON PRODCAT TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO KEITH;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO NATALIA;
GRANT SELECT ON PRODCAT TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON PRODCAT TO SHARON;
GRANT SELECT ON PRODCAT TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO BARBARA;
GRANT SELECT ON PRODSUP TO BARRY;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO GREG;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO JEROME;
GRANT SELECT ON PRODSUP TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO KEITH;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO NADIA;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO NATALIA;
GRANT SELECT ON PRODSUP TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON PRODSUP TO SHARON;
GRANT SELECT ON PRODSUP TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO BARBARA;
GRANT SELECT ON PRODUCT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO GREG;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO JEROME;
GRANT SELECT, UPDATE, REFERENCES ON PRODUCT TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO KEITH;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO NATALIA;
GRANT SELECT ON PRODUCT TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON PRODUCT TO SHARON;
GRANT SELECT ON PRODUCT TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO BARBARA;
GRANT SELECT, REFERENCES ON QLTYREASON TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON QLTYREASON TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO NATALIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON QLTYREASON TO PAUL;
GRANT SELECT ON QLTYREASON TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON QLTYREASON TO VIVIAN;
GRANT INSERT, REFERENCES ON REPL_LOG TO PUBLIC;
GRANT SELECT, REFERENCES ON REPL_SEPARATOR TO PUBLIC;
GRANT SELECT ON RMTXNDETCATEGORY TO ANDRIES;
GRANT SELECT ON RMTXNDETCATEGORY TO BARBARA;
GRANT SELECT ON RMTXNDETCATEGORY TO BARRY;
GRANT SELECT ON RMTXNDETCATEGORY TO CORDENAI;
GRANT SELECT ON RMTXNDETCATEGORY TO DONOVAN;
GRANT SELECT ON RMTXNDETCATEGORY TO GLODENE;
GRANT SELECT ON RMTXNDETCATEGORY TO GREG;
GRANT SELECT ON RMTXNDETCATEGORY TO ISAAC;
GRANT SELECT ON RMTXNDETCATEGORY TO JEROME;
GRANT SELECT ON RMTXNDETCATEGORY TO KEITH;
GRANT SELECT ON RMTXNDETCATEGORY TO LINDAC;
GRANT SELECT ON RMTXNDETCATEGORY TO MAGDA;
GRANT SELECT ON RMTXNDETCATEGORY TO NADIA;
GRANT SELECT ON RMTXNDETCATEGORY TO NATALIA;
GRANT SELECT ON RMTXNDETCATEGORY TO SHARON;
GRANT SELECT ON RMTXNDETCATEGORY TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON SALEGROUP TO BARRY;
GRANT SELECT ON STDCOSTPRICES TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON STDCOSTPRICES TO DAVID;
GRANT SELECT ON STDCOSTPRICES TO MONIQUE;
GRANT SELECT ON STDCOSTPRICES TO RALPH;
GRANT SELECT ON STDCOSTPRICES TO SUES;
GRANT SELECT ON STDCOSTPRICES TO SUSAN;
GRANT SELECT ON STDCOSTPRICES TO VIVIAN;
GRANT SELECT ON STDQLTYVALUES TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON STDQLTYVALUES TO DAVID;
GRANT SELECT ON STDQLTYVALUES TO MONIQUE;
GRANT SELECT ON STDQLTYVALUES TO RALPH;
GRANT SELECT ON STDQLTYVALUES TO SUES;
GRANT SELECT ON STDQLTYVALUES TO SUSAN;
GRANT SELECT ON STDQLTYVALUES TO VIVIAN;
GRANT SELECT ON STRULOOM TO ANDRIES;
GRANT SELECT ON STRULOOM TO ANTHEA;
GRANT SELECT ON STRULOOM TO BARBARA;
GRANT SELECT ON STRULOOM TO BARRY;
GRANT SELECT ON STRULOOM TO BELINDA;
GRANT SELECT ON STRULOOM TO CHRISTEL;
GRANT SELECT ON STRULOOM TO CHRYSTAL;
GRANT SELECT ON STRULOOM TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON STRULOOM TO DAVID;
GRANT SELECT ON STRULOOM TO DONOVAN;
GRANT SELECT ON STRULOOM TO ELRIQUE;
GRANT SELECT ON STRULOOM TO ESTELLE;
GRANT SELECT ON STRULOOM TO EUGENE;
GRANT SELECT ON STRULOOM TO EUGENEA;
GRANT SELECT ON STRULOOM TO FILECIA;
GRANT SELECT ON STRULOOM TO GEORGINA;
GRANT SELECT ON STRULOOM TO GLODENE;
GRANT SELECT ON STRULOOM TO GREG;
GRANT SELECT ON STRULOOM TO ISAAC;
GRANT SELECT ON STRULOOM TO JEROME;
GRANT SELECT ON STRULOOM TO JOAN;
GRANT SELECT ON STRULOOM TO JOANVW;
GRANT SELECT ON STRULOOM TO JUANITA;
GRANT SELECT ON STRULOOM TO KATY;
GRANT SELECT ON STRULOOM TO KEITH;
GRANT SELECT ON STRULOOM TO LANCE;
GRANT SELECT ON STRULOOM TO LESDENE;
GRANT SELECT ON STRULOOM TO LINDA;
GRANT SELECT ON STRULOOM TO LINDAC;
GRANT SELECT ON STRULOOM TO LIZELLE;
GRANT SELECT ON STRULOOM TO MAGDA;
GRANT SELECT ON STRULOOM TO MARIO;
GRANT SELECT ON STRULOOM TO MARK;
GRANT SELECT ON STRULOOM TO MARY;
GRANT SELECT ON STRULOOM TO MONIQUE;
GRANT SELECT ON STRULOOM TO NADIA;
GRANT SELECT ON STRULOOM TO NANCY;
GRANT SELECT ON STRULOOM TO NATALIA;
GRANT SELECT ON STRULOOM TO NEVILLE;
GRANT SELECT ON STRULOOM TO PAUL;
GRANT SELECT ON STRULOOM TO RALPH;
GRANT SELECT ON STRULOOM TO RUTHANE;
GRANT SELECT ON STRULOOM TO SHAHIEDA;
GRANT SELECT ON STRULOOM TO SHARON;
GRANT SELECT ON STRULOOM TO SHAUN;
GRANT SELECT ON STRULOOM TO SIDWELL;
GRANT SELECT ON STRULOOM TO STEPHAN;
GRANT SELECT ON STRULOOM TO SUES;
GRANT SELECT ON STRULOOM TO SUSAN;
GRANT SELECT ON STRULOOM TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO ANDRIES;
GRANT SELECT ON SUPPLIER TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO BARBARA;
GRANT SELECT ON SUPPLIER TO BARRY;
GRANT SELECT ON SUPPLIER TO BELINDA;
GRANT SELECT ON SUPPLIER TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO DAVID;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO DONOVAN;
GRANT SELECT ON SUPPLIER TO ELRIQUE;
GRANT SELECT ON SUPPLIER TO ESTELLE;
GRANT SELECT ON SUPPLIER TO FILECIA;
GRANT SELECT ON SUPPLIER TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO GREG;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO JEROME;
GRANT DELETE, INSERT, SELECT, UPDATE ON SUPPLIER TO JOAN;
GRANT SELECT ON SUPPLIER TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO KEITH;
GRANT SELECT ON SUPPLIER TO LINDA;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO LINDAC;
GRANT SELECT ON SUPPLIER TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO MAGDA;
GRANT SELECT ON SUPPLIER TO MARY;
GRANT SELECT ON SUPPLIER TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO NADIA;
GRANT SELECT ON SUPPLIER TO NANCY;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO NATALIA;
GRANT SELECT ON SUPPLIER TO NEVILLE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO PAUL;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO RALPH;
GRANT INSERT, SELECT, UPDATE ON SUPPLIER TO SHARON;
GRANT SELECT ON SUPPLIER TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO SUSAN;
GRANT SELECT ON SUPPLIER TO VIVIAN;
GRANT SELECT ON TERMS TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON TERMS TO JOAN;
GRANT SELECT ON TERMS TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO PAUL;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO RALPH;
GRANT SELECT ON TERMS TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TERMS TO SUSAN;
GRANT SELECT ON TERMS TO VIVIAN;
GRANT SELECT ON TREDUK TO BARRY;
GRANT SELECT ON TREDUK TO PUBLIC;
GRANT SELECT ON TXNDET TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TXNDET TO DAVID;
GRANT INSERT ON TXNDET TO ESTELLE;
GRANT INSERT ON TXNDET TO EUGENE;
GRANT INSERT ON TXNDET TO EUGENEA;
GRANT INSERT ON TXNDET TO GEORGINA;
GRANT INSERT ON TXNDET TO JOANVW;
GRANT INSERT ON TXNDET TO JUANITA;
GRANT SELECT ON TXNDET TO MONIQUE;
GRANT INSERT ON TXNDET TO PUBLIC;
GRANT SELECT ON TXNDET TO RALPH;
GRANT INSERT ON TXNDET TO RUTHANE;
GRANT INSERT ON TXNDET TO SIDWELL;
GRANT SELECT ON TXNDET TO SUES;
GRANT SELECT ON TXNDET TO SUSAN;
GRANT SELECT ON TXNDET TO VIVIAN;
GRANT SELECT ON TXNDETSUMMARISE TO BARRY;
GRANT SELECT ON TXNDETSUMMARISE TO VIVIAN;
GRANT SELECT ON TXNDETSUMMARY TO BARRY;
GRANT SELECT ON TXNDETSUMMARY TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON UNIT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON UNIT TO BARBARA;
GRANT SELECT ON UNIT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON UNIT TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON UNIT TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON UNIT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON UNIT TO GREG;
GRANT INSERT, SELECT, UPDATE ON UNIT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON UNIT TO JEROME;
GRANT INSERT, SELECT, UPDATE ON UNIT TO KEITH;
GRANT INSERT, SELECT, UPDATE ON UNIT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON UNIT TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON UNIT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON UNIT TO NATALIA;
GRANT SELECT ON UNIT TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON UNIT TO SHARON;
GRANT SELECT ON UNIT TO VIVIAN;
GRANT SELECT ON VBAVESALESTEMP TO BARRY;
GRANT SELECT ON VBAVESALESTEMP TO PAUL;
GRANT SELECT ON VBAVESALESTEMP TO PUBLIC;
GRANT SELECT ON VBBOXDETAILS TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBBOXDETAILS TO PUBLIC;
GRANT SELECT ON VBBOXESINSTOCK TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBBOXESINSTOCK TO PUBLIC;
GRANT SELECT ON VBDAILYANALYSE TO BARRY;
GRANT SELECT ON VBDAILYBALANCE TO BARRY;
GRANT SELECT ON VBDAILYBALANCE TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO BARBARA;
GRANT SELECT ON VBDESPHDR TO BARRY;
GRANT SELECT ON VBDESPHDR TO BELINDA;
GRANT SELECT ON VBDESPHDR TO CORDELIA;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBDESPHDR TO DAVID;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO DONOVAN;
GRANT SELECT ON VBDESPHDR TO ESTELLE;
GRANT SELECT ON VBDESPHDR TO EUGENE;
GRANT SELECT ON VBDESPHDR TO EUGENEA;
GRANT SELECT ON VBDESPHDR TO FILECIA;
GRANT SELECT ON VBDESPHDR TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO GREG;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO JEROME;
GRANT SELECT, UPDATE ON VBDESPHDR TO JOAN;
GRANT SELECT ON VBDESPHDR TO JOANVW;
GRANT SELECT ON VBDESPHDR TO JUANITA;
GRANT SELECT ON VBDESPHDR TO KATY;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO KEITH;
GRANT SELECT ON VBDESPHDR TO LINDA;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO LINDAC;
GRANT SELECT ON VBDESPHDR TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO MAGDA;
GRANT SELECT ON VBDESPHDR TO MARY;
GRANT SELECT ON VBDESPHDR TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO NADIA;
GRANT SELECT ON VBDESPHDR TO NANCY;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO NATALIA;
GRANT SELECT, UPDATE ON VBDESPHDR TO PAUL;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO RALPH;
GRANT SELECT ON VBDESPHDR TO RUTHANE;
GRANT SELECT ON VBDESPHDR TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO SHARON;
GRANT SELECT ON VBDESPHDR TO SIDWELL;
GRANT SELECT ON VBDESPHDR TO SUES;
GRANT INSERT, SELECT, UPDATE ON VBDESPHDR TO SUSAN;
GRANT SELECT ON VBDESPHDR TO VIVIAN;
GRANT SELECT ON VBDESPSTEMP TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO BARBARA;
GRANT SELECT ON VBFIN TO BARRY;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO CORDENAI;
GRANT SELECT ON VBFIN TO ESTELLE;
GRANT SELECT ON VBFIN TO EUGENE;
GRANT SELECT ON VBFIN TO EUGENEA;
GRANT SELECT ON VBFIN TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO GLODENE;
GRANT SELECT ON VBFIN TO JOANVW;
GRANT SELECT ON VBFIN TO JUANITA;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO NADIA;
GRANT INSERT, SELECT, UPDATE ON VBFIN TO NATALIA;
GRANT SELECT ON VBFIN TO RUTHANE;
GRANT SELECT ON VBFIN TO SIDWELL;
GRANT SELECT ON VBFIN TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBINVDET TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBINVDET TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBINVHDR TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBINVHDR TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBINVHDREXTRA TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBINVHDREXTRA TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO BARBARA;
GRANT SELECT ON VBLABELSTRU TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBLABELSTRU TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBLABELSTRU TO NATALIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBLABELSTRU TO PAUL;
GRANT SELECT ON VBLABELSTRU TO PUBLIC;
GRANT SELECT ON VBLSP TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBLSP TO DAVID;
GRANT SELECT ON VBLSP TO JOAN;
GRANT SELECT ON VBLSP TO MONIQUE;
GRANT SELECT ON VBLSP TO PAUL;
GRANT SELECT ON VBLSP TO RALPH;
GRANT SELECT ON VBLSP TO SUES;
GRANT SELECT ON VBLSP TO SUSAN;
GRANT SELECT ON VBLSP TO VIVIAN;
GRANT SELECT ON VBLSPSTD TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBLSPSTD TO DAVID;
GRANT SELECT ON VBLSPSTD TO JOAN;
GRANT SELECT ON VBLSPSTD TO MONIQUE;
GRANT SELECT ON VBLSPSTD TO PAUL;
GRANT SELECT ON VBLSPSTD TO RALPH;
GRANT SELECT ON VBLSPSTD TO SUES;
GRANT SELECT ON VBLSPSTD TO SUSAN;
GRANT SELECT ON VBLSPSTD TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO BARBARA;
GRANT SELECT, REFERENCES ON VBMAKE TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO DONOVAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO GREG;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO ISAAC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO JEROME;
GRANT SELECT ON VBMAKE TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO KEITH;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO MAGDA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO NATALIA;
GRANT SELECT ON VBMAKE TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO RALPH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO SHARON;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE TO SUSAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO BARBARA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO DONOVAN;
GRANT SELECT ON VBMAKE_FIN TO ESTELLE;
GRANT SELECT ON VBMAKE_FIN TO EUGENE;
GRANT SELECT ON VBMAKE_FIN TO EUGENEA;
GRANT SELECT ON VBMAKE_FIN TO GEORGINA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO GREG;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO ISAAC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO JEROME;
GRANT SELECT ON VBMAKE_FIN TO JOAN;
GRANT SELECT ON VBMAKE_FIN TO JOANVW;
GRANT SELECT ON VBMAKE_FIN TO JUANITA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO KEITH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO LANCE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO MAGDA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO MARIO;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO MARK;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO NATALIA;
GRANT SELECT ON VBMAKE_FIN TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO RALPH;
GRANT SELECT ON VBMAKE_FIN TO RUTHANE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO SHARON;
GRANT SELECT ON VBMAKE_FIN TO SIDWELL;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FIN TO SUSAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_FIN TO VIVIAN;
GRANT SELECT ON VBMAKE_FINBAK TO BARRY;
GRANT SELECT ON VBMAKE_FINBAK1 TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_FINTEMP TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO BARBARA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO DONOVAN;
GRANT SELECT ON VBMAKE_WARP TO ESTELLE;
GRANT SELECT ON VBMAKE_WARP TO EUGENE;
GRANT SELECT ON VBMAKE_WARP TO EUGENEA;
GRANT SELECT ON VBMAKE_WARP TO GEORGINA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO GREG;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO ISAAC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO JEROME;
GRANT SELECT ON VBMAKE_WARP TO JOAN;
GRANT SELECT ON VBMAKE_WARP TO JOANVW;
GRANT SELECT ON VBMAKE_WARP TO JUANITA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO KEITH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO LANCE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO MAGDA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO MARIO;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO MARK;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO NATALIA;
GRANT SELECT ON VBMAKE_WARP TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO RALPH;
GRANT SELECT ON VBMAKE_WARP TO RUTHANE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO SHARON;
GRANT SELECT ON VBMAKE_WARP TO SIDWELL;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARP TO SUSAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WARP TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WARPTEMP TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO BARBARA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO DONOVAN;
GRANT SELECT ON VBMAKE_WPYARN TO ESTELLE;
GRANT SELECT ON VBMAKE_WPYARN TO EUGENE;
GRANT SELECT ON VBMAKE_WPYARN TO EUGENEA;
GRANT SELECT ON VBMAKE_WPYARN TO GEORGINA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO GREG;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO ISAAC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO JEROME;
GRANT SELECT ON VBMAKE_WPYARN TO JOANVW;
GRANT SELECT ON VBMAKE_WPYARN TO JUANITA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO KEITH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO LANCE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO MAGDA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO MARIO;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WPYARN TO MARK;
GRANT SELECT ON VBMAKE_WPYARN TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO NATALIA;
GRANT SELECT ON VBMAKE_WPYARN TO RUTHANE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARN TO SHARON;
GRANT SELECT ON VBMAKE_WPYARN TO SIDWELL;
GRANT SELECT ON VBMAKE_WPYARN TO SUES;
GRANT SELECT ON VBMAKE_WPYARN TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WPYARNTEMP TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO BARBARA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO DAVID;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO DONOVAN;
GRANT SELECT ON VBMAKE_WTYARN TO ESTELLE;
GRANT SELECT ON VBMAKE_WTYARN TO EUGENE;
GRANT SELECT ON VBMAKE_WTYARN TO EUGENEA;
GRANT SELECT ON VBMAKE_WTYARN TO GEORGINA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO GREG;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO ISAAC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO JEROME;
GRANT SELECT ON VBMAKE_WTYARN TO JOANVW;
GRANT SELECT ON VBMAKE_WTYARN TO JUANITA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO KEITH;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO LANCE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO MAGDA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO MARIO;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBMAKE_WTYARN TO MARK;
GRANT SELECT ON VBMAKE_WTYARN TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO NATALIA;
GRANT SELECT ON VBMAKE_WTYARN TO RUTHANE;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARN TO SHARON;
GRANT SELECT ON VBMAKE_WTYARN TO SIDWELL;
GRANT SELECT ON VBMAKE_WTYARN TO SUES;
GRANT SELECT ON VBMAKE_WTYARN TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBMAKE_WTYARNTEMP TO PUBLIC;
GRANT SELECT, UPDATE ON VBNEXTNO TO ANDRIES;
GRANT SELECT, UPDATE ON VBNEXTNO TO ANTHEA;
GRANT SELECT, UPDATE ON VBNEXTNO TO BARBARA;
GRANT SELECT ON VBNEXTNO TO BARRY;
GRANT SELECT, UPDATE ON VBNEXTNO TO BELINDA;
GRANT SELECT, UPDATE ON VBNEXTNO TO CHRISTEL;
GRANT SELECT, UPDATE ON VBNEXTNO TO CHRYSTAL;
GRANT SELECT, UPDATE ON VBNEXTNO TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBNEXTNO TO DAVID;
GRANT SELECT, UPDATE ON VBNEXTNO TO DONOVAN;
GRANT SELECT, UPDATE ON VBNEXTNO TO ELRIQUE;
GRANT SELECT, UPDATE ON VBNEXTNO TO ESTELLE;
GRANT SELECT, UPDATE ON VBNEXTNO TO EUGENE;
GRANT SELECT, UPDATE ON VBNEXTNO TO EUGENEA;
GRANT SELECT, UPDATE ON VBNEXTNO TO FILECIA;
GRANT SELECT, UPDATE ON VBNEXTNO TO GEORGINA;
GRANT SELECT, UPDATE ON VBNEXTNO TO GLODENE;
GRANT SELECT, UPDATE ON VBNEXTNO TO GREG;
GRANT SELECT, UPDATE ON VBNEXTNO TO ISAAC;
GRANT SELECT, UPDATE ON VBNEXTNO TO JEROME;
GRANT SELECT, UPDATE ON VBNEXTNO TO JOAN;
GRANT SELECT, UPDATE ON VBNEXTNO TO JOANVW;
GRANT SELECT, UPDATE ON VBNEXTNO TO JUANITA;
GRANT SELECT, UPDATE ON VBNEXTNO TO KATY;
GRANT SELECT, UPDATE ON VBNEXTNO TO KEITH;
GRANT SELECT, UPDATE ON VBNEXTNO TO LANCE;
GRANT SELECT, UPDATE ON VBNEXTNO TO LESDENE;
GRANT SELECT, UPDATE ON VBNEXTNO TO LINDA;
GRANT SELECT, UPDATE ON VBNEXTNO TO LINDAC;
GRANT SELECT, UPDATE ON VBNEXTNO TO LIZELLE;
GRANT SELECT, UPDATE ON VBNEXTNO TO MAGDA;
GRANT SELECT, UPDATE ON VBNEXTNO TO MARIO;
GRANT SELECT, UPDATE ON VBNEXTNO TO MARK;
GRANT SELECT, UPDATE ON VBNEXTNO TO MARY;
GRANT SELECT ON VBNEXTNO TO MONIQUE;
GRANT SELECT, UPDATE ON VBNEXTNO TO NADIA;
GRANT SELECT, UPDATE ON VBNEXTNO TO NANCY;
GRANT SELECT, UPDATE ON VBNEXTNO TO NATALIA;
GRANT SELECT, UPDATE ON VBNEXTNO TO NEVILLE;
GRANT SELECT, UPDATE ON VBNEXTNO TO PAUL;
GRANT SELECT, UPDATE ON VBNEXTNO TO RALPH;
GRANT SELECT, UPDATE ON VBNEXTNO TO RUTHANE;
GRANT SELECT, UPDATE ON VBNEXTNO TO SHAHIEDA;
GRANT SELECT, UPDATE ON VBNEXTNO TO SHARON;
GRANT SELECT, UPDATE ON VBNEXTNO TO SHAUN;
GRANT SELECT, UPDATE ON VBNEXTNO TO SIDWELL;
GRANT SELECT, UPDATE ON VBNEXTNO TO STEPHAN;
GRANT SELECT ON VBNEXTNO TO SUES;
GRANT SELECT, UPDATE ON VBNEXTNO TO SUSAN;
GRANT SELECT ON VBNEXTNO TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBORDDET TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBORDDET TO BARBARA;
GRANT SELECT ON VBORDDET TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBORDDET TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBORDDET TO DAVID;
GRANT SELECT, UPDATE ON VBORDDET TO DONOVAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBORDDET TO GLODENE;
GRANT SELECT, UPDATE ON VBORDDET TO GREG;
GRANT SELECT, UPDATE ON VBORDDET TO ISAAC;
GRANT SELECT, UPDATE ON VBORDDET TO JEROME;
GRANT SELECT, UPDATE ON VBORDDET TO JOAN;
GRANT SELECT, UPDATE ON VBORDDET TO KEITH;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBORDDET TO LINDAC;
GRANT SELECT, UPDATE ON VBORDDET TO MAGDA;
GRANT SELECT ON VBORDDET TO MONIQUE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBORDDET TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBORDDET TO NATALIA;
GRANT SELECT, UPDATE ON VBORDDET TO PAUL;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBORDDET TO RALPH;
GRANT SELECT, UPDATE ON VBORDDET TO SHARON;
GRANT SELECT ON VBORDDET TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBORDDET TO SUSAN;
GRANT SELECT ON VBORDDET TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO BARBARA;
GRANT SELECT ON VBORDHDR TO BARRY;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON VBORDHDR TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBORDHDR TO DAVID;
GRANT SELECT ON VBORDHDR TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO GLODENE;
GRANT SELECT ON VBORDHDR TO GREG;
GRANT SELECT ON VBORDHDR TO ISAAC;
GRANT SELECT ON VBORDHDR TO JEROME;
GRANT SELECT ON VBORDHDR TO JOAN;
GRANT SELECT ON VBORDHDR TO KEITH;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO LINDAC;
GRANT SELECT ON VBORDHDR TO MAGDA;
GRANT SELECT ON VBORDHDR TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO NADIA;
GRANT INSERT, SELECT, UPDATE, REFERENCES ON VBORDHDR TO NATALIA;
GRANT SELECT ON VBORDHDR TO PAUL;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO RALPH;
GRANT SELECT ON VBORDHDR TO SHARON;
GRANT SELECT ON VBORDHDR TO SUES;
GRANT INSERT, SELECT, UPDATE ON VBORDHDR TO SUSAN;
GRANT SELECT ON VBORDHDR TO VIVIAN;
GRANT UPDATE ON VBPARAMS TO ANDRIES;
GRANT UPDATE ON VBPARAMS TO BARBARA;
GRANT SELECT ON VBPARAMS TO BARRY;
GRANT UPDATE ON VBPARAMS TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBPARAMS TO DAVID;
GRANT UPDATE ON VBPARAMS TO DONOVAN;
GRANT SELECT ON VBPARAMS TO ESTELLE;
GRANT SELECT ON VBPARAMS TO EUGENE;
GRANT SELECT ON VBPARAMS TO EUGENEA;
GRANT SELECT ON VBPARAMS TO GEORGINA;
GRANT UPDATE ON VBPARAMS TO GLODENE;
GRANT UPDATE ON VBPARAMS TO GREG;
GRANT UPDATE ON VBPARAMS TO ISAAC;
GRANT UPDATE ON VBPARAMS TO JEROME;
GRANT UPDATE ON VBPARAMS TO JOAN;
GRANT SELECT ON VBPARAMS TO JOANVW;
GRANT SELECT ON VBPARAMS TO JUANITA;
GRANT SELECT ON VBPARAMS TO JUDITH;
GRANT UPDATE ON VBPARAMS TO KEITH;
GRANT UPDATE ON VBPARAMS TO LANCE;
GRANT UPDATE ON VBPARAMS TO LINDAC;
GRANT UPDATE ON VBPARAMS TO MAGDA;
GRANT UPDATE ON VBPARAMS TO MARIO;
GRANT UPDATE ON VBPARAMS TO MARK;
GRANT UPDATE ON VBPARAMS TO MONIQUE;
GRANT UPDATE ON VBPARAMS TO NADIA;
GRANT UPDATE ON VBPARAMS TO NATALIA;
GRANT UPDATE ON VBPARAMS TO PAUL;
GRANT SELECT, UPDATE ON VBPARAMS TO PUBLIC;
GRANT UPDATE ON VBPARAMS TO RALPH;
GRANT SELECT ON VBPARAMS TO RUTHANE;
GRANT UPDATE ON VBPARAMS TO SHARON;
GRANT SELECT ON VBPARAMS TO SIDWELL;
GRANT UPDATE ON VBPARAMS TO SUES;
GRANT UPDATE ON VBPARAMS TO SUSAN;
GRANT UPDATE ON VBPARAMS TO VIVIAN;
GRANT SELECT ON VBPLACE TO BARRY;
GRANT SELECT ON VBPRICESSTD TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBPRICESSTD TO DAVID;
GRANT SELECT ON VBPRICESSTD TO JOAN;
GRANT SELECT ON VBPRICESSTD TO MONIQUE;
GRANT SELECT ON VBPRICESSTD TO PAUL;
GRANT SELECT ON VBPRICESSTD TO RALPH;
GRANT SELECT ON VBPRICESSTD TO SUES;
GRANT SELECT ON VBPRICESSTD TO SUSAN;
GRANT SELECT ON VBPRICESSTD TO VIVIAN;
GRANT SELECT ON VBQLTY TO BARRY;
GRANT SELECT ON VBQLTY TO ESTELLE;
GRANT SELECT ON VBQLTY TO EUGENE;
GRANT SELECT ON VBQLTY TO EUGENEA;
GRANT SELECT ON VBQLTY TO GEORGINA;
GRANT SELECT ON VBQLTY TO JOANVW;
GRANT SELECT ON VBQLTY TO JUANITA;
GRANT SELECT ON VBQLTY TO PUBLIC;
GRANT SELECT ON VBQLTY TO RUTHANE;
GRANT SELECT ON VBQLTY TO SIDWELL;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO BARBARA;
GRANT SELECT ON VBRCPT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO BELINDA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO CHRISTEL;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBRCPT TO DAVID;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO ELRIQUE;
GRANT SELECT ON VBRCPT TO ESTELLE;
GRANT SELECT ON VBRCPT TO EUGENE;
GRANT SELECT ON VBRCPT TO EUGENEA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO FILECIA;
GRANT SELECT ON VBRCPT TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO GREG;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO JEROME;
GRANT SELECT, UPDATE ON VBRCPT TO JOAN;
GRANT SELECT ON VBRCPT TO JOANVW;
GRANT SELECT ON VBRCPT TO JUANITA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO KATY;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO KEITH;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO LESDENE;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO LINDA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO MARY;
GRANT SELECT ON VBRCPT TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO NANCY;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO NATALIA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO NEVILLE;
GRANT SELECT, UPDATE ON VBRCPT TO PAUL;
GRANT SELECT, UPDATE ON VBRCPT TO RALPH;
GRANT SELECT ON VBRCPT TO RUTHANE;
GRANT SELECT ON VBRCPT TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO SHARON;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO SHAUN;
GRANT SELECT ON VBRCPT TO SIDWELL;
GRANT INSERT, SELECT, UPDATE ON VBRCPT TO STEPHAN;
GRANT SELECT ON VBRCPT TO SUES;
GRANT SELECT, UPDATE ON VBRCPT TO SUSAN;
GRANT SELECT ON VBRCPT TO VIVIAN;
GRANT SELECT ON VBRCPTOLDROWNO TO BARRY;
GRANT SELECT ON VBRCPTOLDROWNO TO PUBLIC;
GRANT SELECT ON VBRCPTTRACK TO BARRY;
GRANT INSERT ON VBRCPTTRACK TO PUBLIC;
GRANT SELECT ON VBSTKBAL TO BARRY;
GRANT SELECT ON VBSTOCKMIN TO ANDRIES;
GRANT SELECT ON VBSTOCKMIN TO BARBARA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBSTOCKMIN TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBSTOCKMIN TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBSTOCKMIN TO DAVID;
GRANT SELECT ON VBSTOCKMIN TO DONOVAN;
GRANT SELECT ON VBSTOCKMIN TO ESTELLE;
GRANT SELECT ON VBSTOCKMIN TO EUGENE;
GRANT SELECT ON VBSTOCKMIN TO EUGENEA;
GRANT SELECT ON VBSTOCKMIN TO GEORGINA;
GRANT SELECT ON VBSTOCKMIN TO GLODENE;
GRANT SELECT ON VBSTOCKMIN TO GREG;
GRANT SELECT ON VBSTOCKMIN TO ISAAC;
GRANT SELECT ON VBSTOCKMIN TO JEROME;
GRANT SELECT ON VBSTOCKMIN TO JOAN;
GRANT SELECT ON VBSTOCKMIN TO JOANVW;
GRANT SELECT ON VBSTOCKMIN TO JUANITA;
GRANT SELECT ON VBSTOCKMIN TO KEITH;
GRANT SELECT ON VBSTOCKMIN TO LANCE;
GRANT SELECT ON VBSTOCKMIN TO LINDAC;
GRANT SELECT ON VBSTOCKMIN TO MAGDA;
GRANT SELECT ON VBSTOCKMIN TO MARIO;
GRANT SELECT ON VBSTOCKMIN TO MARK;
GRANT SELECT ON VBSTOCKMIN TO MONIQUE;
GRANT SELECT ON VBSTOCKMIN TO NADIA;
GRANT SELECT ON VBSTOCKMIN TO NATALIA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBSTOCKMIN TO PAUL;
GRANT SELECT ON VBSTOCKMIN TO RALPH;
GRANT SELECT ON VBSTOCKMIN TO RUTHANE;
GRANT SELECT ON VBSTOCKMIN TO SHARON;
GRANT SELECT ON VBSTOCKMIN TO SIDWELL;
GRANT SELECT ON VBSTOCKMIN TO SUES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBSTOCKMIN TO SUSAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBSTOCKMIN TO VIVIAN;
GRANT SELECT ON VBSTOCKMINTEMP TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBSTOCKMINTEMP TO VIVIAN;
GRANT SELECT ON VBSTRU TO ANDRIES;
GRANT SELECT ON VBSTRU TO ANTHEA;
GRANT SELECT ON VBSTRU TO BARBARA;
GRANT SELECT ON VBSTRU TO BARRY;
GRANT SELECT ON VBSTRU TO BELINDA;
GRANT SELECT ON VBSTRU TO CHRISTEL;
GRANT SELECT ON VBSTRU TO CHRYSTAL;
GRANT SELECT ON VBSTRU TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBSTRU TO DAVID;
GRANT SELECT ON VBSTRU TO DONOVAN;
GRANT SELECT ON VBSTRU TO ELRIQUE;
GRANT SELECT ON VBSTRU TO ESTELLE;
GRANT SELECT ON VBSTRU TO EUGENE;
GRANT SELECT ON VBSTRU TO EUGENEA;
GRANT SELECT ON VBSTRU TO FILECIA;
GRANT SELECT ON VBSTRU TO GEORGINA;
GRANT SELECT ON VBSTRU TO GLODENE;
GRANT SELECT ON VBSTRU TO GREG;
GRANT SELECT ON VBSTRU TO ISAAC;
GRANT SELECT ON VBSTRU TO JEROME;
GRANT SELECT ON VBSTRU TO JOAN;
GRANT SELECT ON VBSTRU TO JOANVW;
GRANT SELECT ON VBSTRU TO JUANITA;
GRANT SELECT ON VBSTRU TO KATY;
GRANT SELECT ON VBSTRU TO KEITH;
GRANT SELECT ON VBSTRU TO LANCE;
GRANT SELECT ON VBSTRU TO LESDENE;
GRANT SELECT ON VBSTRU TO LINDA;
GRANT SELECT ON VBSTRU TO LINDAC;
GRANT SELECT ON VBSTRU TO LIZELLE;
GRANT SELECT ON VBSTRU TO MAGDA;
GRANT SELECT ON VBSTRU TO MARIO;
GRANT SELECT ON VBSTRU TO MARK;
GRANT SELECT ON VBSTRU TO MARY;
GRANT SELECT ON VBSTRU TO MONIQUE;
GRANT SELECT ON VBSTRU TO NADIA;
GRANT SELECT ON VBSTRU TO NANCY;
GRANT SELECT ON VBSTRU TO NATALIA;
GRANT SELECT ON VBSTRU TO NEVILLE;
GRANT SELECT ON VBSTRU TO PAUL;
GRANT SELECT ON VBSTRU TO RALPH;
GRANT SELECT ON VBSTRU TO RUTHANE;
GRANT SELECT ON VBSTRU TO SHAHIEDA;
GRANT SELECT ON VBSTRU TO SHARON;
GRANT SELECT ON VBSTRU TO SHAUN;
GRANT SELECT ON VBSTRU TO SIDWELL;
GRANT SELECT ON VBSTRU TO STEPHAN;
GRANT SELECT ON VBSTRU TO SUES;
GRANT SELECT ON VBSTRU TO SUSAN;
GRANT SELECT ON VBSTRU TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO ANDRIES;
GRANT SELECT ON VBTYPE TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO BARBARA;
GRANT SELECT ON VBTYPE TO BARRY;
GRANT SELECT ON VBTYPE TO BELINDA;
GRANT SELECT ON VBTYPE TO CHRISTEL;
GRANT SELECT ON VBTYPE TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBTYPE TO DAVID;
GRANT SELECT ON VBTYPE TO DONOVAN;
GRANT SELECT ON VBTYPE TO ELRIQUE;
GRANT SELECT ON VBTYPE TO ESTELLE;
GRANT SELECT ON VBTYPE TO EUGENE;
GRANT SELECT ON VBTYPE TO EUGENEA;
GRANT SELECT ON VBTYPE TO FILECIA;
GRANT SELECT ON VBTYPE TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO GLODENE;
GRANT SELECT ON VBTYPE TO GREG;
GRANT SELECT ON VBTYPE TO ISAAC;
GRANT SELECT ON VBTYPE TO JEROME;
GRANT SELECT ON VBTYPE TO JOAN;
GRANT SELECT ON VBTYPE TO JOANVW;
GRANT SELECT ON VBTYPE TO JUANITA;
GRANT SELECT ON VBTYPE TO KATY;
GRANT SELECT ON VBTYPE TO KEITH;
GRANT SELECT ON VBTYPE TO LANCE;
GRANT SELECT ON VBTYPE TO LESDENE;
GRANT SELECT ON VBTYPE TO LINDA;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO LINDAC;
GRANT SELECT ON VBTYPE TO LIZELLE;
GRANT SELECT ON VBTYPE TO MAGDA;
GRANT SELECT ON VBTYPE TO MARIO;
GRANT SELECT ON VBTYPE TO MARK;
GRANT SELECT ON VBTYPE TO MARY;
GRANT SELECT ON VBTYPE TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO NADIA;
GRANT SELECT ON VBTYPE TO NANCY;
GRANT INSERT, SELECT, UPDATE ON VBTYPE TO NATALIA;
GRANT SELECT ON VBTYPE TO NEVILLE;
GRANT SELECT ON VBTYPE TO PAUL;
GRANT SELECT ON VBTYPE TO RALPH;
GRANT SELECT ON VBTYPE TO RUTHANE;
GRANT SELECT ON VBTYPE TO SHAHIEDA;
GRANT SELECT ON VBTYPE TO SHARON;
GRANT SELECT ON VBTYPE TO SHAUN;
GRANT SELECT ON VBTYPE TO SIDWELL;
GRANT SELECT ON VBTYPE TO STEPHAN;
GRANT SELECT ON VBTYPE TO SUES;
GRANT SELECT ON VBTYPE TO SUSAN;
GRANT SELECT ON VBTYPE TO VIVIAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO ANDRIES;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO BARBARA;
GRANT SELECT ON VBTYPECLIENT TO BARRY;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBTYPECLIENT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO GLODENE;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO JOAN;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO LINDAC;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO NADIA;
GRANT DELETE, INSERT, SELECT, UPDATE ON VBTYPECLIENT TO NATALIA;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBTYPECLIENT TO PAUL;
GRANT SELECT ON VBTYPECLIENT TO PUBLIC;
GRANT SELECT ON VBWIDTH TO ANDRIES;
GRANT SELECT ON VBWIDTH TO ANTHEA;
GRANT SELECT ON VBWIDTH TO BARBARA;
GRANT SELECT ON VBWIDTH TO BARRY;
GRANT SELECT ON VBWIDTH TO BELINDA;
GRANT SELECT ON VBWIDTH TO CHRISTEL;
GRANT SELECT ON VBWIDTH TO CHRYSTAL;
GRANT SELECT ON VBWIDTH TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON VBWIDTH TO DAVID;
GRANT SELECT ON VBWIDTH TO DONOVAN;
GRANT SELECT ON VBWIDTH TO ELRIQUE;
GRANT SELECT ON VBWIDTH TO ESTELLE;
GRANT SELECT ON VBWIDTH TO EUGENE;
GRANT SELECT ON VBWIDTH TO EUGENEA;
GRANT SELECT ON VBWIDTH TO FILECIA;
GRANT SELECT ON VBWIDTH TO GEORGINA;
GRANT SELECT ON VBWIDTH TO GLODENE;
GRANT SELECT ON VBWIDTH TO GREG;
GRANT SELECT ON VBWIDTH TO ISAAC;
GRANT SELECT ON VBWIDTH TO JEROME;
GRANT SELECT ON VBWIDTH TO JOAN;
GRANT SELECT ON VBWIDTH TO JOANVW;
GRANT SELECT ON VBWIDTH TO JUANITA;
GRANT SELECT ON VBWIDTH TO KATY;
GRANT SELECT ON VBWIDTH TO KEITH;
GRANT SELECT ON VBWIDTH TO LANCE;
GRANT SELECT ON VBWIDTH TO LESDENE;
GRANT SELECT ON VBWIDTH TO LINDA;
GRANT SELECT ON VBWIDTH TO LINDAC;
GRANT SELECT ON VBWIDTH TO LIZELLE;
GRANT SELECT ON VBWIDTH TO MAGDA;
GRANT SELECT ON VBWIDTH TO MARIO;
GRANT SELECT ON VBWIDTH TO MARK;
GRANT SELECT ON VBWIDTH TO MARY;
GRANT SELECT ON VBWIDTH TO MONIQUE;
GRANT SELECT ON VBWIDTH TO NADIA;
GRANT SELECT ON VBWIDTH TO NANCY;
GRANT SELECT ON VBWIDTH TO NATALIA;
GRANT SELECT ON VBWIDTH TO NEVILLE;
GRANT SELECT ON VBWIDTH TO PAUL;
GRANT SELECT ON VBWIDTH TO RALPH;
GRANT SELECT ON VBWIDTH TO RUTHANE;
GRANT SELECT ON VBWIDTH TO SHAHIEDA;
GRANT SELECT ON VBWIDTH TO SHARON;
GRANT SELECT ON VBWIDTH TO SHAUN;
GRANT SELECT ON VBWIDTH TO SIDWELL;
GRANT SELECT ON VBWIDTH TO STEPHAN;
GRANT SELECT ON VBWIDTH TO SUES;
GRANT SELECT ON VBWIDTH TO SUSAN;
GRANT SELECT ON VBWIDTH TO VIVIAN;
GRANT SELECT ON VBYARNISSUED TO BARRY;
GRANT INSERT, SELECT, UPDATE ON VBYARNISSUED TO SHARON;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO BARBARA;
GRANT SELECT ON VBYARNRCPT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO DONOVAN;
GRANT SELECT ON VBYARNRCPT TO ESTELLE;
GRANT SELECT ON VBYARNRCPT TO EUGENE;
GRANT SELECT ON VBYARNRCPT TO EUGENEA;
GRANT SELECT ON VBYARNRCPT TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO GREG;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO JEROME;
GRANT SELECT ON VBYARNRCPT TO JOANVW;
GRANT SELECT ON VBYARNRCPT TO JUANITA;
GRANT SELECT ON VBYARNRCPT TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO KEITH;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO NATALIA;
GRANT SELECT ON VBYARNRCPT TO PUBLIC;
GRANT SELECT ON VBYARNRCPT TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPT TO SHARON;
GRANT SELECT ON VBYARNRCPT TO SIDWELL;
GRANT SELECT ON VBYARNRCPTTRACK TO BARRY;
GRANT INSERT ON VBYARNRCPTTRACK TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON VBYARNRCPTTRACK TO SHARON;
GRANT SELECT ON VTLOG TO BARRY;
GRANT SELECT ON VTPERIOD TO BARRY;
GRANT SELECT ON VTPERIOD TO ESTELLE;
GRANT SELECT ON VTPERIOD TO EUGENE;
GRANT SELECT ON VTPERIOD TO EUGENEA;
GRANT SELECT ON VTPERIOD TO GEORGINA;
GRANT SELECT ON VTPERIOD TO JOANVW;
GRANT SELECT ON VTPERIOD TO JUANITA;
GRANT SELECT ON VTPERIOD TO RUTHANE;
GRANT SELECT ON VTPERIOD TO SIDWELL;
GRANT SELECT ON VTQUARTER TO PUBLIC;
GRANT SELECT ON WARPCOL TO ANDRIES;
GRANT SELECT ON WARPCOL TO ANTHEA;
GRANT SELECT ON WARPCOL TO BARBARA;
GRANT SELECT ON WARPCOL TO BARRY;
GRANT SELECT ON WARPCOL TO BELINDA;
GRANT SELECT ON WARPCOL TO CAMERON;
GRANT SELECT ON WARPCOL TO CHRISTEL;
GRANT SELECT ON WARPCOL TO CHRYSTAL;
GRANT SELECT ON WARPCOL TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON WARPCOL TO DAVID;
GRANT SELECT ON WARPCOL TO DONOVAN;
GRANT SELECT ON WARPCOL TO ELRIQUE;
GRANT SELECT ON WARPCOL TO ESTELLE;
GRANT SELECT ON WARPCOL TO EUGENE;
GRANT SELECT ON WARPCOL TO EUGENEA;
GRANT SELECT ON WARPCOL TO FILECIA;
GRANT SELECT ON WARPCOL TO GEORGINA;
GRANT SELECT ON WARPCOL TO GLODENE;
GRANT SELECT ON WARPCOL TO GREG;
GRANT SELECT ON WARPCOL TO ISAAC;
GRANT SELECT ON WARPCOL TO JEROME;
GRANT SELECT ON WARPCOL TO JOAN;
GRANT SELECT ON WARPCOL TO JOANVW;
GRANT SELECT ON WARPCOL TO JUANITA;
GRANT SELECT ON WARPCOL TO KATY;
GRANT SELECT ON WARPCOL TO KEITH;
GRANT SELECT ON WARPCOL TO LANCE;
GRANT SELECT ON WARPCOL TO LESDENE;
GRANT SELECT ON WARPCOL TO LINDA;
GRANT SELECT ON WARPCOL TO LINDAC;
GRANT SELECT ON WARPCOL TO LIZELLE;
GRANT SELECT ON WARPCOL TO MAGDA;
GRANT SELECT ON WARPCOL TO MARIO;
GRANT SELECT ON WARPCOL TO MARK;
GRANT SELECT ON WARPCOL TO MARY;
GRANT SELECT ON WARPCOL TO MONIQUE;
GRANT SELECT ON WARPCOL TO NADIA;
GRANT SELECT ON WARPCOL TO NANCY;
GRANT SELECT ON WARPCOL TO NATALIA;
GRANT SELECT ON WARPCOL TO NEVILLE;
GRANT SELECT ON WARPCOL TO PAUL;
GRANT SELECT ON WARPCOL TO RALPH;
GRANT SELECT ON WARPCOL TO RUTHANE;
GRANT SELECT ON WARPCOL TO SHAHIEDA;
GRANT SELECT ON WARPCOL TO SHARON;
GRANT SELECT ON WARPCOL TO SHAUN;
GRANT SELECT ON WARPCOL TO SIDWELL;
GRANT SELECT ON WARPCOL TO STEPHAN;
GRANT SELECT ON WARPCOL TO SUES;
GRANT SELECT ON WARPCOL TO SUSAN;
GRANT SELECT ON WARPCOL TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO ANDRIES;
GRANT SELECT ON WARPRCPT TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO BARBARA;
GRANT SELECT ON WARPRCPT TO BARRY;
GRANT SELECT ON WARPRCPT TO BELINDA;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO CAMERON;
GRANT SELECT ON WARPRCPT TO CHRISTEL;
GRANT SELECT ON WARPRCPT TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON WARPRCPT TO DAVID;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO DONOVAN;
GRANT SELECT ON WARPRCPT TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO EUGENEA;
GRANT SELECT ON WARPRCPT TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO GREG;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO JEROME;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO JUANITA;
GRANT SELECT ON WARPRCPT TO KATY;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO KEITH;
GRANT SELECT, UPDATE ON WARPRCPT TO LANCE;
GRANT SELECT ON WARPRCPT TO LESDENE;
GRANT SELECT ON WARPRCPT TO LINDA;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO LINDAC;
GRANT SELECT ON WARPRCPT TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO MAGDA;
GRANT SELECT, UPDATE ON WARPRCPT TO MARIO;
GRANT SELECT, UPDATE ON WARPRCPT TO MARK;
GRANT SELECT ON WARPRCPT TO MARY;
GRANT SELECT ON WARPRCPT TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO NADIA;
GRANT SELECT ON WARPRCPT TO NANCY;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO NATALIA;
GRANT SELECT ON WARPRCPT TO NEVILLE;
GRANT SELECT ON WARPRCPT TO RALPH;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO SHARON;
GRANT SELECT ON WARPRCPT TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON WARPRCPT TO SIDWELL;
GRANT SELECT ON WARPRCPT TO STEPHAN;
GRANT SELECT ON WARPRCPT TO SUES;
GRANT SELECT ON WARPRCPT TO SUSAN;
GRANT SELECT ON WARPRCPT TO VIVIAN;
GRANT SELECT ON WARPTYPE TO ANDRIES;
GRANT SELECT ON WARPTYPE TO ANTHEA;
GRANT SELECT ON WARPTYPE TO BARBARA;
GRANT SELECT ON WARPTYPE TO BARRY;
GRANT SELECT ON WARPTYPE TO BELINDA;
GRANT SELECT ON WARPTYPE TO CAMERON;
GRANT SELECT ON WARPTYPE TO CHRISTEL;
GRANT SELECT ON WARPTYPE TO CHRYSTAL;
GRANT SELECT ON WARPTYPE TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON WARPTYPE TO DAVID;
GRANT SELECT ON WARPTYPE TO DONOVAN;
GRANT SELECT ON WARPTYPE TO ELRIQUE;
GRANT SELECT ON WARPTYPE TO ESTELLE;
GRANT SELECT ON WARPTYPE TO EUGENE;
GRANT SELECT ON WARPTYPE TO EUGENEA;
GRANT SELECT ON WARPTYPE TO FILECIA;
GRANT SELECT ON WARPTYPE TO GEORGINA;
GRANT SELECT ON WARPTYPE TO GLODENE;
GRANT SELECT ON WARPTYPE TO GREG;
GRANT SELECT ON WARPTYPE TO ISAAC;
GRANT SELECT ON WARPTYPE TO JEROME;
GRANT SELECT ON WARPTYPE TO JOAN;
GRANT SELECT ON WARPTYPE TO JOANVW;
GRANT SELECT ON WARPTYPE TO JUANITA;
GRANT SELECT ON WARPTYPE TO KATY;
GRANT SELECT ON WARPTYPE TO KEITH;
GRANT SELECT ON WARPTYPE TO LANCE;
GRANT SELECT ON WARPTYPE TO LESDENE;
GRANT SELECT ON WARPTYPE TO LINDA;
GRANT SELECT ON WARPTYPE TO LINDAC;
GRANT SELECT ON WARPTYPE TO LIZELLE;
GRANT SELECT ON WARPTYPE TO MAGDA;
GRANT SELECT ON WARPTYPE TO MARIO;
GRANT SELECT ON WARPTYPE TO MARK;
GRANT SELECT ON WARPTYPE TO MARY;
GRANT SELECT ON WARPTYPE TO MONIQUE;
GRANT SELECT ON WARPTYPE TO NADIA;
GRANT SELECT ON WARPTYPE TO NANCY;
GRANT SELECT ON WARPTYPE TO NATALIA;
GRANT SELECT ON WARPTYPE TO NEVILLE;
GRANT SELECT ON WARPTYPE TO PAUL;
GRANT INSERT, SELECT, UPDATE ON WARPTYPE TO RALPH;
GRANT SELECT ON WARPTYPE TO RUTHANE;
GRANT SELECT ON WARPTYPE TO SHAHIEDA;
GRANT SELECT ON WARPTYPE TO SHARON;
GRANT SELECT ON WARPTYPE TO SHAUN;
GRANT SELECT ON WARPTYPE TO SIDWELL;
GRANT SELECT ON WARPTYPE TO STEPHAN;
GRANT SELECT ON WARPTYPE TO SUES;
GRANT INSERT, SELECT, UPDATE ON WARPTYPE TO SUSAN;
GRANT SELECT ON WARPTYPE TO VIVIAN;
GRANT SELECT ON WHSALESPERCUSTOMER TO ANDRIES;
GRANT SELECT ON WHSALESPERCUSTOMER TO BARBARA;
GRANT SELECT ON WHSALESPERCUSTOMER TO BARRY;
GRANT SELECT ON WHSALESPERCUSTOMER TO CORDENAI;
GRANT SELECT ON WHSALESPERCUSTOMER TO GLODENE;
GRANT SELECT ON WHSALESPERCUSTOMER TO JOAN;
GRANT SELECT ON WHSALESPERCUSTOMER TO LINDAC;
GRANT SELECT ON WHSALESPERCUSTOMER TO NADIA;
GRANT SELECT ON WHSALESPERCUSTOMER TO NATALIA;
GRANT SELECT ON WHSALESPERCUSTOMER TO PAUL;
GRANT SELECT ON WHSALESPERCUSTOMER TO PUBLIC;
GRANT SELECT ON WHSALESPERCUSTOMER TO SUE;
GRANT SELECT ON WHSALESPERCUSTOMER TO SUSAN;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO ANDRIES;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO BARBARA;
GRANT SELECT ON WIPRCPT TO BARRY;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO CORDENAI;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO DONOVAN;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO GREG;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO JEROME;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO KEITH;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO NADIA;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO NATALIA;
GRANT SELECT ON WIPRCPT TO PUBLIC;
GRANT INSERT, SELECT, UPDATE ON WIPRCPT TO SHARON;
GRANT SELECT ON WKHRS TO BARRY;
GRANT SELECT ON WKHRS TO ESTELLE;
GRANT SELECT ON WKHRS TO EUGENE;
GRANT SELECT ON WKHRS TO EUGENEA;
GRANT SELECT ON WKHRS TO GEORGINA;
GRANT SELECT ON WKHRS TO JOANVW;
GRANT SELECT ON WKHRS TO JUANITA;
GRANT SELECT ON WKHRS TO RUTHANE;
GRANT SELECT ON WKHRS TO SIDWELL;
GRANT SELECT ON WKNO TO ANDRIES;
GRANT SELECT ON WKNO TO BARBARA;
GRANT SELECT ON WKNO TO BARRY;
GRANT SELECT ON WKNO TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON WKNO TO DAVID;
GRANT SELECT ON WKNO TO DONOVAN;
GRANT SELECT ON WKNO TO ESTELLE;
GRANT SELECT ON WKNO TO EUGENE;
GRANT SELECT ON WKNO TO EUGENEA;
GRANT SELECT ON WKNO TO GEORGINA;
GRANT SELECT ON WKNO TO GLODENE;
GRANT SELECT ON WKNO TO GREG;
GRANT SELECT ON WKNO TO ISAAC;
GRANT SELECT ON WKNO TO JEROME;
GRANT SELECT ON WKNO TO JOAN;
GRANT SELECT ON WKNO TO JOANVW;
GRANT SELECT ON WKNO TO JUANITA;
GRANT SELECT ON WKNO TO KEITH;
GRANT SELECT ON WKNO TO LINDAC;
GRANT SELECT ON WKNO TO MAGDA;
GRANT SELECT ON WKNO TO MONIQUE;
GRANT SELECT ON WKNO TO NADIA;
GRANT SELECT ON WKNO TO NATALIA;
GRANT SELECT ON WKNO TO PAUL;
GRANT SELECT ON WKNO TO RALPH;
GRANT SELECT ON WKNO TO RUTHANE;
GRANT SELECT ON WKNO TO SHARON;
GRANT SELECT ON WKNO TO SIDWELL;
GRANT SELECT ON WKNO TO SUES;
GRANT SELECT ON WKNO TO SUSAN;
GRANT SELECT ON WKNO TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO ANDRIES;
GRANT SELECT ON WORWLOTNO TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO BARBARA;
GRANT SELECT ON WORWLOTNO TO BARRY;
GRANT SELECT ON WORWLOTNO TO BELINDA;
GRANT INSERT, SELECT ON WORWLOTNO TO CAMERON;
GRANT SELECT ON WORWLOTNO TO CHRISTEL;
GRANT SELECT ON WORWLOTNO TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON WORWLOTNO TO DAVID;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO DONOVAN;
GRANT SELECT ON WORWLOTNO TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO EUGENEA;
GRANT SELECT ON WORWLOTNO TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO GREG;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO JEROME;
GRANT SELECT ON WORWLOTNO TO JOAN;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO JUANITA;
GRANT SELECT ON WORWLOTNO TO KATY;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO KEITH;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO LANCE;
GRANT SELECT ON WORWLOTNO TO LESDENE;
GRANT SELECT ON WORWLOTNO TO LINDA;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO LINDAC;
GRANT SELECT ON WORWLOTNO TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO MARIO;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO MARK;
GRANT SELECT ON WORWLOTNO TO MARY;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO NADIA;
GRANT SELECT ON WORWLOTNO TO NANCY;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO NATALIA;
GRANT SELECT ON WORWLOTNO TO NEVILLE;
GRANT SELECT ON WORWLOTNO TO PAUL;
GRANT SELECT ON WORWLOTNO TO RALPH;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO SHARON;
GRANT SELECT ON WORWLOTNO TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON WORWLOTNO TO SIDWELL;
GRANT SELECT ON WORWLOTNO TO STEPHAN;
GRANT SELECT ON WORWLOTNO TO SUES;
GRANT SELECT ON WORWLOTNO TO SUSAN;
GRANT SELECT ON WORWLOTNO TO VIVIAN;
GRANT SELECT ON YARNCOL TO ANDRIES;
GRANT SELECT ON YARNCOL TO BARBARA;
GRANT SELECT ON YARNCOL TO BARRY;
GRANT SELECT ON YARNCOL TO CHRIS;
GRANT SELECT ON YARNCOL TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNCOL TO DAVID;
GRANT SELECT ON YARNCOL TO ESTELLE;
GRANT SELECT ON YARNCOL TO EUGENE;
GRANT SELECT ON YARNCOL TO EUGENEA;
GRANT SELECT ON YARNCOL TO GEORGINA;
GRANT SELECT ON YARNCOL TO GLODENE;
GRANT SELECT ON YARNCOL TO JOAN;
GRANT SELECT ON YARNCOL TO JOANVW;
GRANT SELECT ON YARNCOL TO JUANITA;
GRANT SELECT ON YARNCOL TO JUDITH;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO KEITH;
GRANT SELECT ON YARNCOL TO LINDAC;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON YARNCOL TO MONIQUE;
GRANT SELECT ON YARNCOL TO NADIA;
GRANT SELECT ON YARNCOL TO NATALIA;
GRANT SELECT ON YARNCOL TO PAUL;
GRANT SELECT ON YARNCOL TO RALPH;
GRANT SELECT ON YARNCOL TO RUTHANE;
GRANT SELECT ON YARNCOL TO SHAHIEDA;
GRANT SELECT ON YARNCOL TO SHARON;
GRANT SELECT ON YARNCOL TO SIDWELL;
GRANT SELECT ON YARNCOL TO SUES;
GRANT SELECT ON YARNCOL TO SUSAN;
GRANT SELECT ON YARNCOL TO VIVIAN;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO ANDRIES;
GRANT SELECT ON YARNLOTNO TO ANTHEA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO BARBARA;
GRANT SELECT ON YARNLOTNO TO BARRY;
GRANT SELECT ON YARNLOTNO TO BELINDA;
GRANT SELECT ON YARNLOTNO TO CAMERON;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO CHRIS;
GRANT SELECT ON YARNLOTNO TO CHRISTEL;
GRANT SELECT ON YARNLOTNO TO CHRYSTAL;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNLOTNO TO DAVID;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO DONOVAN;
GRANT SELECT ON YARNLOTNO TO ELRIQUE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO ESTELLE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO EUGENE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO EUGENEA;
GRANT SELECT ON YARNLOTNO TO FILECIA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO GEORGINA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO GLODENE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO GREG;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO ISAAC;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JEROME;
GRANT SELECT ON YARNLOTNO TO JOAN;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JOANVW;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JUANITA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO JUDITH;
GRANT SELECT ON YARNLOTNO TO KATY;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO KEITH;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO LANCE;
GRANT SELECT ON YARNLOTNO TO LESDENE;
GRANT SELECT ON YARNLOTNO TO LINDA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO LINDAC;
GRANT SELECT ON YARNLOTNO TO LIZELLE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO MARIO;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO MARK;
GRANT SELECT ON YARNLOTNO TO MARY;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO MONIQUE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO NADIA;
GRANT SELECT ON YARNLOTNO TO NANCY;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO NATALIA;
GRANT SELECT ON YARNLOTNO TO NEVILLE;
GRANT SELECT ON YARNLOTNO TO PAUL;
GRANT SELECT ON YARNLOTNO TO RALPH;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO RUTHANE;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO SHAHIEDA;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO SHARON;
GRANT SELECT ON YARNLOTNO TO SHAUN;
GRANT INSERT, SELECT, UPDATE ON YARNLOTNO TO SIDWELL;
GRANT SELECT ON YARNLOTNO TO STEPHAN;
GRANT SELECT ON YARNLOTNO TO SUES;
GRANT SELECT ON YARNLOTNO TO SUSAN;
GRANT SELECT ON YARNLOTNO TO VIVIAN;
GRANT SELECT ON YARNSTRU TO ANDRIES;
GRANT SELECT ON YARNSTRU TO BARBARA;
GRANT SELECT ON YARNSTRU TO BARRY;
GRANT SELECT ON YARNSTRU TO CHRIS;
GRANT SELECT ON YARNSTRU TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNSTRU TO DAVID;
GRANT SELECT ON YARNSTRU TO ESTELLE;
GRANT SELECT ON YARNSTRU TO EUGENE;
GRANT SELECT ON YARNSTRU TO EUGENEA;
GRANT SELECT ON YARNSTRU TO GEORGINA;
GRANT SELECT ON YARNSTRU TO GLODENE;
GRANT SELECT ON YARNSTRU TO JOAN;
GRANT SELECT ON YARNSTRU TO JOANVW;
GRANT SELECT ON YARNSTRU TO JUANITA;
GRANT SELECT ON YARNSTRU TO JUDITH;
GRANT SELECT ON YARNSTRU TO LINDAC;
GRANT SELECT ON YARNSTRU TO MONIQUE;
GRANT SELECT ON YARNSTRU TO NADIA;
GRANT SELECT ON YARNSTRU TO NATALIA;
GRANT SELECT ON YARNSTRU TO PAUL;
GRANT SELECT ON YARNSTRU TO RALPH;
GRANT SELECT ON YARNSTRU TO RUTHANE;
GRANT SELECT ON YARNSTRU TO SHARON;
GRANT SELECT ON YARNSTRU TO SIDWELL;
GRANT SELECT ON YARNSTRU TO SUES;
GRANT SELECT ON YARNSTRU TO SUSAN;
GRANT SELECT ON YARNSTRU TO VIVIAN;
GRANT SELECT, UPDATE ON YARNTYPE TO ANDRIES;
GRANT SELECT, UPDATE ON YARNTYPE TO BARBARA;
GRANT SELECT ON YARNTYPE TO BARRY;
GRANT SELECT ON YARNTYPE TO CHRIS;
GRANT SELECT, UPDATE ON YARNTYPE TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YARNTYPE TO DAVID;
GRANT SELECT, UPDATE ON YARNTYPE TO DONOVAN;
GRANT SELECT, UPDATE ON YARNTYPE TO ESTELLE;
GRANT SELECT, UPDATE ON YARNTYPE TO EUGENE;
GRANT SELECT, UPDATE ON YARNTYPE TO EUGENEA;
GRANT SELECT, UPDATE ON YARNTYPE TO GEORGINA;
GRANT SELECT, UPDATE ON YARNTYPE TO GLODENE;
GRANT SELECT, UPDATE ON YARNTYPE TO GREG;
GRANT SELECT, UPDATE ON YARNTYPE TO ISAAC;
GRANT SELECT, UPDATE ON YARNTYPE TO JEROME;
GRANT SELECT ON YARNTYPE TO JOAN;
GRANT SELECT, UPDATE ON YARNTYPE TO JOANVW;
GRANT SELECT, UPDATE ON YARNTYPE TO JUANITA;
GRANT SELECT ON YARNTYPE TO JUDITH;
GRANT SELECT, UPDATE ON YARNTYPE TO KEITH;
GRANT SELECT, UPDATE ON YARNTYPE TO LINDAC;
GRANT SELECT, UPDATE ON YARNTYPE TO MAGDA;
GRANT INSERT, SELECT, UPDATE ON YARNTYPE TO MONIQUE;
GRANT SELECT, UPDATE ON YARNTYPE TO NADIA;
GRANT SELECT, UPDATE ON YARNTYPE TO NATALIA;
GRANT SELECT ON YARNTYPE TO PAUL;
GRANT SELECT, UPDATE ON YARNTYPE TO RALPH;
GRANT SELECT, UPDATE ON YARNTYPE TO RUTHANE;
GRANT SELECT, UPDATE ON YARNTYPE TO SHAHIEDA;
GRANT SELECT, UPDATE ON YARNTYPE TO SHARON;
GRANT SELECT, UPDATE ON YARNTYPE TO SIDWELL;
GRANT SELECT ON YARNTYPE TO SUES;
GRANT SELECT, UPDATE ON YARNTYPE TO SUSAN;
GRANT SELECT ON YARNTYPE TO VIVIAN;
GRANT SELECT ON YNSTRUWBSRM TO BARRY;
GRANT SELECT ON YNTWIST TO ANDRIES;
GRANT SELECT ON YNTWIST TO BARBARA;
GRANT SELECT ON YNTWIST TO BARRY;
GRANT SELECT ON YNTWIST TO CHRIS;
GRANT SELECT ON YNTWIST TO CORDENAI;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON YNTWIST TO DAVID;
GRANT SELECT ON YNTWIST TO ESTELLE;
GRANT SELECT ON YNTWIST TO EUGENE;
GRANT SELECT ON YNTWIST TO EUGENEA;
GRANT SELECT ON YNTWIST TO GEORGINA;
GRANT SELECT ON YNTWIST TO GLODENE;
GRANT SELECT ON YNTWIST TO JOAN;
GRANT SELECT ON YNTWIST TO JOANVW;
GRANT SELECT ON YNTWIST TO JUANITA;
GRANT SELECT ON YNTWIST TO JUDITH;
GRANT SELECT ON YNTWIST TO LINDAC;
GRANT SELECT ON YNTWIST TO MONIQUE;
GRANT SELECT ON YNTWIST TO NADIA;
GRANT SELECT ON YNTWIST TO NATALIA;
GRANT SELECT ON YNTWIST TO PAUL;
GRANT SELECT ON YNTWIST TO RALPH;
GRANT SELECT ON YNTWIST TO RUTHANE;
GRANT SELECT ON YNTWIST TO SHARON;
GRANT SELECT ON YNTWIST TO SIDWELL;
GRANT SELECT ON YNTWIST TO SUES;
GRANT SELECT ON YNTWIST TO SUSAN;
GRANT SELECT ON YNTWIST TO VIVIAN;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO BARRY;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO ESTELLE;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO EUGENE;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO EUGENEA;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO GEORGINA;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO JOANVW;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO JUANITA;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO RUTHANE;
GRANT EXECUTE ON PROCEDURE SPBATCHREF TO SIDWELL;
GRANT EXECUTE ON PROCEDURE SPCALEMARDSTRIPSREF TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPDELINNO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPDELINNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPDESPNO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPDESPNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPEXTRACTTXNDETSUMMARY TO BARRY;
GRANT EXECUTE ON PROCEDURE SPEXTRACTTXNDETSUMMARY TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPEXTRACTTXNDETSUMMARYMONTH TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO BARRY;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO ESTELLE;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO EUGENE;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO EUGENEA;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO GEORGINA;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO JOANVW;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO JUANITA;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO RUTHANE;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETREF TO SIDWELL;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO BARRY;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO ESTELLE;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO EUGENE;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO EUGENEA;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO GEORGINA;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO JOANVW;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO JUANITA;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO RUTHANE;
GRANT EXECUTE ON PROCEDURE SPGENTXNDETTXNREF TO SIDWELL;
GRANT EXECUTE ON PROCEDURE SPISSUENO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPISSUENO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPPALLETNO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPPALLETNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPROLLNO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPROLLNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPSUMMARISETXNDET TO BARRY;
GRANT EXECUTE ON PROCEDURE SPSUMMARISETXNDET TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPSUMMARISETXNDETMONTH TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPTXNDETSUMMARY TO BARRY;
GRANT EXECUTE ON PROCEDURE SPTXNDETSUMMARY TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBBOXDETAILSINSERT TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBBOXDETAILSINSERT TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKECALCSALES TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKECALCSALES TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKECOMPUTE TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKECOMPUTE TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEDELETE TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEDELETE TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDALLOC TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDALLOC TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO ANDRIES;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO BARBARA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO GLODENE;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO JEROME;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO KEITH;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO LINDAC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO MAGDA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDFIN TO SUSAN;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDISCON TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDISCON TO GLODENE;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDISCON TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDISCON TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDISCON TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO ANDRIES;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO BARBARA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO GLODENE;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERS TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO ANDRIES;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO BARBARA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO GLODENE;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSHELD TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO ANDRIES;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO BARBARA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO GLODENE;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDORDERSNOTHELD TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO ANDRIES;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO BARBARA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSLIT TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSTOCK TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDSTOCK TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDWEAVING TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDWEAVING TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDWOVEN TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKEFINDWOVEN TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKEMAKELIVE TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBMAKESETUP TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBMAKESETUP TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO ANDRIES;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO BARBARA;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO CORDENAI;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO GLODENE;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO JEROME;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO KEITH;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO LINDAC;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO MAGDA;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO NADIA;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO NATALIA;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVBPARAMS TO SUSAN;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO ESTELLE;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO EUGENE;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO EUGENEA;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO GEORGINA;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO JOANVW;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO JUANITA;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO RUTHANE;
GRANT EXECUTE ON PROCEDURE SPVTLOGREF TO SIDWELL;
GRANT EXECUTE ON PROCEDURE SPVTORDNO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPVTORDNO TO PUBLIC;
GRANT EXECUTE ON PROCEDURE SPWIPRCPTNO TO BARRY;
GRANT EXECUTE ON PROCEDURE SPWIPRCPTNO TO PUBLIC;
